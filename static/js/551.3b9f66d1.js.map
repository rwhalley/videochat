{"version":3,"file":"static/js/551.3b9f66d1.js","mappings":"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E,GACAE,GACAG,GACAE,GACAgB,GACAa,GACAE,GACAE,GACAS,GACAM,GACAI,GACAE,GACAI,GACAG,GACAM,GACAC,GACAE,GACA,GACAG,GACA,GACAG,GACA,GACAW,GACAE,GACAE,GACA,GACAE,GACAG,GACAY,GACAG,GACAM,GACAQ,GACA,GACA,GACA,GACAC,GACAtM,GACAuM,GACAE,GACAC,GACAje,GACA,GACA,GACAme,GACA,GACAG,GACAC,GACAE,GACAE,GACAS,GACAG,GACAQ,GACA,GACAK,GACAE,GACAO,GACAM,GACAI,GACAG,GACAM,GACA,GACAU,GACAI,GACAiB,GACA,GACA,GACAI,GACAE,GACAM,GACA,GACAI,GACAG,GACAI,GACAO,GACAG,GACA7lB,GACA,GACAsmB,GACAI,GACAC,GACA,GACA3D,GACA6D,GACAC,GACAC,GACArkB,GACA+kB,GACAa,GACAI,GACAG,GACAa,GACAG,GACAC,GACA,GACAY,GACAS,GACAO,GACAG,GACA,GACAE,GACAG,GACAE,GACA,GACA5I,GACA8I,GACAC,GACAQ,GACAC,GACAE,GACAC,GACAK,GACAG,GACA,GACAE,GACA,GACAC,GACAU,GACAC,GACAC,GACAC,GACA,GACAvpB,GACAypB,GACAC,GACAE,GACAmB,GACAI,GACA,GACAE,GACAE,GACAW,GACAzM,EACJ,EACA,UAAW94F,KAAgBwlG,GACvB/lG,GAAeO,CAAY,ECjW/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCAA,IAAIylG,GAAE,CAACprD,EAAEnnD,IAAI,KAAKA,GAAGmnD,GAAGnnD,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,QAAQA,CAAC,EAAEA,EAAE,SAAa6N,GAAE,CAACs5C,EAAEnnD,EAAEwO,IAAI,IAAI,QAAQ,CAAC1V,EAAEiH,IAAI,CAAC,IAAI/G,EAAEE,GAAG,CAAC,GAAG,CAACgZ,EAAE1D,EAAE,KAAKtV,CAAC,CAAC,CAAC,OAAO,EAAP,CAAU6G,EAAE,CAAC,CAAC,CAAC,EAAEpF,EAAEzB,GAAG,CAAC,GAAG,CAACgZ,EAAE1D,EAAE,MAAMtV,CAAC,CAAC,CAAC,OAAO,EAAP,CAAU6G,EAAE,CAAC,CAAC,CAAC,EAAEmS,EAAEhZ,GAAGA,EAAE,KAAKJ,EAAEI,EAAE,KAAK,EAAE,QAAQ,QAAQA,EAAE,KAAK,EAAE,KAAKF,EAAE2B,CAAC,EAAEuX,GAAG1D,EAAEA,EAAE,MAAM24C,EAAEnnD,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,EAAMwyG,GAAED,GAAE,CAACE,EAAGC,IAAI,CAACA,EAAE,QAAQ,CAAC,QAAQ,QAAQ,QAAQ,MAAM,KAAK,oBAAoB,QAAQ,kBAAkB,MAAM,CAAC,OAAO,aAAa,YAAY,EAAE,QAAQ,CAAC,MAAM,uCAAuC,IAAI,yBAAyB,aAAa,2BAA2B,MAAM,sCAAsC,MAAM,SAAS,cAAc,uBAAuB,KAAK,wCAAwC,KAAK,8BAA8B,WAAW,kBAAkB,QAAQ,aAAa,KAAK,aAAa,QAAQ,mBAAmB,OAAO,8BAA8B,EAAE,iBAAiB,CAAC,uBAAuB,QAAQ,EAAE,KAAK,oCAAoC,OAAO,WAAW,OAAO,gBAAgB,gBAAgB,CAAC,uBAAuB,OAAO,EAAE,aAAa,CAAC,iCAAiC,SAAS,wBAAwB,SAAS,sCAAsC,SAAS,0BAA0B,SAAS,YAAY,SAAS,aAAa,QAAQ,EAAE,aAAa,CAAC,YAAY,iBAAiB,cAAc,mBAAmB,kBAAkB,mBAAmB,EAAE,QAAQ,0CAA0C,CAAC,CAAC,EAAiMr4F,GAAEm4F,GAAE,EAAEG,GAAE,qBAAqBt4F,GAAE,WAAWyrB,GAAE,cAAc8sE,GAAE,mBAAmBz2G,GAAE,wBAAwB02G,GAAE,8CAA8CC,GAAE3rD,GAAG,IAAI,QAAQ,SAASnnD,EAAEwO,EAAE,CAAC,IAAI1V,EAAE,SAAS,cAAc,QAAQ,EAAEA,EAAE,IAAIquD,EAAEruD,EAAE,OAAOkH,EAAElH,EAAE,QAAQ0V,EAAE,SAAS,KAAK,YAAY1V,CAAC,CAAC,CAAC,EAAEi6G,GAAE,IAAIllG,GAAE,OAAO,KAAK,WAAW,CAAC,IAAIs5C,EAAEnnD,EAAE,GAAG2yG,MAAKx2G,KAAI,MAAM22G,GAAE9yG,CAAC,EAAE,GAAG,CAACmnD,EAAE,MAAM,uBAAuB,CAAC,OAAU,QAAQ,KAAK,wEAAwE,EAAEnnD,EAAE,GAAG2yG,MAAKC,KAAI,MAAME,GAAE9yG,CAAC,EAAEmnD,EAAE,MAAM,mBAAmB,CAAC,CAAC,OAAOA,CAAC,CAAC,EAAE6rD,GAAE,IAAInlG,GAAE,OAAO,KAAK,WAAW,CAAC,IAAIs5C,EAAE,GAAGwrD,MAAKE,KAAI,CAAC7yG,EAAEwO,CAAC,EAAE,MAAM,QAAQ,IAAI,CAACukG,GAAE,EAAE,MAAM5rD,CAAC,CAAC,CAAC,EAAEruD,EAAE,MAAM0V,EAAE,YAAY,EAAEzO,EAAEC,EAAE,4BAA4B,EAAE,OAAOA,EAAE,OAAO,IAAI,IAAI,WAAWlH,CAAC,EAAEiH,CAAC,EAAEC,EAAE,WAAWlH,EAAE,UAAU,EAAE,QAAQ,MAAMgtC,GAAE,uBAAuB9lC,EAAE,sBAAsB,CAAC,EAAE,QAAQ,MAAM8lC,GAAE,gBAAgB9lC,EAAE,gBAAgB,CAAC,EAAE,QAAQ,MAAM8lC,GAAE,eAAe9lC,EAAE,eAAe,CAAC,EAAE,QAAQ,MAAM8lC,GAAE,kBAAkB9lC,EAAE,sBAAsB,CAAC,EAAEA,CAAC,CAAC,EAAMkO,GAAE,cAAc49B,GAAE,GAAGmnE,GAAET,GAAE,EAAEU,GAAE,IAAIC,GAAE,IAAIC,GAAE,IAAIC,GAAE,IAAIC,GAAE,KAAK,CAAC,YAAY,EAAE,EAAE,GAAG,CAAC,KAAK,eAAe,OAAO,KAAK,WAAW,EAAE,KAAK,iBAAiB,EAAE,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,KAAK,KAAK,gBAAgB,IAAI,KAAK,iBAAiB,IAAI,KAAK,oBAAoB,GAAG,KAAK,UAAU,OAAO,KAAK,gBAAgB,GAAG,KAAK,OAAO,KAAK,KAAK,UAAU,yBAAyB,KAAK,UAAU,KAAK,KAAK,MAAM,KAAK,KAAK,OAAO,KAAK,KAAK,QAAQ,EAAE,KAAK,iBAAiB,EAAE,KAAK,qBAAqB,KAAK,gBAAgB,KAAK,iBAAiB,KAAK,WAAW,IAAI,UAAU,KAAK,gBAAgB,KAAK,gBAAgB,EAAE,KAAK,iBAAiB,SAAS,cAAc,QAAQ,EAAE,KAAK,iBAAiB,MAAM,KAAK,gBAAgB,KAAK,iBAAiB,OAAO,KAAK,iBAAiB,KAAK,cAAc,KAAK,iBAAiB,WAAW,IAAI,EAAE,KAAK,QAAQ,CAAC,EAAE,KAAK,UAAU,KAAK,KAAK,eAAe,EAAE,KAAK,kBAAkB,KAAK,KAAK,cAAc,SAAS,cAAc,QAAQ,EAAE,KAAK,eAAe,KAAK,cAAc,WAAW,IAAI,EAAE,KAAK,cAAc,EAAE,KAAK,iBAAiB,EAAE,KAAK,IAAIplG,GAAE,mCAAmC,EAAE,KAAK,cAAc,KAAK,UAAU,CAAC,CAAC,MAAM,CAAC,OAAOL,GAAE,KAAK,KAAK,WAAW,CAAC,KAAK,gBAAgB,MAAM,KAAK,eAAe,KAAK,IAAIK,GAAE,4BAA4B,KAAK,MAAM,EAAE,KAAK,gBAAgB,GAAG,KAAK,cAAc8kG,GAAE,EAAE,KAAK,OAAO,MAAM,KAAK,eAAe,KAAK,kBAAkB,KAAK,kBAAkB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,UAAU,UAAU,QAAQ,QAAQ,IAAI,IAAI,UAAU,UAAU,QAAQ,SAAS,IAAI,IAAI,UAAU,UAAU,QAAQ,KAAK,IAAI,IAAI,UAAU,UAAU,QAAQ,MAAM,IAAI,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,SAAS,UAAU,MAAM,MAAM,EAAE,KAAK,GAAG,UAAU,UAAU,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,YAAY,IAAI,EAAE,YAAY,GAAG,EAAE,QAAQ,4BAAyB,EAAE,OAAO,8CAA8C,CAAC,CAAC,SAAS,CAAC,OAAOC,GAAE,IAAI,CAAC,eAAe,CAAC,OAAO,cAAW,CAAC,cAAc,EAAE,CAAC,OAAOplG,GAAE,KAAK,KAAK,WAAW,CAAC,GAAG,IAAI,GAAG,GAAG,IAAI,OAAO,KAAK,IAAIK,GAAE,0BAA0B,CAAC,EAAE,KAAK,WAAW,OAAO,KAAK,eAAe,OAAO,KAAK,oBAAoB,WAAW,IAAI,OAAO,KAAK,IAAIA,GAAE,0BAA0B,CAAC,EAAE,KAAK,WAAW,OAAO,KAAK,eAAe,OAAO,KAAK,oBAAoB,WAAW,aAAa,iBAAiB,CAAC,KAAK,IAAI,8BAA8B,CAAC,EAAE,IAAI,EAAE,MAAM,KAAK,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,EAAE,cAAc,MAAM,IAAI,MAAM,yEAAyE,EAAE,KAAK,oBAAoB,GAAG,KAAK,gBAAgB,EAAE,KAAK,eAAe,OAAO,SAAS,aAAa,iBAAiB,KAAK,IAAI,8BAA8B,CAAC,EAAE,KAAK,gBAAgB,EAAE,KAAK,gBAAgB,YAAY,YAAY,KAAK,gBAAgB,MAAM,GAAG,KAAK,gBAAgB,KAAK,GAAG,KAAK,gBAAgB,iBAAiB,IAAIL,GAAE,KAAK,KAAK,WAAW,CAAC,KAAK,iBAAiB,OAAO,MAAM,KAAK,gBAAgB,KAAK,EAAE,KAAK,oBAAoB,GAAG,KAAK,eAAe,QAAQ,CAAC,UAAU,QAAQ,IAAI,2BAA2B,EAAE,KAAK,UAAU,MAAM,KAAK,OAAO,CAAC,EAAE,KAAK,WAAW,MAAM,KAAK,UAAU,OAAO,EAAE,KAAK,eAAe,MAAM,KAAK,oBAAoB,OAAQ,OAAM,IAAI,MAAM,8EAA8E,MAAO,OAAM,IAAI,MAAM,8EAA8E,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,uBAAuB,EAAE,KAAK,kBAAkB,MAAM,EAAE,gBAAgB,KAAK,GAAG,EAAE,KAAK,kBAAkB,MAAM,EAAE,gBAAgB,KAAK,EAAE,KAAK,iBAAiB,UAAU,KAAK,gBAAgB,KAAK,GAAG,KAAK,gBAAgB,OAAO,KAAK,YAAY,KAAK,UAAU,UAAU,eAAe,KAAK,UAAU,SAAS,EAAE,EAAE,KAAK,OAAO,MAAM,KAAK,OAAO,MAAM,GAAG,KAAK,kBAAkB,KAAK,KAAK,UAAU,KAAK,KAAK,cAAc,EAAE,KAAK,eAAe,CAAC,CAAC,kBAAkB,EAAE,EAAE/U,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,MAAM,6BAA6B,EAAE,KAAK,MAAM,EAAE,KAAK,OAAO,EAAE,IAAI,EAAE,EAAE,WAAW,IAAI,EAAE,GAAG,EAAE,OAAO,QAAQ,EAAE,QAAQ,EAAE,OAAO,MAAM,EAAE,OAAO,EAAE,OAAO,SAAS,EAAE,SAAS,EAAE,OAAO,OAAO,EAAE,QAAQ,KAAK,iBAAiB,UAAU,KAAK,gBAAgB,MAAM,EAAE,MAAM,KAAK,gBAAgB,OAAO,EAAE,QAAQ,KAAK,UAAU,EAAE,KAAK,iBAAiB,EAAE,MAAM,EAAE,OAAO,KAAK,kBAAkB,EAAE,MAAM,IAAI,MAAM,4BAA4B,EAAE,IAAIE,EAAE,IAAI6U,GAAE,KAAK,KAAK,WAAW,CAAC,MAAM,KAAK,gBAAgB/U,CAAC,CAAC,CAAC,EAAE,KAAK,aAAa,QAAQ,CAAC,KAAK,qBAAqB,KAAK,UAAU,yBAAyB,OAAO,KAAK,UAAU,OAAO,OAAO,KAAK,UAAU,UAAU,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,GAAGE,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO6U,GAAE,KAAK,KAAK,WAAW,CAAC,OAAO,EAAE,YAAY,YAAY,IAAI,QAAQ,CAAC,EAAE/U,IAAI,CAAC,EAAE,OAAO,IAAI,EAAE,CAAC,EAAE,EAAE,QAAQA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,MAAM,CAAC,EAAE,KAAK,GAAG,EAAE,YAAY,CAAC,EAAE,KAAK,I,EAAG,MAAE,CAAC,CAAC,EAAE,KAAK,I,EAAG,MAAE,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,QAAQ,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,KAAK,cAAc,UAAU,KAAK,MAAM,EAAE,EAAE,KAAK,MAAM,MAAM,KAAK,MAAM,OAAO,EAAE,EAAE,KAAK,gBAAgB,KAAK,gBAAgB,EAAE,IAAI,EAAE,KAAK,cAAc,aAAa,EAAE,EAAE,KAAK,gBAAgB,KAAK,gBAAgB,EAAE,EAAE,KAAK,OAAO,sBAAsB,EAAE,EAAE,QAAQA,EAAE,EAAEA,EAAE,KAAK,qBAAqBA,IAAI,KAAK,OAAO,QAAQ,EAAEA,EAAE,GAAG,EAAE,KAAKA,EAAE,GAAG,IAAI,KAAK,OAAO,QAAQ,EAAEA,EAAE,EAAE,GAAG,EAAE,KAAKA,EAAE,EAAE,GAAG,IAAI,KAAK,OAAO,QAAQ,EAAEA,EAAE,EAAE,GAAG,EAAE,KAAKA,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,OAAO,cAAc,EAAE,IAAI,EAAE,KAAK,OAAO,uBAAuB,EAAE,EAAE,QAAQA,EAAE,EAAEA,EAAE,KAAK,qBAAqBA,IAAI,GAAG,KAAK,YAAY,OAAO,CAAC,IAAI,EAAE,KAAK,OAAO,QAAQ,EAAEA,EAAE,GAAGE,EAAE,KAAK,OAAO,QAAQ,EAAEF,EAAE,EAAE,GAAG6B,EAAE,KAAK,IAAI,EAAE3B,CAAC,EAAEkZ,EAAE,KAAK,IAAI,EAAEvX,CAAC,EAAEzB,EAAE,KAAK,IAAIF,EAAE2B,CAAC,EAAE,KAAK,WAAW,KAAK7B,EAAE,EAAE,GAAG,IAAII,GAAGgZ,EAAEhZ,EAAE,SAAS,KAAK,YAAY,yBAAyB,CAAC,IAAI,EAAE,KAAK,OAAO,QAAQ,EAAEJ,GAAG,KAAK,WAAW,KAAKA,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,KAAK,cAAc,aAAa,KAAK,WAAW,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,UAAU,yBAAyB,OAAO,KAAK,UAAU,OAAO,OAAO,KAAK,oBAAoB,KAAK,UAAU,OAAO,YAAY,KAAK,UAAU,OAAO,YAAY,KAAK,eAAe,EAAE,KAAK,UAAU,yBAAyB,YAAY,KAAK,UAAU,OAAO,OAAO,KAAK,UAAU,UAAU,KAAK,MAAM,EAAE,CAAC,EAAE,KAAK,kBAAkB,KAAK,OAAO,MAAMo6G,IAAG,KAAK,OAAO,OAAOE,IAAG,KAAK,OAAO,MAAMD,IAAG,KAAK,OAAO,OAAOE,IAAG,KAAK,cAAc,EAAE,KAAK,wBAAwB,CAAC,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,UAAU,aAAa,EAAE,EAAE,KAAK,OAAO,MAAM,KAAK,OAAO,MAAM,EAAE,EAAE,KAAK,QAAQ,UAAU,CAAC,EAAE,KAAK,UAAU,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,UAAU,UAAU,KAAK,iBAAiB,EAAE,EAAE,KAAK,gBAAgB,KAAK,iBAAiB,EAAE,EAAE,KAAK,OAAO,MAAM,KAAK,OAAO,MAAM,CAAC,CAAC,yBAAyB,CAAC,KAAK,UAAU,yBAAyB,mBAAmB,KAAK,UAAU,sBAAsB,GAAG,KAAK,UAAU,sBAAsB,OAAO,KAAK,oBAAoB,KAAK,iBAAiB,SAAS,KAAK,iBAAiB,MAAM,KAAK,gBAAgB,YAAY,EAAE,KAAK,qBAAqB,EAAE,KAAK,iBAAiB,QAAQ,KAAK,qBAAqB,EAAE,KAAK,iBAAiB,QAAQ,KAAK,cAAc,KAAK,UAAU,KAAK,gBAAgB,MAAMvnE,IAAG,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,UAAU,SAAS,KAAK,eAAe,GAAG,KAAK,cAAc,GAAG,KAAK,gBAAgB,KAAK,mBAAmB,GAAG,KAAK,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC,OAAOj+B,GAAE,KAAK,KAAK,WAAW,CAAC,KAAK,SAAS,KAAK,gBAAgB,EAAE,MAAM,KAAK,MAAM,CAAC,EAAE,KAAK,eAAe,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,KAAK,QAAQ,KAAK,gBAAgB,KAAK,gBAAgB,WAAW,KAAK,gBAAgB,WAAW,CAAC,CAAC,sBAAsB,CAAC,KAAK,QAAQ,KAAK,gBAAgB,KAAK,gBAAgB,MAAM,KAAK,gBAAgB,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,KAAK,mBAAmB,KAAK,CAAC,IAAI,EAAE,KAAK,UAAU,KAAK,gBAAgB,KAAK,KAAK,cAAc,MAAM,EAAE,MAAM,KAAK,cAAc,OAAO,EAAE,OAAO,KAAK,kBAAkB,KAAK,eAAe,gBAAgB,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,KAAK,kBAAkB,KAAK,IAAI,KAAK,UAAU,KAAK,gBAAgB,KAAK,EAAE,KAAK,eAAe,aAAa,KAAK,kBAAkB,EAAE,CAAC,EAAE,KAAK,QAAQ,KAAK,cAAc,KAAK,kBAAkB,MAAM,KAAK,kBAAkB,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE/U,EAAE,CAAC,IAAI,EAAEE,EAAE2B,EAAEuX,EAAE,EAAEpZ,EAAE,KAAK,kBAAkB,EAAE,EAAEE,EAAE,EAAE,KAAK,iBAAiB2B,EAAE,EAAEuX,GAAGpZ,EAAEE,GAAG,IAAIA,EAAEF,EAAE,EAAEA,EAAE,KAAK,iBAAiBoZ,EAAE,EAAEvX,GAAG,EAAE,GAAG,GAAG,KAAK,UAAU,UAAU,EAAEA,EAAEuX,EAAE,EAAElZ,EAAE,EAAE,EAAE,KAAK,OAAO,MAAM,KAAK,OAAO,MAAM,CAAC,CAAC,qBAAqB,CAAC,OAAO6U,GAAE,KAAK,KAAK,WAAW,CAAC,IAAI,EAAE,OAAO,KAAK,MAAM,OAAO,IAAI,EAAE,MAAM,KAAK,MAAM,OAAO,IAAI,EAAE,OAAO,KAAK,MAAM,OAAO,IAAI,EAAE,OAAO,KAAK,MAAM,OAAO,IAAI,EAAE,OAAO,KAAK,MAAM,OAAO,KAAK,EAAE,OAAO,KAAK,MAAM,OAAO,OAAO,EAAE,QAAQ,KAAK,UAAU,OAAO,QAAQ,KAAK,KAAK,UAAU,UAAU,KAAK,MAAM,EAAE,EAAE,KAAK,OAAO,MAAM,KAAK,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,KAAK,QAAQ,UAAU,SAAS,cAAc,QAAQ,EAAE,KAAK,QAAQ,OAAO,KAAK,QAAQ,UAAU,WAAW,IAAI,EAAE,KAAK,QAAQ,gBAAgB,CAAC,EAAE,IAAI,KAAK,QAAQ,OAAO,gBAAgB,EAAE,CAAC,EAAE,KAAK,QAAQ,UAAU,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE/U,IAAI,CAAC,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK,EAAE,MAAM,CAAC,EAAEE,EAAE,KAAK,MAAM,EAAE,CAAC,EAAE2B,EAAE,EAAE,KAAKuX,EAAE,EAAE,MAAMhZ,EAAE,EAAE,OAAOolB,EAAEpM,EAAE9Z,EAAEc,EAAEq6G,EAAE,KAAK,QAAQ,gBAAgBj1F,EAAElmB,CAAC,EAAE0kB,EAAEy2F,EAAE,KAAKC,EAAE16G,EAAE,EAAE,EAAE,QAAQ+E,EAAE,EAAEA,EAAEzF,EAAEyF,EAAEA,EAAE,EAAE,QAAQ4Q,EAAE,EAAEA,EAAE6P,EAAE7P,EAAEA,EAAE,EAAE,CAAC,IAAIxQ,GAAGJ,EAAEygB,EAAE7P,GAAG,EAAE,GAAG9T,EAAEsD,EAAE,KAAK,GAAGwQ,EAAE6P,GAAGzgB,EAAEzF,EAAE,CAAC,IAAIq7G,EAAE51G,EAAE61G,EAAEjlG,EAAEklG,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE5lG,EAAE,EAAE,QAAQyR,EAAE,EAAEA,EAAE,EAAEA,IAAI,QAAQvoB,EAAE,EAAEA,EAAE,EAAEA,IAAI,CAAC,IAAI2W,EAAE2lG,EAAE/zF,EAAE1mB,EAAE86G,EAAEJ,EAAEv8G,EAAE6B,EAAE,GAAG8U,GAAG,GAAGA,EAAE5U,GAAG46G,GAAG,GAAGA,EAAE5hG,EAAE,CAAC,IAAI6E,GAAGjJ,EAAEoE,EAAE4hG,GAAG,EAAE76G,EAAE,EAAEymB,EAAE,EAAEvoB,GAAGw8G,GAAGh5G,EAAEoc,GAAG9d,EAAE26G,GAAGj5G,EAAEoc,EAAE,GAAG9d,EAAE46G,GAAGl5G,EAAEoc,EAAE,GAAG9d,EAAEgV,GAAGtT,EAAEoc,EAAE,GAAG9d,CAAC,CAAC,CAAC6jB,EAAE7e,GAAG01G,EAAE72F,EAAE7e,EAAE,GAAG21G,EAAE92F,EAAE7e,EAAE,GAAG41G,EAAE/2F,EAAE7e,EAAE,GAAGgQ,EAAEulG,GAAG,IAAIvlG,EAAE,CAAC,CAAC,OAAOslG,CAAC,CAAC,CAAC,C,6BCEtqX,OAAO,eAAeQ,EAAS,aAAc,CAC3C,MAAO,EACT,CAAE,EACFA,EAAQ,YAAc,OAKtB,IAAIC,EAAc,SAAqBh4C,EAAQvhE,GAAO,CAcpD,QAbIw5G,GAAY,IAAI,MAAMj4C,EAAO,MAAM,EACnChW,EAAOgW,EAAO,OAASvhE,GAEvBy5G,EAAQ,SAAeC,EAAOC,EAAS,CACzC,IAAIxX,EAAa5gC,EAAO,MAAMo4C,EAAU35G,IAAQ25G,EAAU,GAAK35G,EAAK,EACpEw5G,GAAU,OAAO,MAAMA,GAAW,CAACE,EAAQ15G,GAAOA,EAAK,EAAE,OAAOmiG,CAAU,CAAC,CAC7E,EAGIlL,GAAU,CAAC,EAAG,EAAG,EAAG,CAAC,EACrBvvC,EAAQ,CAAC,EAAG,EAAG,EAAG,CAAC,EACnBiyD,GAAU,EAELC,GAAO,EAAGA,GAAO,EAAGA,KAC3B,QAASF,EAAQziB,GAAQ2iB,IAAOF,EAAQnuD,EAAMmuD,GAAShyD,EAAMkyD,IAC3DH,EAAMC,EAAOC,EAAO,EACpBA,KAIJ,OAAOH,EACT,EAEAF,EAAQ,YAAcC,C,qCChCtB,EAA6C,CAC3C,MAAO,EACT,EACAD,EAAQ,GAAmB,EAA0BA,EAAQ,GAAW,OAExE,IAAIO,EAAOC,GAAuB,EAAQ,IAAyC,CAAC,EAEhFC,GAAwB,EAAQ,IAAyB,EAEzDC,GAAQ,EAAQ,IAA2C,EAE3DC,EAAe,EAAQ,IAAe,EAEtCC,EAAO,EAAQ,IAAO,EAE1B,SAASJ,GAAuBv9F,EAAK,CAAE,OAAOA,GAAOA,EAAI,WAAaA,EAAM,CAAE,QAAWA,CAAI,CAAG,CAEhG,IAAI49F,EAAW,SAAkBC,EAAa,CAC5C,IAAIC,EAAW,IAAI,WAAWD,CAAW,EACzC,O,EAAWL,GAAsB,Q,EAAWC,GAAM,aAAaK,CAAQ,EAAGR,EAAK,OAAU,CAC3F,EAEAP,EAAQ,GAAWa,EAEnB,IAAIG,GAAgB,SAAuBn3F,EAAO,CAIhD,QAHIo3F,EAAcp3F,EAAM,OAAO,OAC3Bq3F,EAAY,IAAI,kBAAkBD,EAAc,CAAC,EAE5Cl8G,EAAI,EAAGA,EAAIk8G,EAAal8G,IAAK,CACpC,IAAIo8G,GAAMp8G,EAAI,EACVq8G,GAAav3F,EAAM,OAAO9kB,GAC1Bs8G,GAAQx3F,EAAM,WAAWu3F,KAAe,CAAC,EAAG,EAAG,CAAC,EACpDF,EAAUC,IAAOE,GAAM,GACvBH,EAAUC,GAAM,GAAKE,GAAM,GAC3BH,EAAUC,GAAM,GAAKE,GAAM,GAC3BH,EAAUC,GAAM,GAAKC,KAAev3F,EAAM,iBAAmB,IAAM,CACrE,CAEA,OAAOq3F,CACT,EAEII,GAAkB,SAAyBC,EAAOC,EAAKC,EAAiB,CAC1E,GAAI,CAACF,EAAM,MAAO,CAChB,QAAQ,KAAK,2CAA2C,EACxD,MACF,CAEA,IAAI13F,EAAQ03F,EAAM,MAEdN,GAAcp3F,EAAM,WAAW,MAAQA,EAAM,WAAW,OAExDo+C,I,EAAa24C,EAAK,KAAK/2F,EAAM,KAAK,YAAaA,EAAM,KAAK,OAAQo3F,EAAW,EAE7Ep3F,EAAM,WAAW,IAAI,aACvBo+C,I,EAAa04C,EAAa,aAAa14C,GAAQp+C,EAAM,WAAW,KAAK,GAGvE,IAAI63F,GAAc,CAChB,OAAAz5C,GACA,KAAM,CACJ,IAAKs5C,EAAM,MAAM,WAAW,IAC5B,KAAMA,EAAM,MAAM,WAAW,KAC7B,MAAOA,EAAM,MAAM,WAAW,MAC9B,OAAQA,EAAM,MAAM,WAAW,MACjC,CACF,EAEA,OAAI13F,EAAM,WAAW,KAAOA,EAAM,WAAW,IAAI,OAC/C63F,GAAY,WAAa73F,EAAM,IAE/B63F,GAAY,WAAaF,EAIvBD,EAAM,MACRG,GAAY,OAASH,EAAM,IAAI,OAAS,IAAM,GAE9CG,GAAY,aAAeH,EAAM,IAAI,OAAO,SAExCA,EAAM,IAAI,OAAO,wBACnBG,GAAY,iBAAmBH,EAAM,IAAI,wBAKzCE,IACFC,GAAY,MAAQV,GAAcU,EAAW,GAGxCA,EACT,EAEA,EAA0BJ,GAE1B,IAAIK,EAAmB,SAA0BC,EAAWC,EAAmB,CAC7E,OAAOD,EAAU,OAAO,OAAO,SAAUx+G,EAAG,CAC1C,OAAOA,EAAE,KACX,CAAC,EAAE,IAAI,SAAUA,EAAG,CAClB,OAAOk+G,GAAgBl+G,EAAGw+G,EAAU,IAAKC,CAAiB,CAC5D,CAAC,CACH,EAEA7B,EAAQ,GAAmB2B,C,6BCtG3B,OAAO,eAAe3B,EAAS,aAAc,CAC3C,MAAO,EACT,CAAE,EACFA,EAAQ,IAAM,OAMd,IAAI8B,EAAM,SAAaC,EAAa7gG,GAAM8gG,GAAY,CACpD,IAAIC,EAAiB,KACjBC,EAAW,GACXC,GAAOH,GACPn4C,EAAWu4C,GAAOC,GAAWC,EAAWC,EAAoBC,EAASC,EAAUC,GAAMC,EAAM59G,EAAG69G,GAAOC,GAAWC,EAAO19D,EAAK29D,EAAIC,EAChIC,GAAY,IAAI,MAAMjB,EAAU,EAChCtyF,GAAS,IAAI,MAAMuyF,CAAc,EACjCzxF,EAAS,IAAI,MAAMyxF,CAAc,EACjCiB,GAAa,IAAI,MAAMjB,EAAiB,CAAC,EAU7C,IARAY,GAAYd,EACZK,GAAQ,GAAKS,GACbN,EAAqBH,GAAQ,EAC7Bv4C,EAAYu4C,GAAQ,EACpBK,EAAWP,EACXI,EAAYO,GAAY,EACxBR,IAAa,GAAKC,GAAa,EAE1BK,EAAO,EAAGA,EAAOP,GAAOO,IAC3BjzF,GAAOizF,GAAQ,EACfnyF,EAAOmyF,GAAQA,EAIjB,IAAIC,GAAOF,GAAM3zD,EAAO+zD,EAAO19D,EAAK49D,EAAID,EAGxC,IAFAH,GAAQF,GAAO3zD,EAAQ+zD,EAAQ19D,EAAM49D,EAAKD,EAAK,EAE1Ch+G,EAAI,EAAGA,EAAIo9G,IAAO,CACrB,GAAI/8D,IAAQ,EAAG,CACb,GAAIs9D,GAAOJ,EAAW,CAEpBM,IAAS1hG,GAAK6hG,IAAOL,GACrBA,IAAQ,EACRK,IACA,QACF,CAOA,GAJAJ,EAAOC,GAAQP,GACfO,KAAUN,EACVI,IAAQJ,EAEJK,EAAO94C,GAAa84C,GAAQJ,EAC9B,MAGF,GAAII,GAAQP,GAAO,CAEjBE,EAAYO,GAAY,EACxBR,IAAa,GAAKC,GAAa,EAC/Bz4C,EAAYu4C,GAAQ,EACpBK,EAAWP,EACX,QACF,CAEA,GAAIO,GAAYP,EAAU,CACxBgB,GAAW99D,KAAS50B,EAAOmyF,GAC3BF,EAAWE,EACXG,EAAQH,EACR,QACF,CASA,IAPAH,EAAUG,EAENA,GAAQ94C,IACVq5C,GAAW99D,KAAS09D,EACpBH,EAAOF,GAGFE,EAAOP,IACZc,GAAW99D,KAAS50B,EAAOmyF,GAC3BA,EAAOjzF,GAAOizF,GAGhBG,EAAQtyF,EAAOmyF,GAAQ,IACvBO,GAAW99D,KAAS09D,EAIhBj5C,EAAYo4C,IACdvyF,GAAOm6C,GAAa44C,EACpBjyF,EAAOq5C,GAAai5C,EACpBj5C,KAEKA,EAAYw4C,MAAe,GAAKx4C,EAAYo4C,IAC/CK,IACAD,IAAax4C,IAIjB44C,EAAWD,CACb,CAGAp9D,IACA69D,GAAUD,KAAQE,GAAW99D,GAC7BrgD,GACF,CAEA,IAAKA,EAAIi+G,EAAIj+G,EAAIo9G,GAAMp9G,IACrBk+G,GAAUl+G,GAAK,EAGjB,OAAOk+G,EACT,EAEAjD,EAAQ,IAAM8B,C,6BCnHd,OAAO,eAAe9B,EAAS,aAAc,CAC3C,MAAO,EACT,CAAE,EACFA,EAAQ,KAAOA,EAAQ,YAAcA,EAAQ,MAAQ,OAErD,IAAImD,EAAQ,SAASA,GAAMC,GAAQC,EAAQ,CACzC,IAAIh+G,EAAS,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,CAAC,EAC9Ei+G,GAAS,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAKj+G,EAEjF,GAAI,MAAM,QAAQg+G,CAAM,EACtBA,EAAO,QAAQ,SAAUE,GAAY,CACnC,OAAOJ,GAAMC,GAAQG,GAAYl+G,EAAQi+G,EAAM,CACjD,CAAC,UACQ,OAAOD,GAAW,WAC3BA,EAAOD,GAAQ/9G,EAAQi+G,GAAQH,EAAK,MAC/B,CACL,IAAIv3G,EAAM,OAAO,KAAKy3G,CAAM,EAAE,GAE1B,MAAM,QAAQA,EAAOz3G,EAAI,GAC3B03G,GAAO13G,GAAO,CAAC,EACfu3G,GAAMC,GAAQC,EAAOz3G,GAAMvG,EAAQi+G,GAAO13G,EAAI,GAE9C03G,GAAO13G,GAAOy3G,EAAOz3G,GAAKw3G,GAAQ/9G,EAAQi+G,GAAQH,EAAK,CAE3D,CAEA,OAAO99G,CACT,EAEA26G,EAAQ,MAAQmD,EAEhB,IAAIK,EAAc,SAAqBH,GAAQI,EAAe,CAC5D,OAAO,SAAUL,EAAQ/9G,GAAQi+G,EAAQH,GAAO,CAC1CM,EAAcL,EAAQ/9G,GAAQi+G,CAAM,GACtCH,GAAMC,EAAQC,GAAQh+G,GAAQi+G,CAAM,CAExC,CACF,EAEAtD,EAAQ,YAAcwD,EAEtB,IAAIE,EAAO,SAAcL,GAAQM,EAAc,CAC7C,OAAO,SAAUP,EAAQ/9G,GAAQi+G,EAAQH,GAAO,CAI9C,QAHIr+G,GAAM,CAAC,EACP8+G,EAAgBR,EAAO,IAEpBO,EAAaP,EAAQ/9G,GAAQi+G,CAAM,GAAG,CAC3C,IAAIO,EAAY,CAAC,EAIjB,GAHAV,GAAMC,EAAQC,GAAQh+G,GAAQw+G,CAAS,EAGnCT,EAAO,MAAQQ,EACjB,MAGFA,EAAgBR,EAAO,IACvBt+G,GAAI,KAAK++G,CAAS,CACpB,CAEA,OAAO/+G,EACT,CACF,EAEAk7G,EAAQ,KAAO0D,C,6BC/Df,OAAO,eAAe1D,EAAS,aAAc,CAC3C,MAAO,EACT,CAAE,EACFA,EAAQ,SAAWA,EAAQ,UAAYA,EAAQ,aAAeA,EAAQ,WAAaA,EAAQ,UAAYA,EAAQ,UAAYA,EAAQ,SAAWA,EAAQ,SAAWA,EAAQ,YAAc,OAGvL,IAAI8D,EAAc,SAAqBC,EAAW,CAChD,MAAO,CACL,KAAMA,EACN,IAAK,CACP,CACF,EAEA/D,EAAQ,YAAc8D,EAEtB,IAAIE,EAAW,UAAoB,CACjC,OAAO,SAAUZ,EAAQ,CACvB,OAAOA,EAAO,KAAKA,EAAO,MAC5B,CACF,EAEApD,EAAQ,SAAWgE,EAEnB,IAAIC,EAAW,UAAoB,CACjC,IAAIt6G,EAAS,UAAU,OAAS,GAAK,UAAU,KAAO,OAAY,UAAU,GAAK,EACjF,OAAO,SAAUy5G,EAAQ,CACvB,OAAOA,EAAO,KAAKA,EAAO,IAAMz5G,EAClC,CACF,EAEAq2G,EAAQ,SAAWiE,EAEnB,IAAIC,GAAY,SAAmBhpC,EAAQ,CACzC,OAAO,SAAUkoC,EAAQ,CACvB,OAAOA,EAAO,KAAK,SAASA,EAAO,IAAKA,EAAO,KAAOloC,CAAM,CAC9D,CACF,EAEA8kC,EAAQ,UAAYkE,GAEpB,IAAIC,GAAY,SAAmBjpC,EAAQ,CACzC,OAAO,SAAUkoC,EAAQ,CACvB,OAAOA,EAAO,KAAK,SAASA,EAAO,IAAKA,EAAO,IAAMloC,CAAM,CAC7D,CACF,EAEA8kC,EAAQ,UAAYmE,GAEpB,IAAIC,EAAa,SAAoBlpC,EAAQ,CAC3C,OAAO,SAAUkoC,EAAQ,CACvB,OAAO,MAAM,KAAKc,GAAUhpC,CAAM,EAAEkoC,CAAM,CAAC,EAAE,IAAI,SAAUngH,EAAO,CAChE,OAAO,OAAO,aAAaA,CAAK,CAClC,CAAC,EAAE,KAAK,EAAE,CACZ,CACF,EAEA+8G,EAAQ,WAAaoE,EAErB,IAAIC,EAAe,SAAsBC,EAAc,CACrD,OAAO,SAAUlB,EAAQ,CACvB,IAAIp6G,EAAQk7G,GAAU,CAAC,EAAEd,CAAM,EAC/B,OAAOkB,GAAgBt7G,EAAM,IAAM,GAAKA,EAAM,IAAMA,EAAM,IAAM,GAAKA,EAAM,EAC7E,CACF,EAEAg3G,EAAQ,aAAeqE,EAEvB,IAAIE,GAAY,SAAmBC,EAAUC,EAAa,CACxD,OAAO,SAAUrB,EAAQ/9G,EAAQi+G,EAAQ,CAKvC,QAJI1zE,EAAQ,OAAO60E,GAAgB,WAAaA,EAAYrB,EAAQ/9G,EAAQi+G,CAAM,EAAImB,EAClFC,GAASR,GAAUM,CAAQ,EAC3B1/G,GAAM,IAAI,MAAM8qC,CAAK,EAEhB7qC,GAAI,EAAGA,GAAI6qC,EAAO7qC,KACzBD,GAAIC,IAAK2/G,GAAOtB,CAAM,EAGxB,OAAOt+G,EACT,CACF,EAEAk7G,EAAQ,UAAYuE,GAEpB,IAAII,EAAe,SAAsBjC,EAAMkC,EAAY1pC,EAAQ,CAGjE,QAFI71E,EAAS,EAEJN,EAAI,EAAGA,EAAIm2E,EAAQn2E,IAC1BM,GAAUq9G,EAAKkC,EAAa7/G,IAAM,KAAK,IAAI,EAAGm2E,EAASn2E,EAAI,CAAC,EAG9D,OAAOM,CACT,EAEIw/G,GAAW,SAAkBxB,EAAQ,CACvC,OAAO,SAAUD,EAAQ,CAMvB,QALI0B,EAAQd,EAAS,EAAEZ,CAAM,EAGzBV,EAAO,IAAI,MAAM,CAAC,EAEb39G,EAAI,EAAGA,EAAI,EAAGA,IACrB29G,EAAK,EAAI39G,GAAK,CAAC,EAAE+/G,EAAQ,GAAK//G,GAIhC,OAAO,OAAO,KAAKs+G,CAAM,EAAE,OAAO,SAAUj/F,EAAKxY,GAAK,CACpD,IAAIm5G,GAAM1B,EAAOz3G,IAEjB,OAAIm5G,GAAI,OACN3gG,EAAIxY,IAAO+4G,EAAajC,EAAMqC,GAAI,MAAOA,GAAI,MAAM,EAEnD3gG,EAAIxY,IAAO82G,EAAKqC,GAAI,OAGf3gG,CACT,EAAG,CAAC,CAAC,CACP,CACF,EAEA47F,EAAQ,SAAW6E,E,+BCvHnB,OAAO,eAAe7E,EAAS,aAAc,CAC3C,MAAO,EACT,CAAE,EACFA,EAAQ,QAAa,OAErB,IAAI15F,EAAI,EAAQ,IAAK,EAEjBo6F,EAAQ,EAAQ,IAAkB,EAGlCsE,GAAkB,CACpB,OAAQ,SAAgB5B,EAAQ,CAM9B,QALI6B,EAAa,EACbC,EAAS,CAAC,EACVC,EAAa/B,EAAO,KAAK,OACzBxzE,EAAQ,EAEH1pC,I,EAAWw6G,EAAM,UAAU,EAAE0C,CAAM,EAAGl9G,KAAS++G,GAGjD/+G,GAH6DA,I,EAAWw6G,EAAM,UAAU,EAAE0C,CAAM,EAAG,CAKxG,GAAIA,EAAO,IAAMl9G,IAAQi/G,EAAY,CACnC,IAAIC,GAAgBD,EAAa/B,EAAO,IACxC8B,EAAO,M,EAASxE,EAAM,WAAW0E,EAAa,EAAEhC,CAAM,CAAC,EACvDxzE,GAASw1E,GACT,KACF,CAEAF,EAAO,M,EAASxE,EAAM,WAAWx6G,EAAI,EAAEk9G,CAAM,CAAC,EAC9CxzE,GAAS1pC,EACX,CAKA,QAHIb,GAAS,IAAI,WAAWuqC,CAAK,EAC7BjmC,EAAS,EAEJ5E,GAAI,EAAGA,GAAImgH,EAAO,OAAQngH,KACjCM,GAAO,IAAI6/G,EAAOngH,IAAI4E,CAAM,EAC5BA,GAAUu7G,EAAOngH,IAAG,OAGtB,OAAOM,EACT,CACF,EAEIggH,I,EAAgB/+F,EAAE,aAAa,CACjC,IAAK,CAAC,CACJ,O,EAAWo6F,EAAM,WAAW,CAAC,CAC/B,EAAG,CACD,U,EAAcA,EAAM,UAAU,CAChC,EAAG,CACD,Q,EAAYA,EAAM,UAAU,CAC1B,OAAQ,CACN,MAAO,EACP,OAAQ,CACV,EACA,SAAU,CACR,MAAO,EACP,OAAQ,CACV,EACA,UAAW,CACT,MAAO,CACT,EACA,sBAAuB,CACrB,MAAO,CACT,CACF,CAAC,CACH,EAAG,CACD,O,EAAWA,EAAM,cAAc,EAAI,CACrC,EAAG,CACD,uB,EAA2BA,EAAM,UAAU,CAC7C,EAAG,CACD,Y,EAAgBA,EAAM,UAAU,CAClC,CAAC,CACH,EAAG,SAAU0C,EAAQ,CACnB,IAAIkC,G,EAAY5E,EAAM,WAAW,CAAC,EAAE0C,CAAM,EAC1C,OAAOkC,EAAM,KAAO,IAAQA,EAAM,KAAO,GAC3C,CAAC,EAEGC,G,EAAkBj/F,EAAE,aAAa,CACnC,MAAO,CAAC,CACN,M,EAAUo6F,EAAM,UAAU,CAC5B,EAAG,CACD,WAAY,CAAC,CACX,M,EAAUA,EAAM,cAAc,EAAI,CACpC,EAAG,CACD,K,EAASA,EAAM,cAAc,EAAI,CACnC,EAAG,CACD,O,EAAWA,EAAM,cAAc,EAAI,CACrC,EAAG,CACD,Q,EAAYA,EAAM,cAAc,EAAI,CACtC,EAAG,CACD,K,EAASA,EAAM,UAAU,CACvB,OAAQ,CACN,MAAO,CACT,EACA,WAAY,CACV,MAAO,CACT,EACA,KAAM,CACJ,MAAO,CACT,EACA,OAAQ,CACN,MAAO,EACP,OAAQ,CACV,EACA,KAAM,CACJ,MAAO,EACP,OAAQ,CACV,CACF,CAAC,CACH,CAAC,CACH,G,EAAOp6F,EAAE,aAAa,CACpB,K,EAASo6F,EAAM,WAAW,EAAG,SAAU0C,EAAQ/9G,EAAQi+G,EAAQ,CAC7D,OAAO,KAAK,IAAI,EAAGA,EAAO,WAAW,IAAI,KAAO,CAAC,CACnD,CAAC,CACH,EAAG,SAAUF,EAAQ/9G,EAAQi+G,EAAQ,CACnC,OAAOA,EAAO,WAAW,IAAI,MAC/B,CAAC,EAAG,CACF,KAAM,CAAC,CACL,a,EAAiB5C,EAAM,UAAU,CACnC,EAAGsE,EAAe,CACpB,CAAC,CACH,EAAG,SAAU5B,EAAQ,CACnB,O,EAAW1C,EAAM,UAAU,EAAE0C,CAAM,IAAM,EAC3C,CAAC,EAEGoC,G,EAAiBl/F,EAAE,aAAa,CAClC,KAAM,CAAC,CACL,O,EAAWo6F,EAAM,WAAW,CAAC,CAC/B,EAAG,CACD,W,EAAeA,EAAM,UAAU,CACjC,EAAG,CACD,QAAS,SAAiB0C,EAAQ/9G,EAAQi+G,EAAQ,CAChD,O,EAAW5C,EAAM,WAAW4C,EAAO,KAAK,SAAS,EAAEF,CAAM,CAC3D,CACF,EAAG4B,EAAe,CACpB,EAAG,SAAU5B,EAAQ,CACnB,IAAIkC,G,EAAY5E,EAAM,WAAW,CAAC,EAAE0C,CAAM,EAC1C,OAAOkC,EAAM,KAAO,IAAQA,EAAM,KAAO,CAC3C,CAAC,EAEGG,I,EAAwBn/F,EAAE,aAAa,CACzC,YAAa,CAAC,CACZ,O,EAAWo6F,EAAM,WAAW,CAAC,CAC/B,EAAG,CACD,W,EAAeA,EAAM,UAAU,CACjC,EAAG,CACD,GAAI,SAAY0C,EAAQ/9G,EAAQi+G,EAAQ,CACtC,O,EAAW5C,EAAM,YAAY4C,EAAO,SAAS,EAAEF,CAAM,CACvD,CACF,EAAG4B,EAAe,CACpB,EAAG,SAAU5B,EAAQ,CACnB,IAAIkC,G,EAAY5E,EAAM,WAAW,CAAC,EAAE0C,CAAM,EAC1C,OAAOkC,EAAM,KAAO,IAAQA,EAAM,KAAO,GAC3C,CAAC,EAEGI,G,EAAoBp/F,EAAE,aAAa,CACrC,QAAS,CAAC,CACR,O,EAAWo6F,EAAM,WAAW,CAAC,CAC/B,EAAGsE,EAAe,CACpB,EAAG,SAAU5B,EAAQ,CACnB,IAAIkC,G,EAAY5E,EAAM,WAAW,CAAC,EAAE0C,CAAM,EAC1C,OAAOkC,EAAM,KAAO,IAAQA,EAAM,KAAO,GAC3C,CAAC,EACGjC,GAAS,CAAC,CACZ,OAAQ,CAAC,CACP,W,EAAe3C,EAAM,YAAY,CAAC,CACpC,EAAG,CACD,S,EAAaA,EAAM,YAAY,CAAC,CAClC,CAAC,CACH,EAAG,CACD,IAAK,CAAC,CACJ,O,EAAWA,EAAM,cAAc,EAAI,CACrC,EAAG,CACD,Q,EAAYA,EAAM,cAAc,EAAI,CACtC,EAAG,CACD,K,EAASA,EAAM,UAAU,CACvB,OAAQ,CACN,MAAO,CACT,EACA,WAAY,CACV,MAAO,EACP,OAAQ,CACV,EACA,KAAM,CACJ,MAAO,CACT,EACA,KAAM,CACJ,MAAO,EACP,OAAQ,CACV,CACF,CAAC,CACH,EAAG,CACD,sB,EAA0BA,EAAM,UAAU,CAC5C,EAAG,CACD,kB,EAAsBA,EAAM,UAAU,CACxC,CAAC,CACH,G,EAAOp6F,EAAE,aAAa,CACpB,K,EAASo6F,EAAM,WAAW,EAAG,SAAU0C,EAAQ/9G,EAAQ,CACrD,OAAO,KAAK,IAAI,EAAGA,EAAO,IAAI,IAAI,KAAO,CAAC,CAC5C,CAAC,CACH,EAAG,SAAU+9G,EAAQ/9G,EAAQ,CAC3B,OAAOA,EAAO,IAAI,IAAI,MACxB,CAAC,EACD,CACE,Q,EAAYihB,EAAE,MAAM,CAAC++F,GAAWI,GAAmBC,EAAeH,EAAaC,CAAU,EAAG,SAAUpC,EAAQ,CAC5G,IAAIuC,G,EAAejF,EAAM,UAAU,EAAE0C,CAAM,EAK3C,OAAOuC,IAAa,IAAQA,IAAa,EAC3C,CAAC,CACH,CAAC,EACGC,GAAWvC,GACfrD,EAAQ,QAAa4F,E,YC1NrBC,GAAO,QAAU5sG,EAKjB,IAAI6sG,EAAO,KAEX,GAAI,CACFA,EAAO,IAAI,YAAY,SAAS,IAAI,YAAY,OAAO,IAAI,WAAW,CACpE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAA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","sources":["../node_modules/@tensorflow/tfjs-core/dist/backends/backend.js","../node_modules/@tensorflow/tfjs-core/dist/util_base.js","../node_modules/@tensorflow/tfjs-core/dist/environment.js","../node_modules/@tensorflow/tfjs-core/dist/global_util.js","../node_modules/@tensorflow/tfjs-core/dist/kernel_names.js","../node_modules/@tensorflow/tfjs-core/dist/log.js","../node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js","../node_modules/@tensorflow/tfjs-core/dist/hash_util.js","../node_modules/@tensorflow/tfjs-core/dist/util.js","../node_modules/@tensorflow/tfjs-core/dist/profiler.js","../node_modules/@tensorflow/tfjs-core/dist/tape.js","../node_modules/@tensorflow/tfjs-core/dist/tensor_format.js","../node_modules/@tensorflow/tfjs-core/dist/tensor.js","../node_modules/@tensorflow/tfjs-core/dist/types.js","../node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","../node_modules/@tensorflow/tfjs-core/dist/engine.js","../node_modules/@tensorflow/tfjs-core/dist/device_util.js","../node_modules/@tensorflow/tfjs-core/dist/flags.js","../node_modules/@tensorflow/tfjs-core/dist/io/types.js","../node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js","../node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js","../node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js","../node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js","../node_modules/@tensorflow/tfjs-core/dist/io/model_management.js","../node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js","../node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js","../node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js","../node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","../node_modules/@tensorflow/tfjs-core/dist/ops/operation.js","../node_modules/@tensorflow/tfjs-core/dist/ops/cast.js","../node_modules/@tensorflow/tfjs-core/dist/ops/clone.js","../node_modules/@tensorflow/tfjs-core/dist/ops/print.js","../node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js","../node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","../node_modules/@tensorflow/tfjs-core/dist/io/progress.js","../node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js","../node_modules/@tensorflow/tfjs-core/dist/io/http.js","../node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js","../node_modules/@tensorflow/tfjs-core/dist/io/io.js","../node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js","../node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js","../node_modules/@tensorflow/tfjs-core/dist/ops/complex.js","../node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js","../node_modules/@tensorflow/tfjs-core/dist/ops/concat.js","../node_modules/@tensorflow/tfjs-core/dist/ops/imag.js","../node_modules/@tensorflow/tfjs-core/dist/ops/real.js","../node_modules/@tensorflow/tfjs-core/dist/ops/slice.js","../node_modules/@tensorflow/tfjs-core/dist/ops/split.js","../node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/mul.js","../node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js","../node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js","../node_modules/@tensorflow/tfjs-core/dist/ops/fill.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js","../node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tile.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/grayscale_to_rgb.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js","../node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js","../node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js","../node_modules/@tensorflow/tfjs-core/dist/ops/bincount.js","../node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js","../node_modules/@tensorflow/tfjs-core/dist/ops/greater.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sum.js","../node_modules/@tensorflow/tfjs-core/dist/ops/add.js","../node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js","../node_modules/@tensorflow/tfjs-core/dist/ops/div.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sub.js","../node_modules/@tensorflow/tfjs-core/dist/ops/round.js","../node_modules/@tensorflow/tfjs-core/dist/ops/where.js","../node_modules/@tensorflow/tfjs-core/dist/ops/range.js","../node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/threshold.js","../node_modules/@tensorflow/tfjs-core/dist/ops/image/transform.js","../node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js","../node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js","../node_modules/@tensorflow/tfjs-core/dist/ops/stack.js","../node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js","../node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js","../node_modules/@tensorflow/tfjs-core/dist/ops/abs.js","../node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/max.js","../node_modules/@tensorflow/tfjs-core/dist/ops/min.js","../node_modules/@tensorflow/tfjs-core/dist/ops/pow.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js","../node_modules/@tensorflow/tfjs-core/dist/ops/square.js","../node_modules/@tensorflow/tfjs-core/dist/ops/norm.js","../node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js","../node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js","../node_modules/@tensorflow/tfjs-core/dist/globals.js","../node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js","../node_modules/@tensorflow/tfjs-core/dist/ops/eye.js","../node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js","../node_modules/@tensorflow/tfjs-core/dist/ops/neg.js","../node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js","../node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js","../node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js","../node_modules/@tensorflow/tfjs-core/dist/ops/mean.js","../node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js","../node_modules/@tensorflow/tfjs-core/dist/ops/ones.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js","../node_modules/@tensorflow/tfjs-core/dist/ops/relu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/log.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js","../node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js","../node_modules/@tensorflow/tfjs-core/dist/ops/exp.js","../node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js","../node_modules/@tensorflow/tfjs-core/dist/gradients.js","../node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js","../node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_fill_empty_rows.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_reshape.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_mean.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_sum.js","../node_modules/@tensorflow/tfjs-core/dist/ops/string/string_n_grams.js","../node_modules/@tensorflow/tfjs-core/dist/ops/string/string_split.js","../node_modules/@tensorflow/tfjs-core/dist/ops/string/string_to_hash_bucket_fast.js","../node_modules/@tensorflow/tfjs-core/dist/ops/ops.js","../node_modules/@tensorflow/tfjs-core/dist/browser_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/elu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js","../node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js","../node_modules/@tensorflow/tfjs-core/dist/ops/step.js","../node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/ragged_to_dense_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/einsum_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_fill_empty_rows_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_reshape_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/sparse/sparse_segment_reduction_util.js","../node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js","../node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js","../node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js","../node_modules/@tensorflow/tfjs-core/dist/base.js","../node_modules/@tensorflow/tfjs-core/dist/index.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedGather_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedTensorToTensor_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Scatter_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sigmoid.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BroadcastArgs.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/cum_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cum_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumprod.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Einsum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedGather.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedTensorToTensor.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/search_sorted_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SearchSorted.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseFillEmptyRows.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseReshape.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentMean.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentSum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringNGrams.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringSplit.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringToHashBucketFast.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/top_k_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/transform_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transform.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js","../node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js","../node_modules/@100mslive/hms-virtual-background/dist/index.js","../node_modules/gifuct-js/lib/deinterlace.js","../node_modules/gifuct-js/lib/index.js","../node_modules/gifuct-js/lib/lzw.js","../node_modules/js-binary-schema-parser/lib/index.js","../node_modules/js-binary-schema-parser/lib/parsers/uint8.js","../node_modules/js-binary-schema-parser/lib/schemas/gif.js","../node_modules/long/src/long.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage {\n    constructor(backend, dataMover) {\n        this.backend = backend;\n        this.dataMover = dataMover;\n        this.data = new WeakMap();\n        this.dataIdsCount = 0;\n    }\n    get(dataId) {\n        if (!this.data.has(dataId)) {\n            this.dataMover.moveData(this.backend, dataId);\n        }\n        return this.data.get(dataId);\n    }\n    set(dataId, value) {\n        this.dataIdsCount++;\n        this.data.set(dataId, value);\n    }\n    has(dataId) {\n        return this.data.has(dataId);\n    }\n    delete(dataId) {\n        this.dataIdsCount--;\n        return this.data.delete(dataId);\n    }\n    numDataIds() {\n        return this.dataIdsCount;\n    }\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend {\n    refCount(dataId) {\n        return notYetImplemented('refCount');\n    }\n    incRef(dataId) {\n        return notYetImplemented('incRef');\n    }\n    timerAvailable() {\n        return true;\n    }\n    time(f) {\n        return notYetImplemented('time');\n    }\n    read(dataId) {\n        return notYetImplemented('read');\n    }\n    readSync(dataId) {\n        return notYetImplemented('readSync');\n    }\n    readToGPU(dataId, options) {\n        return notYetImplemented('readToGPU');\n    }\n    numDataIds() {\n        return notYetImplemented('numDataIds');\n    }\n    disposeData(dataId, force) {\n        return notYetImplemented('disposeData');\n    }\n    write(values, shape, dtype) {\n        return notYetImplemented('write');\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        return notYetImplemented('move');\n    }\n    memory() {\n        return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n    floatPrecision() {\n        return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    dispose() {\n        return notYetImplemented('dispose');\n    }\n}\nfunction notYetImplemented(kernelName) {\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\n        `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        swap(array, counter, index);\n    }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n// tslint:disable-next-line:no-any\narray, \n// tslint:disable-next-line:no-any\narray2) {\n    if (array.length !== array2.length) {\n        throw new Error(`Array sizes must match to be shuffled together ` +\n            `First array length was ${array.length}` +\n            `Second array length was ${array2.length}`);\n    }\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element of each array with it\n        swap(array, counter, index);\n        swap(array2, counter, index);\n    }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n    return val % 2 === 0 ? val : val + 1;\n}\nexport function swap(object, left, right) {\n    const temp = object[left];\n    object[left] = object[right];\n    object[right] = temp;\n}\nexport function sum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n    const r = Math.random();\n    return (b * r) + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        const diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n    if (!expr) {\n        throw new Error(typeof msg === 'string' ? msg : msg());\n    }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n    if (result == null) {\n        result = [];\n    }\n    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n        for (let i = 0; i < arr.length; ++i) {\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    else {\n        result.push(arr);\n    }\n    return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n    if (shape.length === 0) {\n        // Scalar.\n        return 1;\n    }\n    let size = shape[0];\n    for (let i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexport function isScalarShape(shape) {\n    return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isInt(a) {\n    return a % 1 === 0;\n}\nexport function tanh(x) {\n    // tslint:disable-next-line:no-any\n    if (Math.tanh != null) {\n        // tslint:disable-next-line:no-any\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        const e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexport function sizeToSquarishShape(size) {\n    const width = Math.ceil(Math.sqrt(size));\n    return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n    const shuffledIndices = new Uint32Array(n);\n    for (let i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexport function rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter, scheduleFn = setTimeout) {\n    return new Promise((resolve, reject) => {\n        let tryCount = 0;\n        const tryFn = () => {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            const nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            scheduleFn(tryFn, nextBackoff);\n        };\n        tryFn();\n    });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n    let shapeProd = 1;\n    let implicitIdx = -1;\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] >= 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(`Shapes can only have 1 implicit size. ` +\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] < 0) {\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\n        }\n        return shape;\n    }\n    if (shapeProd === 0) {\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\n            `there are 0 elements`);\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(`The implicit shape can't be a fractional number. ` +\n            `Got ${size} / ${shapeProd}`);\n    }\n    const newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n    const rank = shape.length;\n    // Normalize input\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n    // Check for valid range\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n        `got axis ${axis}`);\n    // Check for only integers\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\n        `got axis ${axis}`);\n    // Handle negative axis.\n    return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n    const newShape = [];\n    const keptDims = [];\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n    const axes = (axis == null || isEmptyArray) ?\n        null :\n        parseAxisParam(axis, shape).sort();\n    let j = 0;\n    for (let i = 0; i < shape.length; ++i) {\n        if (axes != null) {\n            if (axes[j] === i && shape[i] !== 1) {\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n            }\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axes[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape, keptDims };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function getArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else if (dtype === 'string') {\n        values = new Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n        }\n    }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n        dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n    if (newType === 'complex64') {\n        return false;\n    }\n    if (newType === 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexport function isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n        a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\nexport function bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'complex64') {\n        return 8;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\nexport function bytesFromStringArray(arr) {\n    if (arr == null) {\n        return 0;\n    }\n    let bytes = 0;\n    arr.forEach(x => bytes += x.length);\n    return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function inferDtype(values) {\n    if (Array.isArray(values)) {\n        return inferDtype(values[0]);\n    }\n    if (values instanceof Float32Array) {\n        return 'float32';\n    }\n    else if (values instanceof Int32Array || values instanceof Uint8Array ||\n        values instanceof Uint8ClampedArray) {\n        return 'int32';\n    }\n    else if (isNumber(values)) {\n        return 'float32';\n    }\n    else if (isString(values)) {\n        return 'string';\n    }\n    else if (isBoolean(values)) {\n        return 'bool';\n    }\n    return 'float32';\n}\nexport function isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n    for (let i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\nexport function computeStrides(shape) {\n    const rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n    // strides.\n    const strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\nfunction createNestedArray(offset, shape, a, isComplex = false) {\n    const ret = new Array();\n    if (shape.length === 1) {\n        const d = shape[0] * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = a[offset + i];\n        }\n    }\n    else {\n        const d = shape[0];\n        const rest = shape.slice(1);\n        const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n        }\n    }\n    return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a, isComplex = false) {\n    if (shape.length === 0) {\n        // Scalar type should return a single number.\n        return a[0];\n    }\n    const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    if (size === 0) {\n        // A tensor with shape zero should be turned into empty list.\n        return [];\n    }\n    if (size !== a.length) {\n        throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);\n    }\n    return createNestedArray(0, shape, a, isComplex);\n}\nexport function makeOnesTypedArray(size, dtype) {\n    const array = makeZerosTypedArray(size, dtype);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\n    if (dtype == null || dtype === 'float32') {\n        return toNestedArray(shape, new Float32Array(size));\n    }\n    else if (dtype === 'int32') {\n        return toNestedArray(shape, new Int32Array(size));\n    }\n    else if (dtype === 'bool') {\n        return toNestedArray(shape, new Uint8Array(size));\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n    shape.forEach(dimSize => {\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n    });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n    if (rank === 0) {\n        return 0;\n    }\n    else if (rank === 1) {\n        return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n        index += strides[i] * locs[i];\n    }\n    return index;\n}\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n    if (rank === 0) {\n        return [];\n    }\n    else if (rank === 1) {\n        return [index];\n    }\n    const locs = new Array(rank);\n    for (let i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / strides[i]);\n        index -= locs[i] * strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object) {\n    //  We chose to not use 'obj instanceOf Promise' for two reasons:\n    //  1. It only reliably works for es6 Promise, not other Promise\n    //  implementations.\n    //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n    //  patch the async calls, so it is possible the obj (patched) is\n    //  comparing to a pre-patched Promise.\n    return object && object.then && typeof object.then === 'function';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n    // tslint:disable-next-line: no-any\n    constructor(global) {\n        this.global = global;\n        this.flags = {};\n        this.flagRegistry = {};\n        this.urlFlags = {};\n        // Jasmine spies on this in 'environment_test.ts'\n        this.getQueryParams = getQueryParams;\n        this.populateURLFlags();\n    }\n    setPlatform(platformName, platform) {\n        if (this.platform != null) {\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Platform ${this.platformName} has already been set. ` +\n                    `Overwriting the platform with ${platformName}.`);\n            }\n        }\n        this.platformName = platformName;\n        this.platform = platform;\n    }\n    registerFlag(flagName, evaluationFn, setHook) {\n        this.flagRegistry[flagName] = { evaluationFn, setHook };\n        // Override the flag value from the URL. This has to happen here because\n        // the environment is initialized before flags get registered.\n        if (this.urlFlags[flagName] != null) {\n            const flagValue = this.urlFlags[flagName];\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n            }\n            this.set(flagName, flagValue);\n        }\n    }\n    async getAsync(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        this.flags[flagName] = await this.evaluateFlag(flagName);\n        return this.flags[flagName];\n    }\n    get(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        const flagValue = this.evaluateFlag(flagName);\n        if (isPromise(flagValue)) {\n            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +\n                `Please use getAsync() instead.`);\n        }\n        this.flags[flagName] = flagValue;\n        return this.flags[flagName];\n    }\n    getNumber(flagName) {\n        return this.get(flagName);\n    }\n    getBool(flagName) {\n        return this.get(flagName);\n    }\n    getFlags() {\n        return this.flags;\n    }\n    // For backwards compatibility.\n    get features() {\n        return this.flags;\n    }\n    set(flagName, value) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n        }\n        this.flags[flagName] = value;\n        if (this.flagRegistry[flagName].setHook != null) {\n            this.flagRegistry[flagName].setHook(value);\n        }\n    }\n    evaluateFlag(flagName) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n        }\n        return this.flagRegistry[flagName].evaluationFn();\n    }\n    setFlags(flags) {\n        this.flags = Object.assign({}, flags);\n    }\n    reset() {\n        this.flags = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    populateURLFlags() {\n        if (typeof this.global === 'undefined' ||\n            typeof this.global.location === 'undefined' ||\n            typeof this.global.location.search === 'undefined') {\n            return;\n        }\n        const urlParams = this.getQueryParams(this.global.location.search);\n        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n            keyValues.forEach(keyValue => {\n                const [key, value] = keyValue.split(':');\n                this.urlFlags[key] = parseValue(key, value);\n            });\n        }\n    }\n}\nexport function getQueryParams(queryString) {\n    const params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n    value = value.toLowerCase();\n    if (value === 'true' || value === 'false') {\n        return value === 'true';\n    }\n    else if (`${+value}` === value) {\n        return +value;\n    }\n    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n    return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n    ENV = environment;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace;\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace() {\n    if (globalNameSpace == null) {\n        // tslint:disable-next-line:no-any\n        let ns;\n        if (typeof (window) !== 'undefined') {\n            ns = window;\n        }\n        else if (typeof (global) !== 'undefined') {\n            ns = global;\n        }\n        else if (typeof (process) !== 'undefined') {\n            ns = process;\n        }\n        else if (typeof (self) !== 'undefined') {\n            ns = self;\n        }\n        else {\n            throw new Error('Could not find a global object');\n        }\n        globalNameSpace = ns;\n    }\n    return globalNameSpace;\n}\n// tslint:disable-next-line:no-any\nfunction getGlobalMap() {\n    const ns = getGlobalNamespace();\n    if (ns._tfGlobals == null) {\n        ns._tfGlobals = new Map();\n    }\n    return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal(key, init) {\n    const globalMap = getGlobalMap();\n    if (globalMap.has(key)) {\n        return globalMap.get(key);\n    }\n    else {\n        const singleton = init();\n        globalMap.set(key, singleton);\n        return globalMap.get(key);\n    }\n}\n","export const Abs = 'Abs';\nexport const Acos = 'Acos';\nexport const Acosh = 'Acosh';\nexport const Add = 'Add';\nexport const AddN = 'AddN';\nexport const All = 'All';\nexport const Any = 'Any';\nexport const ArgMax = 'ArgMax';\nexport const ArgMin = 'ArgMin';\nexport const Asin = 'Asin';\nexport const Asinh = 'Asinh';\nexport const Atan = 'Atan';\nexport const Atanh = 'Atanh';\nexport const Atan2 = 'Atan2';\nexport const AvgPool = 'AvgPool';\nexport const AvgPoolGrad = 'AvgPoolGrad';\nexport const AvgPool3D = 'AvgPool3D';\nexport const AvgPool3DGrad = 'AvgPool3DGrad';\nexport const BatchMatMul = 'BatchMatMul';\nexport const BatchToSpaceND = 'BatchToSpaceND';\nexport const Bincount = 'Bincount';\nexport const BroadcastTo = 'BroadcastTo';\nexport const BroadcastArgs = 'BroadcastArgs';\nexport const Cast = 'Cast';\nexport const Ceil = 'Ceil';\nexport const ClipByValue = 'ClipByValue';\nexport const Complex = 'Complex';\nexport const ComplexAbs = 'ComplexAbs';\nexport const Concat = 'Concat';\nexport const Conv2D = 'Conv2D';\nexport const Conv2DBackpropFilter = 'Conv2DBackpropFilter';\nexport const Conv2DBackpropInput = 'Conv2DBackpropInput';\nexport const Conv3D = 'Conv3D';\nexport const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';\nexport const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';\nexport const Cos = 'Cos';\nexport const Cosh = 'Cosh';\nexport const Cumprod = 'Cumprod';\nexport const Cumsum = 'Cumsum';\nexport const CropAndResize = 'CropAndResize';\nexport const DenseBincount = 'DenseBincount';\nexport const DepthToSpace = 'DepthToSpace';\nexport const DepthwiseConv2dNative = 'DepthwiseConv2dNative';\nexport const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';\nexport const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';\nexport const Diag = 'Diag';\nexport const Dilation2D = 'Dilation2D';\nexport const Dilation2DBackpropInput = 'Dilation2DBackpropInput';\nexport const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';\nexport const RealDiv = 'RealDiv';\nexport const Einsum = 'Einsum';\nexport const Elu = 'Elu';\nexport const EluGrad = 'EluGrad';\nexport const Erf = 'Erf';\nexport const Equal = 'Equal';\nexport const Exp = 'Exp';\nexport const ExpandDims = 'ExpandDims';\nexport const Expm1 = 'Expm1';\nexport const FFT = 'FFT';\nexport const Fill = 'Fill';\nexport const FlipLeftRight = 'FlipLeftRight';\nexport const Floor = 'Floor';\nexport const FloorDiv = 'FloorDiv';\nexport const FusedBatchNorm = 'FusedBatchNorm';\nexport const GatherV2 = 'GatherV2';\nexport const GatherNd = 'GatherNd';\nexport const Greater = 'Greater';\nexport const GreaterEqual = 'GreaterEqual';\nexport const Identity = 'Identity';\nexport const IFFT = 'IFFT';\nexport const Imag = 'Imag';\nexport const IsFinite = 'IsFinite';\nexport const IsInf = 'IsInf';\nexport const IsNan = 'IsNan';\nexport const LeakyRelu = 'LeakyRelu';\nexport const Less = 'Less';\nexport const LessEqual = 'LessEqual';\nexport const LinSpace = 'LinSpace';\nexport const Log = 'Log';\nexport const Log1p = 'Log1p';\nexport const LogicalAnd = 'LogicalAnd';\nexport const LogicalNot = 'LogicalNot';\nexport const LogicalOr = 'LogicalOr';\nexport const LogicalXor = 'LogicalXor';\nexport const LogSoftmax = 'LogSoftmax';\nexport const LowerBound = 'LowerBound';\nexport const LRN = 'LRN';\nexport const LRNGrad = 'LRNGrad';\nexport const Max = 'Max';\nexport const Maximum = 'Maximum';\nexport const MaxPool = 'MaxPool';\nexport const MaxPoolGrad = 'MaxPoolGrad';\nexport const MaxPool3D = 'MaxPool3D';\nexport const MaxPool3DGrad = 'MaxPool3DGrad';\nexport const MaxPoolWithArgmax = 'MaxPoolWithArgmax';\nexport const Mean = 'Mean';\nexport const Min = 'Min';\nexport const Minimum = 'Minimum';\nexport const MirrorPad = 'MirrorPad';\nexport const Mod = 'Mod';\nexport const Multinomial = 'Multinomial';\nexport const Multiply = 'Multiply';\nexport const Neg = 'Neg';\nexport const NotEqual = 'NotEqual';\nexport const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';\nexport const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';\nexport const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';\nexport const OnesLike = 'OnesLike';\nexport const OneHot = 'OneHot';\nexport const Pack = 'Pack';\nexport const PadV2 = 'PadV2';\nexport const Pool = 'Pool';\nexport const Pow = 'Pow';\nexport const Prelu = 'Prelu';\nexport const Prod = 'Prod';\nexport const RaggedGather = 'RaggedGather';\nexport const RaggedTensorToTensor = 'RaggedTensorToTensor';\nexport const Range = 'Range';\nexport const Real = 'Real';\nexport const Reciprocal = 'Reciprocal';\nexport const Relu = 'Relu';\nexport const Reshape = 'Reshape';\nexport const ResizeNearestNeighbor = 'ResizeNearestNeighbor';\nexport const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';\nexport const ResizeBilinear = 'ResizeBilinear';\nexport const ResizeBilinearGrad = 'ResizeBilinearGrad';\nexport const Relu6 = 'Relu6';\nexport const Reverse = 'Reverse';\nexport const Round = 'Round';\nexport const Rsqrt = 'Rsqrt';\nexport const ScatterNd = 'ScatterNd';\nexport const SearchSorted = 'SearchSorted';\nexport const Select = 'Select';\nexport const Selu = 'Selu';\nexport const Slice = 'Slice';\nexport const Sin = 'Sin';\nexport const Sinh = 'Sinh';\nexport const Sign = 'Sign';\nexport const Sigmoid = 'Sigmoid';\nexport const Softplus = 'Softplus';\nexport const Sqrt = 'Sqrt';\nexport const Sum = 'Sum';\nexport const SpaceToBatchND = 'SpaceToBatchND';\nexport const SplitV = 'SplitV';\nexport const Softmax = 'Softmax';\nexport const SparseFillEmptyRows = 'SparseFillEmptyRows';\nexport const SparseReshape = 'SparseReshape';\nexport const SparseSegmentMean = 'SparseSegmentMean';\nexport const SparseSegmentSum = 'SparseSegmentSum';\nexport const SparseToDense = 'SparseToDense';\nexport const SquaredDifference = 'SquaredDifference';\nexport const Square = 'Square';\nexport const StridedSlice = 'StridedSlice';\nexport const StringNGrams = 'StringNGrams';\nexport const StringSplit = 'StringSplit';\nexport const StringToHashBucketFast = 'StringToHashBucketFast';\nexport const Sub = 'Sub';\nexport const Tan = 'Tan';\nexport const Tanh = 'Tanh';\nexport const Tile = 'Tile';\nexport const TopK = 'TopK';\nexport const Transform = 'Transform';\nexport const Transpose = 'Transpose';\nexport const Unique = 'Unique';\nexport const Unpack = 'Unpack';\nexport const UnsortedSegmentSum = 'UnsortedSegmentSum';\nexport const UpperBound = 'UpperBound';\nexport const ZerosLike = 'ZerosLike';\n/**\n * TensorFlow.js-only kernels\n */\nexport const Step = 'Step';\nexport const FromPixels = 'FromPixels';\nexport const RotateWithOffset = 'RotateWithOffset';\nexport const _FusedMatMul = '_FusedMatMul';\nexport const FusedConv2D = 'FusedConv2D';\nexport const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nexport function warn(...msg) {\n    if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(...msg);\n    }\n}\nexport function log(...msg) {\n    if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.log(...msg);\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nimport * as log from './log';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n    return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n    const it = kernelRegistry.entries();\n    const result = [];\n    while (true) {\n        const { done, value } = it.next();\n        if (done) {\n            break;\n        }\n        const [key, config] = value;\n        const [backend,] = key.split('_');\n        if (backend === backendName) {\n            result.push(config);\n        }\n    }\n    return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n    const { kernelName, backendName } = config;\n    const key = makeKey(kernelName, backendName);\n    if (kernelRegistry.has(key)) {\n        log.warn(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is already registered`);\n    }\n    kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n    const { kernelName } = config;\n    if (gradRegistry.has(kernelName)) {\n        // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n        // to debug mode.\n        if (env().getBool('DEBUG')) {\n            log.warn(`Overriding the gradient for '${kernelName}'`);\n        }\n    }\n    gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n    const key = makeKey(kernelName, backendName);\n    if (!kernelRegistry.has(key)) {\n        throw new Error(`The kernel '${kernelName}' for backend ` +\n            `'${backendName}' is not registered`);\n    }\n    kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n    if (!gradRegistry.has(kernelName)) {\n        throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n    }\n    gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n    const kernels = getKernelsForBackend(registeredBackendName);\n    kernels.forEach(kernelConfig => {\n        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });\n        registerKernel(newKernelConfig);\n    });\n}\nfunction makeKey(kernelName, backendName) {\n    return `${backendName}_${kernelName}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long = \n// tslint:disable-next-line\nLongExports.default || LongExports;\nexport function hexToLong(hex) {\n    return Long.fromString(hex, true, 16);\n}\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0 = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1 = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2 = hexToLong('9ae16a3b2f90404f');\nfunction shiftMix(val) {\n    return val.xor(val.shru(47));\n}\nfunction fetch(s, offset, numBytes) {\n    const bytes = s.slice(offset, offset + numBytes);\n    return Long.fromBytes(Array.from(bytes), true, true);\n}\nfunction fetch64(s, offset) {\n    return fetch(s, offset, 8);\n}\nfunction fetch32(s, offset) {\n    return fetch(s, offset, 4);\n}\nfunction rotate64(val, shift) {\n    // Avoid shifting by 64: doing so yields an undefined result.\n    return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\nfunction hashLen16(u, v, mul = hexToLong('9ddfea08eb382d69')) {\n    // Murmur-inspired hashing.\n    let a = u.xor(v).mul(mul);\n    a = a.xor(a.shru(47));\n    let b = v.xor(a).mul(mul);\n    b = b.xor(b.shru(47));\n    b = b.mul(mul);\n    return b;\n}\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(w, x, y, z, a, b) {\n    a = a.add(w);\n    b = rotate64(b.add(a).add(z), 21);\n    const c = a;\n    a = a.add(x);\n    a = a.add(y);\n    b = b.add(rotate64(a, 44));\n    return [a.add(z), b.add(c)];\n}\nfunction weakHashLen32WithSeedsStr(s, offset, a, b) {\n    return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);\n}\nfunction hashLen0to16(s, len = s.length) {\n    if (len >= 8) {\n        const mul = k2.add(len * 2);\n        const a = fetch64(s, 0).add(k2);\n        const b = fetch64(s, len - 8);\n        const c = rotate64(b, 37).mul(mul).add(a);\n        const d = rotate64(a, 25).add(b).mul(mul);\n        return hashLen16(c, d, mul);\n    }\n    if (len >= 4) {\n        const mul = k2.add(len * 2);\n        const a = fetch32(s, 0);\n        return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n    }\n    if (len > 0) {\n        const a = s[0];\n        const b = s[len >> 1];\n        const c = s[len - 1];\n        const y = a + (b << 8);\n        const z = len + (c << 2);\n        return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n    }\n    return k2;\n}\nfunction hashLen17to32(s, len = s.length) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).mul(k1);\n    const b = fetch64(s, 8);\n    const c = fetch64(s, len - 8).mul(mul);\n    const d = fetch64(s, len - 16).mul(k2);\n    return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\nfunction hashLen33to64(s, len = s.length) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).mul(k2);\n    const b = fetch64(s, 8);\n    const c = fetch64(s, len - 8).mul(mul);\n    const d = fetch64(s, len - 16).mul(k2);\n    const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n    const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n    const e = fetch64(s, 16).mul(mul);\n    const f = fetch64(s, 24);\n    const g = y.add(fetch64(s, len - 32)).mul(mul);\n    const h = z.add(fetch64(s, len - 24)).mul(mul);\n    return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\nexport function fingerPrint64(s, len = s.length) {\n    const seed = Long.fromNumber(81, true);\n    if (len <= 32) {\n        if (len <= 16) {\n            return hashLen0to16(s, len);\n        }\n        else {\n            return hashLen17to32(s, len);\n        }\n    }\n    else if (len <= 64) {\n        return hashLen33to64(s, len);\n    }\n    // For strings over 64 bytes we loop.  Internal state consists of\n    // 56 bytes: v, w, x, y, and z.\n    let x = seed;\n    let y = seed.mul(k1).add(113);\n    let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n    let v = [Long.UZERO, Long.UZERO];\n    let w = [Long.UZERO, Long.UZERO];\n    x = x.mul(k2).add(fetch64(s, 0));\n    let offset = 0;\n    // Set end so that after the loop we have 1 to 64 bytes left to process.\n    const end = ((len - 1) >> 6) * 64;\n    const last64 = end + ((len - 1) & 63) - 63;\n    do {\n        x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n        y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n        x = x.xor(w[1]);\n        y = y.add(v[0]).add(fetch64(s, offset + 40));\n        z = rotate64(z.add(w[0]), 33).mul(k1);\n        v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n        w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n        [z, x] = [x, z];\n        offset += 64;\n    } while (offset !== end);\n    const mul = k1.add(z.and(0xff).shl(1));\n    // Point to the last 64 bytes of input.\n    offset = last64;\n    w[0] = w[0].add((len - 1) & 63);\n    v[0] = v[0].add(w[0]);\n    w[0] = w[0].add(v[0]);\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n    x = x.xor(w[1].mul(9));\n    y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n    z = rotate64(z.add(w[0]), 33).mul(mul);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n    [z, x] = [x, z];\n    return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(value, dtype) {\n    if (dtype === 'string') {\n        return encodeString(value);\n    }\n    return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\nexport function toTypedArray(a, dtype) {\n    if (dtype === 'string') {\n        throw new Error('Cannot convert a string[] to a TypedArray');\n    }\n    if (Array.isArray(a)) {\n        a = base.flatten(a);\n    }\n    if (env().getBool('DEBUG')) {\n        base.checkConversionForErrors(a, dtype);\n    }\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(a);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(a);\n    }\n    else if (dtype === 'bool') {\n        const bool = new Uint8Array(a.length);\n        for (let i = 0; i < bool.length; ++i) {\n            if (Math.round(a[i]) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now() {\n    return env().platform.now();\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(path, requestInits) {\n    return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.decode(bytes, encoding);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n    constructor(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    profileKernel(kernelName, inputs, f) {\n        let outputs;\n        const holdResultWrapperFn = () => {\n            outputs = f();\n        };\n        let timer;\n        const start = util.now();\n        if (this.backendTimer.timerAvailable()) {\n            timer = this.backendTimer.time(holdResultWrapperFn);\n        }\n        else {\n            holdResultWrapperFn();\n            for (const output of outputs) {\n                output.dataSync();\n            }\n            timer = Promise.resolve({ kernelMs: util.now() - start });\n        }\n        if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                // Dangling promise here because we don't want to propagate up\n                // asynchronicity.\n                output.data().then(tensorVals => {\n                    checkComputationForErrors(tensorVals, output.dtype, kernelName);\n                });\n            }\n        }\n        const kernelProfile = {\n            kernelName,\n            outputs,\n            inputs,\n            timeMs: timer.then(timing => timing.kernelMs),\n            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?\n                timing.getExtraProfileInfo() :\n                '')\n        };\n        return kernelProfile;\n    }\n    logKernelProfile(kernelProfile) {\n        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\n        outputs.forEach(result => {\n            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n            });\n        });\n    }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n    if (dtype !== 'float32') {\n        // Only floating point computations will generate NaN values\n        return false;\n    }\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            // Throwing custom exception so behavior is testable.\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\n            return true;\n        }\n    }\n    return false;\n}\nexport class Logger {\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n            timeMs['error'];\n        const paddedName = util.rightPad(name, 25);\n        const rank = result.rank;\n        const size = result.size;\n        const shape = util.rightPad(result.shape.toString(), 14);\n        let inputShapesDescription = '';\n        for (const name in inputs) {\n            const input = inputs[name];\n            if (input != null) {\n                // The input might be a non-tensor (e.g HTMLImageElement), in which case\n                // we claim the output shape as input shape.\n                const inputShape = input.shape || result.shape;\n                const inputRank = inputShape.length;\n                inputShapesDescription +=\n                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n            }\n        }\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(tape, xs, y) {\n    // Forward pass to compute all the nodes and Tensors that are transitively a\n    // function of x.\n    const tensorsFromX = {};\n    const nodesFromX = {};\n    for (let i = 0; i < xs.length; i++) {\n        tensorsFromX[xs[i].id] = true;\n    }\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        for (const inputName in nodeInputs) {\n            const input = nodeInputs[inputName];\n            let anyInputFromX = false;\n            for (let j = 0; j < xs.length; j++) {\n                if (tensorsFromX[input.id]) {\n                    node.outputs.forEach(output => tensorsFromX[output.id] = true);\n                    anyInputFromX = true;\n                    nodesFromX[node.id] = true;\n                    break;\n                }\n            }\n            if (anyInputFromX) {\n                break;\n            }\n        }\n    }\n    // Backward pass to find all of the nodes and Tensors that lead to y.\n    const tensorsLeadToY = {};\n    tensorsLeadToY[y.id] = true;\n    const nodesToY = {};\n    for (let i = tape.length - 1; i >= 0; i--) {\n        const node = tape[i];\n        const nodeInputs = node.inputs;\n        // If any of the outputs lead to y, mark all of the inputs as leading to y.\n        for (let j = 0; j < node.outputs.length; j++) {\n            if (tensorsLeadToY[node.outputs[j].id]) {\n                for (const inputName in nodeInputs) {\n                    tensorsLeadToY[nodeInputs[inputName].id] = true;\n                    nodesToY[node.id] = true;\n                }\n                break;\n            }\n        }\n    }\n    // Return the paths that come from x and lead to y.\n    const filteredTape = [];\n    for (let i = 0; i < tape.length; i++) {\n        const node = tape[i];\n        if (nodesFromX[node.id] && nodesToY[node.id]) {\n            // Prune the inputs from the node that aren't a function of x.\n            const prunedInputs = {};\n            for (const inputName in node.inputs) {\n                const nodeInput = node.inputs[inputName];\n                if (tensorsFromX[nodeInput.id]) {\n                    prunedInputs[inputName] = nodeInput;\n                }\n            }\n            // Copy the node and overwrite inputsAndArgs to the pruned version.\n            const prunedNode = Object.assign({}, node);\n            prunedNode.inputs = prunedInputs;\n            prunedNode.outputs = node.outputs;\n            filteredTape.push(prunedNode);\n        }\n    }\n    return filteredTape;\n}\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {\n    // Walk the tape backward and keep a map of Tensor to its gradient.\n    for (let i = filteredTape.length - 1; i >= 0; i--) {\n        const node = filteredTape[i];\n        const dys = [];\n        node.outputs.forEach(o => {\n            const gradTensor = tensorAccumulatedGradientMap[o.id];\n            if (gradTensor != null) {\n                dys.push(gradTensor);\n            }\n            else {\n                // This particular output is not in the back-propagation subgraph, so it\n                // does not affect the final output, thus we put null for its dy.\n                dys.push(null);\n            }\n        });\n        if (node.gradient == null) {\n            throw new Error(`Cannot compute gradient: gradient function not found ` +\n                `for ${node.kernelName}.`);\n        }\n        // Backprop dy through this node and accumulate gradients over the inputs.\n        const inputGradients = node.gradient(dys);\n        for (const inputName in node.inputs) {\n            if (!(inputName in inputGradients)) {\n                throw new Error(`Cannot backprop through input ${inputName}. ` +\n                    `Available gradients found: ${Object.keys(inputGradients)}.`);\n            }\n            // Call the gradient function.\n            const dx = tidy(() => inputGradients[inputName]());\n            if (dx.dtype !== 'float32') {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n            }\n            const x = node.inputs[inputName];\n            if (!util.arraysEqual(dx.shape, x.shape)) {\n                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +\n                    `'${inputName}' has shape '${dx.shape}', which does not match ` +\n                    `the shape of the input '${x.shape}'`);\n            }\n            if (tensorAccumulatedGradientMap[x.id] == null) {\n                tensorAccumulatedGradientMap[x.id] = dx;\n            }\n            else {\n                const curGradient = tensorAccumulatedGradientMap[x.id];\n                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n                curGradient.dispose();\n            }\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { computeStrides, isString, rightPad, sizeFromShape } from './util';\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\nexport function tensorToString(vals, shape, dtype, verbose) {\n    const strides = computeStrides(shape);\n    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n    const rank = shape.length;\n    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n    const lines = ['Tensor'];\n    if (verbose) {\n        lines.push(`  dtype: ${dtype}`);\n        lines.push(`  rank: ${rank}`);\n        lines.push(`  shape: [${shape}]`);\n        lines.push(`  values:`);\n    }\n    lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n    return lines.join('\\n');\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n    const n = sizeFromShape(shape);\n    const numCols = strides[strides.length - 1];\n    const padPerCol = new Array(numCols).fill(0);\n    const rank = shape.length;\n    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;\n    if (rank > 1) {\n        for (let row = 0; row < n / numCols; row++) {\n            const offset = row * numCols;\n            for (let j = 0; j < numCols; j++) {\n                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n            }\n        }\n    }\n    return padPerCol;\n}\nfunction valToString(val, pad, dtype) {\n    let valStr;\n    if (Array.isArray(val)) {\n        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n    }\n    else if (isString(val)) {\n        valStr = `'${val}'`;\n    }\n    else if (dtype === 'bool') {\n        valStr = boolNumToString(val);\n    }\n    else {\n        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n    }\n    return rightPad(valStr, pad);\n}\nfunction boolNumToString(v) {\n    return v === 0 ? 'false' : 'true';\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {\n    const storagePerElement = dtype === 'complex64' ? 2 : 1;\n    const size = shape[0];\n    const rank = shape.length;\n    if (rank === 0) {\n        if (dtype === 'complex64') {\n            const complexTuple = createComplexTuples(vals);\n            return [valToString(complexTuple[0], 0, dtype)];\n        }\n        if (dtype === 'bool') {\n            return [boolNumToString(vals[0])];\n        }\n        return [vals[0].toString()];\n    }\n    if (rank === 1) {\n        if (size > FORMAT_LIMIT_NUM_VALS) {\n            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n            let firstVals = Array.from(vals.slice(0, firstValsSize));\n            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n            if (dtype === 'complex64') {\n                firstVals = createComplexTuples(firstVals);\n                lastVals = createComplexTuples(lastVals);\n            }\n            return [\n                '[' +\n                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                        .join(', ') +\n                    ', ..., ' +\n                    lastVals\n                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n                        .join(', ') +\n                    ']'\n            ];\n        }\n        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :\n            Array.from(vals);\n        return [\n            '[' +\n                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                    .join(', ') +\n                ']'\n        ];\n    }\n    // The array is rank 2 or more.\n    const subshape = shape.slice(1);\n    const substrides = strides.slice(1);\n    const stride = strides[0] * storagePerElement;\n    const lines = [];\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));\n        }\n        lines.push('...');\n        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    else {\n        for (let i = 0; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    const sep = rank === 2 ? ',' : '';\n    lines[0] = '[' + lines[0] + sep;\n    for (let i = 1; i < lines.length - 1; i++) {\n        lines[i] = ' ' + lines[i] + sep;\n    }\n    let newLineSep = ',\\n';\n    for (let i = 2; i < rank; i++) {\n        newLineSep += '\\n';\n    }\n    lines[lines.length - 1] =\n        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n    return lines;\n}\nfunction createComplexTuples(vals) {\n    const complexTuples = [];\n    for (let i = 0; i < vals.length; i += 2) {\n        complexTuples.push([vals[i], vals[i + 1]]);\n    }\n    return complexTuples;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer {\n    constructor(shape, dtype, values) {\n        this.dtype = dtype;\n        this.shape = shape.slice();\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            const n = values.length;\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\n                `inferred by the shape '${this.size}'.`);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\n                `a TensorBuffer for the real and imaginary parts separately and ` +\n                `call tf.complex(real, imag).`);\n        }\n        this.values = values || util.getArrayFromDType(dtype, this.size);\n        this.strides = computeStrides(shape);\n    }\n    /**\n     * Sets a value in the buffer at a given location.\n     *\n     * @param value The value to set.\n     * @param locs  The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    set(value, ...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n        const index = this.locToIndex(locs);\n        this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    get(...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        let i = 0;\n        for (const loc of locs) {\n            if (loc < 0 || loc >= this.shape[i]) {\n                const msg = `Requested out of range element at ${locs}. ` +\n                    `  Buffer shape=${this.shape}`;\n                throw new Error(msg);\n            }\n            i++;\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    }\n    locToIndex(locs) {\n        if (this.rank === 0) {\n            return 0;\n        }\n        else if (this.rank === 1) {\n            return locs[0];\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    }\n    indexToLoc(index) {\n        if (this.rank === 0) {\n            return [];\n        }\n        else if (this.rank === 1) {\n            return [index];\n        }\n        const locs = new Array(this.shape.length);\n        for (let i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    toTensor() {\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n    trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n    opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n    deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor {\n    constructor(shape, dtype, dataId, id) {\n        /** Whether this tensor has been globally kept. */\n        this.kept = false;\n        this.isDisposedInternal = false;\n        this.shape = shape.slice();\n        this.dtype = dtype || 'float32';\n        this.size = util.sizeFromShape(shape);\n        this.strides = computeStrides(shape);\n        this.dataId = dataId;\n        this.id = id;\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async buffer() {\n        const vals = await this.data();\n        return opHandler.buffer(this.shape, this.dtype, vals);\n    }\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    bufferSync() {\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async array() {\n        const vals = await this.data();\n        return toNestedArray(this.shape, vals, this.dtype === 'complex64');\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    arraySync() {\n        return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async data() {\n        this.throwIfDisposed();\n        const data = trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            const bytes = await data;\n            try {\n                return bytes.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /**\n     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n     * and `data()`, this method prevents data from being downloaded to CPU.\n     *\n     * For WebGL backend, the data will be stored on a densely packed texture.\n     * This means that the texture will use the RGBA channels to store value.\n     *\n     * For WebGPU backend, the data will be stored on a buffer. There is no\n     * parameter, so can not use a user-defined size to create the buffer.\n     *\n     * @param options:\n     *     For WebGL,\n     *         - customTexShape: Optional. If set, will use the user defined\n     *     texture shape to create the texture.\n     *\n     * @returns For WebGL backend, a GPUData contains the new texture and\n     *     its information.\n     *     {\n     *        tensorRef: The tensor that is associated with this texture,\n     *        texture: WebGLTexture,\n     *        texShape: [number, number] // [height, width]\n     *     }\n     *\n     *     For WebGPU backend, a GPUData contains the new buffer and\n     *     its information.\n     *     {\n     *        tensorRef: The tensor that is associated with this buffer,\n     *        buffer: GPUBuffer,\n     *        bufSize: number\n     *     }\n     *\n     *     Remember to dispose the GPUData after it is used by\n     *     `res.tensorRef.dispose()`.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataToGPU(options) {\n        this.throwIfDisposed();\n        return trackerFn().readToGPU(this.dataId, options);\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataSync() {\n        this.throwIfDisposed();\n        const data = trackerFn().readSync(this.dataId);\n        if (this.dtype === 'string') {\n            try {\n                return data.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n    async bytes() {\n        this.throwIfDisposed();\n        const data = await trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            return data;\n        }\n        else {\n            return new Uint8Array(data.buffer);\n        }\n    }\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        trackerFn().disposeTensor(this);\n        this.isDisposedInternal = true;\n    }\n    get isDisposed() {\n        return this.isDisposedInternal;\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(`Tensor is disposed.`);\n        }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    print(verbose = false) {\n        return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    clone() {\n        this.throwIfDisposed();\n        return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    toString(verbose = false) {\n        const vals = this.dataSync();\n        return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n    cast(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    variable(trainable = true, name, dtype) {\n        this.throwIfDisposed();\n        return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n    value: (instance) => {\n        // Implementation note: we should use properties of the object that will be\n        // defined before the constructor body has finished executing (methods).\n        // This is because when this code is transpiled by babel, babel will call\n        // classCallCheck before the constructor body is run.\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n        return !!instance && instance.data != null && instance.dataSync != null &&\n            instance.throwIfDisposed != null;\n    }\n});\nexport function getGlobalTensorClass() {\n    // Use getGlobal so that we can augment the Tensor class across package\n    // boundaries becase the node resolution alg may result in different modules\n    // being returned for this file depending on the path they are loaded from.\n    return getGlobal('Tensor', () => {\n        return Tensor;\n    });\n}\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable extends Tensor {\n    constructor(initialValue, trainable, name, tensorId) {\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n        this.trainable = trainable;\n        this.name = name;\n    }\n    /**\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n     * the same shape and dtype as the old `tf.Tensor`.\n     *\n     * @param newValue New tensor to be assigned to this variable.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    assign(newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\n                `previous value (${this.dtype}) must match`);\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\n                `previous value (${this.shape}) must match`);\n        }\n        trackerFn().disposeTensor(this);\n        this.dataId = newValue.dataId;\n        trackerFn().incRef(this, null /* backend */);\n    }\n    dispose() {\n        trackerFn().disposeVariable(this);\n        this.isDisposedInternal = true;\n    }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance instanceof Tensor && instance.assign != null &&\n            instance.assign instanceof Function;\n    }\n});\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Rank;\n(function (Rank) {\n    Rank[\"R0\"] = \"R0\";\n    Rank[\"R1\"] = \"R1\";\n    Rank[\"R2\"] = \"R2\";\n    Rank[\"R3\"] = \"R3\";\n    Rank[\"R4\"] = \"R4\";\n    Rank[\"R5\"] = \"R5\";\n    Rank[\"R6\"] = \"R6\";\n})(Rank || (Rank = {}));\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nvar UpcastInt32AndMap;\n(function (UpcastInt32AndMap) {\n    UpcastInt32AndMap[\"float32\"] = \"float32\";\n    UpcastInt32AndMap[\"int32\"] = \"int32\";\n    UpcastInt32AndMap[\"bool\"] = \"int32\";\n    UpcastInt32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\nvar UpcastBoolAndMap;\n(function (UpcastBoolAndMap) {\n    UpcastBoolAndMap[\"float32\"] = \"float32\";\n    UpcastBoolAndMap[\"int32\"] = \"int32\";\n    UpcastBoolAndMap[\"bool\"] = \"bool\";\n    UpcastBoolAndMap[\"complex64\"] = \"complex64\";\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\nvar UpcastFloat32AndMap;\n(function (UpcastFloat32AndMap) {\n    UpcastFloat32AndMap[\"float32\"] = \"float32\";\n    UpcastFloat32AndMap[\"int32\"] = \"float32\";\n    UpcastFloat32AndMap[\"bool\"] = \"float32\";\n    UpcastFloat32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\nvar UpcastComplex64AndMap;\n(function (UpcastComplex64AndMap) {\n    UpcastComplex64AndMap[\"float32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"int32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"bool\"] = \"complex64\";\n    UpcastComplex64AndMap[\"complex64\"] = \"complex64\";\n})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));\nconst upcastTypeMap = {\n    'float32': UpcastFloat32AndMap,\n    'int32': UpcastInt32AndMap,\n    'bool': UpcastBoolAndMap,\n    'complex64': UpcastComplex64AndMap\n};\nexport function upcastType(typeA, typeB) {\n    if (typeA === 'string' || typeB === 'string') {\n        if (typeA === 'string' && typeB === 'string') {\n            return 'string';\n        }\n        throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n    }\n    return upcastTypeMap[typeA][typeB];\n}\n/** Returns the output type after summation. */\nexport function sumOutType(type) {\n    return upcastType(type, 'int32');\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n    if (a.dtype === b.dtype) {\n        return [a, b];\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +\n        ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n    return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result) {\n    const list = [];\n    const seen = new Set();\n    walkTensorContainer(result, list, seen);\n    return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n    if (container == null) {\n        return;\n    }\n    if (container instanceof Tensor) {\n        list.push(container);\n        return;\n    }\n    if (!isIterable(container)) {\n        return;\n    }\n    // Iteration over keys works also for arrays.\n    const iterable = container;\n    for (const k in iterable) {\n        const val = iterable[k];\n        if (!seen.has(val)) {\n            seen.add(val);\n            walkTensorContainer(val, list, seen);\n        }\n    }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n    return kernelInvocation.kernelName != null;\n}\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null,\n            get kernelNames() {\n                return Array.from(new Set(this.kernels.map(k => k.name)));\n            }\n        };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nexport class Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            log.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            /* Test if the factory returns a promise.\n            Done in a more liberal way than\n            previous 'Promise.resolve(backend)===backend'\n            as we needed to account for custom Promise\n            implementations (e.g. Angular) */\n            if (backend && !(backend instanceof KernelBackend) &&\n                typeof backend.then === 'function') {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    log.warn(`Initialization of backend ${backendName} failed`);\n                    log.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            log.warn(`Initialization of backend ${backendName} failed`);\n            log.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        const refCount = srcBackend.refCount(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId, true);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype, refCount);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n    clone(x) {\n        const y = ENGINE.runKernel(Identity, { x });\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernel(Cast, gradInputs, \n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs) {\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        const hasKernel = getKernel(kernelName, this.backendName) != null;\n        if (!hasKernel) {\n            throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n        }\n        return this.runKernelFunc({ kernelName, inputs, attrs });\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n    runKernelFunc(kernelParams) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        let out;\n        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n            kernelParams.kernelName :\n            this.state.activeScope != null ? this.state.activeScope.name : '';\n        // Create the kernelFunc from either a registered kernel OR passed in\n        // forward/backward functions (used by custom grad). In this context a\n        // kernelFunc wraps a kernel implementation with some bookkeeping.\n        if (isRegisteredKernelInvocation(kernelParams)) {\n            const { kernelName, inputs, attrs } = kernelParams;\n            if (this.backendName == null) {\n                // backend has not been initialized yet (backend initialization is lazy\n                // can be deferred until an op/ kernel is run).\n                // The below getter has side effects that will try to initialize the\n                // backend and set properties like this.backendName\n                // tslint:disable-next-line: no-unused-expression\n                this.backend;\n            }\n            const kernel = getKernel(kernelName, this.backendName);\n            util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map((outInfo) => {\n                    // todo (yassogba) remove this option (Tensor) when node backend\n                    // methods have been modularized and they all return tensorInfo.\n                    // TensorInfos do not have a rank attribute.\n                    if (outInfo.rank != null) {\n                        return outInfo;\n                    }\n                    return this.makeTensorFromTensorInfo(outInfo);\n                });\n                // Save any required inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since there would be no backprop for these tensors\n                // (which would otherwise dispose them).\n                if (isTapeOn) {\n                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            const { forwardFunc } = kernelParams;\n            // Running a customGrad op.\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    // Scope name is used to print a more helpful error message if needed.\n                    this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        //\n        // Run the kernelFunc. Optionally profiling it.\n        //\n        const { inputs, attrs } = kernelParams;\n        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n            null :\n            kernelParams.backwardsFunc;\n        let kernelProfile;\n        this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelOrScopeName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // We return an empty list rather than throw an error because the kernel we\n        // are looking up may not actually be relevant to backproping through the\n        // overall function\n        //\n        // See 'does not error if irrelevant (pruned) ops are missing grads' test\n        // in gradients_test.ts for an example.\n        return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     * @deprecated\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const tensorInfo = { dataId, shape, dtype };\n        return this.makeTensorFromTensorInfo(tensorInfo, backend);\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor that is a wrapper\n     * around an existing data id in TensorInfo. It doesn't create a new data id,\n     * only increments the ref count used in memory tracking.\n     */\n    makeTensorFromTensorInfo(tensorInfo, backend) {\n        const { dataId, shape, dtype } = tensorInfo;\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    trackTensor(a, backend) {\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        // Bytes for complex numbers are counted by their components. Bytes for\n        // string tensors are counted when writing values.\n        let bytes = 0;\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            bytes = a.size * util.bytesPerElement(a.dtype);\n        }\n        this.state.numBytes += bytes;\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            this.state.numDataBuffers++;\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes\n            });\n        }\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n    incRef(a, backend) {\n        this.trackTensor(a, backend);\n        this.backend.incRef(a.dataId);\n    }\n    removeDataId(dataId, backend) {\n        if (this.state.tensorInfo.has(dataId) &&\n            this.state.tensorInfo.get(dataId).backend === backend) {\n            this.state.tensorInfo.delete(dataId);\n            this.state.numDataBuffers--;\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n            this.state.numBytes -= info.bytes;\n        }\n        // Don't count bytes for complex numbers as they are counted by their\n        // components.\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            const bytes = a.size * util.bytesPerElement(a.dtype);\n            this.state.numBytes -= bytes;\n        }\n        // Remove the reference to dataId if backend dispose the data successfully\n        if (info.backend.disposeData(a.dataId)) {\n            this.removeDataId(a.dataId, info.backend);\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            const forwardFunc = (_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            };\n            const backwardsFunc = (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            };\n            return this.runKernelFunc({\n                forwardFunc,\n                backwardsFunc,\n                inputs: inputMap,\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    readToGPU(dataId, options) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readToGPU(dataId, options);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernel(Add, inputs);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line:no-any\nfunction _isNavigatorDefined() {\n    return typeof navigator !== 'undefined' && navigator != null;\n}\nlet isMobileMockValue;\nexport function mockIsMobile(value) {\n    isMobileMockValue = value;\n}\nexport function isMobile(nav) {\n    if (isMobileMockValue !== undefined) {\n        return isMobileMockValue;\n    }\n    if (nav || _isNavigatorDefined()) {\n        if (!nav) {\n            nav = navigator;\n        }\n        if (nav.product === 'ReactNative') {\n            return true;\n        }\n        const a = nav.userAgent || nav.vendor ||\n            // tslint:disable-next-line:no-any\n            (typeof window !== 'undefined' ? window.opera : '');\n        // Use `navigator.userAgentData.mobile` as fallback.\n        if (!a) {\n            // tslint:disable-next-line:no-any\n            const navAny = nav;\n            return navAny.userAgentData && navAny.userAgentData.mobile;\n        }\n        // tslint:disable-next-line:max-line-length\n        return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n            .test(a) ||\n            // tslint:disable-next-line:max-line-length\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n                .test(a.substr(0, 4));\n    }\n    return false;\n}\nexport function isBrowser() {\n    return (typeof window !== 'undefined' && window.document != null) ||\n        //@ts-ignore\n        (typeof WorkerGlobalScope !== 'undefined');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nconst ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n    if (debugValue) {\n        console.warn('Debugging mode is ON. The output of every math call will ' +\n            'be downloaded to CPU and checked for NaNs. ' +\n            'This significantly impacts performance.');\n    }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&\n    (typeof process.versions !== 'undefined') &&\n    (typeof process.versions.node !== 'undefined'));\n/** Whether this browser is Chrome. */\nENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&\n    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n    /Google Inc/.test(navigator.vendor));\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n/** Whether to check computation result for errors. */\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);\n/** Whether the backend needs to wrap input to imageBitmap. */\nENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n/** Whether to enable canvas2d willReadFrequently for GPU backends */\nENV.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => false);\n/** Whether to use setTimeoutCustom */\nENV.registerFlag('USE_SETTIMEOUTCUSTOM', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/* Type definitions for exporting and importing of models. */\n/**\n * A map from Tensor dtype to number of bytes per element of the Tensor.\n */\nexport const DTYPE_VALUE_SIZE_MAP = {\n    'float32': 4,\n    'float16': 2,\n    'int32': 4,\n    'uint16': 2,\n    'uint8': 1,\n    'bool': 1,\n    'complex64': 8\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n    // TODO(adarob, cais): Support quantization.\n    const specs = [];\n    const dataPromises = [];\n    const names = Array.isArray(tensors) ?\n        tensors.map(tensor => tensor.name) :\n        Object.keys(tensors);\n    for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n            t.dtype !== 'string' && t.dtype !== 'complex64') {\n            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n        }\n        const spec = { name, shape: t.shape, dtype: t.dtype };\n        if (t.dtype === 'string') {\n            const utf8bytes = new Promise(async (resolve) => {\n                const vals = await t.bytes();\n                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n                    NUM_BYTES_STRING_LENGTH * vals.length;\n                const bytes = new Uint8Array(totalNumBytes);\n                let offset = 0;\n                for (let i = 0; i < vals.length; i++) {\n                    const val = vals[i];\n                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                    bytes.set(bytesOfLength, offset);\n                    offset += NUM_BYTES_STRING_LENGTH;\n                    bytes.set(val, offset);\n                    offset += val.length;\n                }\n                resolve(bytes);\n            });\n            dataPromises.push(utf8bytes);\n        }\n        else {\n            dataPromises.push(t.data());\n        }\n        if (group != null) {\n            spec.group = group;\n        }\n        specs.push(spec);\n    }\n    const tensorValues = await Promise.all(dataPromises);\n    return { data: concatenateTypedArrays(tensorValues), specs };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(buffer, specs) {\n    // TODO(adarob, cais): Support quantization.\n    const out = {};\n    let float16Decode;\n    let offset = 0;\n    for (const spec of specs) {\n        const name = spec.name;\n        const dtype = spec.dtype;\n        const shape = spec.shape;\n        const size = sizeFromShape(shape);\n        let values;\n        if ('quantization' in spec) {\n            const quantization = spec.quantization;\n            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                if (!('min' in quantization && 'scale' in quantization)) {\n                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +\n                        `doesn't have corresponding metadata min and scale.`);\n                }\n            }\n            else if (quantization.dtype === 'float16') {\n                if (dtype !== 'float32') {\n                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n                        `which only supports weights of type float32 not ${dtype}.`);\n                }\n            }\n            else {\n                throw new Error(`Weight ${spec.name} has unknown ` +\n                    `quantization dtype ${quantization.dtype}. ` +\n                    `Supported quantization dtypes are: ` +\n                    `'uint8', 'uint16', and 'float16'.`);\n            }\n            const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n            const quantizedArray = (quantization.dtype === 'uint8') ?\n                new Uint8Array(byteBuffer) :\n                new Uint16Array(byteBuffer);\n            if (dtype === 'float32') {\n                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                    values = new Float32Array(quantizedArray.length);\n                    for (let i = 0; i < quantizedArray.length; i++) {\n                        const v = quantizedArray[i];\n                        values[i] = v * quantization.scale + quantization.min;\n                    }\n                }\n                else if (quantization.dtype === 'float16') {\n                    if (float16Decode === undefined) {\n                        float16Decode = getFloat16Decoder();\n                    }\n                    values = float16Decode(quantizedArray);\n                }\n                else {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type float32.`);\n                }\n            }\n            else if (dtype === 'int32') {\n                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                        `for weight type int32.`);\n                }\n                values = new Int32Array(quantizedArray.length);\n                for (let i = 0; i < quantizedArray.length; i++) {\n                    const v = quantizedArray[i];\n                    values[i] = Math.round(v * quantization.scale + quantization.min);\n                }\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * quantizationSizeFactor;\n        }\n        else if (dtype === 'string') {\n            const size = sizeFromShape(spec.shape);\n            values = [];\n            for (let i = 0; i < size; i++) {\n                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n                offset += NUM_BYTES_STRING_LENGTH;\n                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n                values.push(bytes);\n                offset += byteLength;\n            }\n        }\n        else {\n            const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n            if (dtype === 'float32') {\n                values = new Float32Array(byteBuffer);\n            }\n            else if (dtype === 'int32') {\n                values = new Int32Array(byteBuffer);\n            }\n            else if (dtype === 'bool') {\n                values = new Uint8Array(byteBuffer);\n            }\n            else if (dtype === 'complex64') {\n                values = new Float32Array(byteBuffer);\n                const real = new Float32Array(values.length / 2);\n                const image = new Float32Array(values.length / 2);\n                for (let i = 0; i < real.length; i++) {\n                    real[i] = values[i * 2];\n                    image[i] = values[i * 2 + 1];\n                }\n                const realTensor = tensor(real, shape, 'float32');\n                const imageTensor = tensor(image, shape, 'float32');\n                out[name] = complex(realTensor, imageTensor);\n                realTensor.dispose();\n                imageTensor.dispose();\n            }\n            else {\n                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n            }\n            offset += size * dtypeFactor;\n        }\n        if (dtype !== 'complex64') {\n            out[name] = tensor(values, shape, dtype);\n        }\n    }\n    return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n    // TODO(adarob, cais): Support quantization.\n    if (xs === null) {\n        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n    }\n    let totalByteLength = 0;\n    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n    // can have a different byte length from that of the `TypedArray` itself,\n    // for example, when the `TypedArray` is created from an offset in an\n    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n    // the `TypedArray` in byte length. If an element of `xs` does not show\n    // this property, a new `TypedArray` that satisfy this property will be\n    // constructed and pushed into `normalizedXs`.\n    const normalizedXs = [];\n    xs.forEach((x) => {\n        totalByteLength += x.byteLength;\n        // tslint:disable:no-any\n        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :\n            new x.constructor(x));\n        if (!(x instanceof Float32Array || x instanceof Int32Array ||\n            x instanceof Uint8Array)) {\n            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n        }\n        // tslint:enable:no-any\n    });\n    const y = new Uint8Array(totalByteLength);\n    let offset = 0;\n    normalizedXs.forEach((x) => {\n        y.set(new Uint8Array(x.buffer), offset);\n        offset += x.byteLength;\n    });\n    return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n        typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n    if (useNodeBuffer) {\n        return Buffer.byteLength(str);\n    }\n    return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n    if (useNodeBuffer) {\n        return Buffer.from(buffer).toString('base64');\n    }\n    const buf = new Uint8Array(buffer);\n    let s = '';\n    for (let i = 0, l = buf.length; i < l; i++) {\n        s += String.fromCharCode(buf[i]);\n    }\n    return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n    if (useNodeBuffer) {\n        const buf = Buffer.from(str, 'base64');\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n    const s = atob(str);\n    const buffer = new Uint8Array(s.length);\n    for (let i = 0; i < s.length; ++i) {\n        buffer.set([s.charCodeAt(i)], i);\n    }\n    return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers) {\n    if (buffers.length === 1) {\n        return buffers[0];\n    }\n    let totalByteLength = 0;\n    buffers.forEach((buffer) => {\n        totalByteLength += buffer.byteLength;\n    });\n    const temp = new Uint8Array(totalByteLength);\n    let offset = 0;\n    buffers.forEach((buffer) => {\n        temp.set(new Uint8Array(buffer), offset);\n        offset += buffer.byteLength;\n    });\n    return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n    const SEPARATOR = '/';\n    path = path.trim();\n    while (path.endsWith(SEPARATOR)) {\n        path = path.slice(0, path.length - 1);\n    }\n    const items = path.split(SEPARATOR);\n    return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n    const result = {\n        modelTopology: artifacts.modelTopology,\n        format: artifacts.format,\n        generatedBy: artifacts.generatedBy,\n        convertedBy: artifacts.convertedBy,\n        weightsManifest: manifest\n    };\n    if (artifacts.signature != null) {\n        result.signature = artifacts.signature;\n    }\n    if (artifacts.userDefinedMetadata != null) {\n        result.userDefinedMetadata = artifacts.userDefinedMetadata;\n    }\n    if (artifacts.modelInitializer != null) {\n        result.modelInitializer = artifacts.modelInitializer;\n    }\n    if (artifacts.trainingConfig != null) {\n        result.trainingConfig = artifacts.trainingConfig;\n    }\n    return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file and weights.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param weightSpecs The list of WeightsManifestEntry for the model. Must be\n *     passed if the modelJSON has a weightsManifest.\n * @param weightData An ArrayBuffer of weight data for the model corresponding\n *     to the weights in weightSpecs. Must be passed if the modelJSON has a\n *     weightsManifest.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData) {\n    const modelArtifacts = {\n        modelTopology: modelJSON.modelTopology,\n        format: modelJSON.format,\n        generatedBy: modelJSON.generatedBy,\n        convertedBy: modelJSON.convertedBy\n    };\n    if (modelJSON.trainingConfig != null) {\n        modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n    }\n    if (modelJSON.weightsManifest != null) {\n        if (!weightSpecs) {\n            throw new Error('modelJSON has weightsManifest but weightSpecs is null');\n        }\n        if (!weightData) {\n            throw new Error('modelJSON has weightsManifest but weightData is null');\n        }\n        modelArtifacts.weightSpecs = weightSpecs;\n        modelArtifacts.weightData = weightData;\n    }\n    if (modelJSON.signature != null) {\n        modelArtifacts.signature = modelJSON.signature;\n    }\n    if (modelJSON.userDefinedMetadata != null) {\n        modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n    }\n    if (modelJSON.modelInitializer != null) {\n        modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n    }\n    return modelArtifacts;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(modelJSON, loadWeights) {\n    let weightSpecs;\n    let weightData;\n    if (modelJSON.weightsManifest != null) {\n        [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n    }\n    return getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData);\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            modelArtifacts.weightData.byteLength,\n    };\n}\n/**\n * Concatenate the weights stored in a WeightsManifestConfig into a list of\n * WeightsManifestEntry\n *\n * @param weightsManifest The WeightsManifestConfig to extract weights from.\n * @returns A list of WeightsManifestEntry of the weights in the weightsManifest\n */\nexport function getWeightSpecs(weightsManifest) {\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n        weightSpecs.push(...entry.weights);\n    }\n    return weightSpecs;\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n    const convertMantissa = (i) => {\n        let m = i << 13;\n        let e = 0;\n        while ((m & 0x00800000) === 0) {\n            e -= 0x00800000;\n            m <<= 1;\n        }\n        m &= ~0x00800000;\n        e += 0x38800000;\n        return m | e;\n    };\n    const mantisaTable = new Uint32Array(2048);\n    mantisaTable[0] = 0;\n    for (let i = 1; i < 1024; i++) {\n        mantisaTable[i] = convertMantissa(i);\n    }\n    for (let i = 1024; i < 2048; i++) {\n        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n    const exponentTable = new Uint32Array(64);\n    exponentTable[0] = 0;\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 31; i++) {\n        exponentTable[i] = i << 23;\n    }\n    for (let i = 33; i < 63; i++) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n    const offsetTable = new Uint32Array(64);\n    for (let i = 0; i < 64; i++) {\n        offsetTable[i] = 1024;\n    }\n    offsetTable[0] = offsetTable[32] = 0;\n    return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n    // Algorithm is based off of\n    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n    // Cache lookup tables\n    const mantisaTable = computeFloat16MantisaTable();\n    const exponentTable = computeFloat16ExponentTable();\n    const offsetTable = computeFloat16OffsetTable();\n    return (quantizedArray) => {\n        const buffer = new ArrayBuffer(4 * quantizedArray.length);\n        const bufferUint32View = new Uint32Array(buffer);\n        for (let index = 0; index < quantizedArray.length; index++) {\n            const float16Bits = quantizedArray[index];\n            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n                exponentTable[float16Bits >> 10];\n            bufferUint32View[index] = float32Bits;\n        }\n        return new Float32Array(buffer);\n    };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class IORouterRegistry {\n    constructor() {\n        this.saveRouters = [];\n        this.loadRouters = [];\n    }\n    static getInstance() {\n        if (IORouterRegistry.instance == null) {\n            IORouterRegistry.instance = new IORouterRegistry();\n        }\n        return IORouterRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerSaveRouter(saveRouter) {\n        IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n    }\n    /**\n     * Register a load-handler router.\n     *\n     * @param loadRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `load` method defined or `null`.\n     */\n    static registerLoadRouter(loadRouter) {\n        IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n    }\n    /**\n     * Look up IOHandler for saving, given a URL-like string.\n     *\n     * @param url\n     * @returns If only one match is found, an instance of IOHandler with the\n     * `save` method defined. If no match is found, `null`.\n     * @throws Error, if more than one match is found.\n     */\n    static getSaveHandlers(url) {\n        return IORouterRegistry.getHandlers(url, 'save');\n    }\n    /**\n     * Look up IOHandler for loading, given a URL-like string.\n     *\n     * @param url\n     * @param loadOptions Optional, custom load options.\n     * @returns All valid handlers for `url`, given the currently registered\n     *   handler routers.\n     */\n    static getLoadHandlers(url, loadOptions) {\n        return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n    }\n    static getHandlers(url, handlerType, loadOptions) {\n        const validHandlers = [];\n        const routers = handlerType === 'load' ?\n            IORouterRegistry.getInstance().loadRouters :\n            IORouterRegistry.getInstance().saveRouters;\n        routers.forEach(router => {\n            const handler = router(url, loadOptions);\n            if (handler !== null) {\n                validHandlers.push(handler);\n            }\n        });\n        return validHandlers;\n    }\n}\nexport const registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase() {\n    const idbFactory = getIndexedDBFactory();\n    return new Promise((resolve, reject) => {\n        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = error => reject(error);\n    });\n}\nfunction getIndexedDBFactory() {\n    if (!env().getBool('IS_BROWSER')) {\n        // TODO(cais): Add more info about what IOHandler subtypes are available.\n        //   Maybe point to a doc page on the web and/or automatically determine\n        //   the available IOHandlers and print them in the error message.\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' +\n            'is not a web browser.');\n    }\n    // tslint:disable-next-line:no-any\n    const theWindow = typeof window === 'undefined' ? self : window;\n    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n        theWindow.shimIndexedDB;\n    if (factory == null) {\n        throw new Error('The current browser does not appear to support IndexedDB.');\n    }\n    return factory;\n}\nfunction setUpDatabase(openRequest) {\n    const db = openRequest.result;\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB {\n    constructor(modelPath) {\n        this.indexedDB = getIndexedDBFactory();\n        if (modelPath == null || !modelPath) {\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n    }\n    async save(modelArtifacts) {\n        // TODO(cais): Support saving GraphDef models.\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        return this.databaseAction(this.modelPath, modelArtifacts);\n    }\n    async load() {\n        return this.databaseAction(this.modelPath);\n    }\n    /**\n     * Perform database action to put model artifacts into or read model artifacts\n     * from IndexedDB object store.\n     *\n     * Whether the action is put or get depends on whether `modelArtifacts` is\n     * specified. If it is specified, the action will be put; otherwise the action\n     * will be get.\n     *\n     * @param modelPath A unique string path for the model.\n     * @param modelArtifacts If specified, it will be the model artifacts to be\n     *   stored in IndexedDB.\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n     *   of `ModelArtifacts`, if the action is get.\n     */\n    databaseAction(modelPath, modelArtifacts) {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (modelArtifacts == null) {\n                    // Read model out from object store.\n                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                    const getRequest = modelStore.get(this.modelPath);\n                    getRequest.onsuccess = () => {\n                        if (getRequest.result == null) {\n                            db.close();\n                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +\n                                `in IndexedDB.`));\n                        }\n                        else {\n                            resolve(getRequest.result.modelArtifacts);\n                        }\n                    };\n                    getRequest.onerror = error => {\n                        db.close();\n                        return reject(getRequest.error);\n                    };\n                    modelTx.oncomplete = () => db.close();\n                }\n                else {\n                    // Put model into object store.\n                    const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n                    // First, put ModelArtifactsInfo into info store.\n                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\n                    let modelTx;\n                    putInfoRequest.onsuccess = () => {\n                        // Second, put model data into model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        const putModelRequest = modelStore.put({\n                            modelPath: this.modelPath,\n                            modelArtifacts,\n                            modelArtifactsInfo\n                        });\n                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\n                        putModelRequest.onerror = error => {\n                            // If the put-model request fails, roll back the info entry as\n                            // well.\n                            infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                            const deleteInfoRequest = infoStore.delete(this.modelPath);\n                            deleteInfoRequest.onsuccess = () => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                            deleteInfoRequest.onerror = error => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                        };\n                    };\n                    putInfoRequest.onerror = error => {\n                        db.close();\n                        return reject(putInfoRequest.error);\n                    };\n                    infoTx.oncomplete = () => {\n                        if (modelTx == null) {\n                            db.close();\n                        }\n                        else {\n                            modelTx.oncomplete = () => db.close();\n                        }\n                    };\n                }\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n    return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n        key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n        key;\n}\nexport class BrowserIndexedDBManager {\n    constructor() {\n        this.indexedDB = getIndexedDBFactory();\n    }\n    async listModels() {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                const store = tx.objectStore(INFO_STORE_NAME);\n                // tslint:disable:max-line-length\n                // Need to cast `store` as `any` here because TypeScript's DOM\n                // library does not have the `getAll()` method even though the\n                // method is supported in the latest version of most mainstream\n                // browsers:\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                // tslint:enable:max-line-length\n                // tslint:disable-next-line:no-any\n                const getAllInfoRequest = store.getAll();\n                getAllInfoRequest.onsuccess = () => {\n                    const out = {};\n                    for (const item of getAllInfoRequest.result) {\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                    }\n                    resolve(out);\n                };\n                getAllInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                };\n                tx.oncomplete = () => db.close();\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                const getInfoRequest = infoStore.get(path);\n                let modelTx;\n                getInfoRequest.onsuccess = () => {\n                    if (getInfoRequest.result == null) {\n                        db.close();\n                        return reject(new Error(`Cannot find model with path '${path}' ` +\n                            `in IndexedDB.`));\n                    }\n                    else {\n                        // First, delete the entry in the info store.\n                        const deleteInfoRequest = infoStore.delete(path);\n                        const deleteModelData = () => {\n                            // Second, delete the entry in the model store.\n                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                            const deleteModelRequest = modelStore.delete(path);\n                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n                        };\n                        // Proceed with deleting model data regardless of whether deletion\n                        // of info data succeeds or not.\n                        deleteInfoRequest.onsuccess = deleteModelData;\n                        deleteInfoRequest.onerror = error => {\n                            deleteModelData();\n                            db.close();\n                            return reject(getInfoRequest.error);\n                        };\n                    }\n                };\n                getInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                };\n                infoTx.oncomplete = () => {\n                    if (modelTx == null) {\n                        db.close();\n                    }\n                    else {\n                        modelTx.oncomplete = () => db.close();\n                    }\n                };\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +\n            'unavailable in the current environment.');\n    }\n    const LS = window.localStorage;\n    const purgedModelPaths = [];\n    for (let i = 0; i < LS.length; ++i) {\n        const key = LS.key(i);\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        if (key.startsWith(prefix) && key.length > prefix.length) {\n            LS.removeItem(key);\n            const modelName = getModelPathFromKey(key);\n            if (purgedModelPaths.indexOf(modelName) === -1) {\n                purgedModelPaths.push(modelName);\n            }\n        }\n    }\n    return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n    return {\n        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n    };\n}\nfunction removeItems(keys) {\n    for (const key of Object.values(keys)) {\n        window.localStorage.removeItem(key);\n    }\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n    const items = key.split(PATH_SEPARATOR);\n    if (items.length < 3) {\n        throw new Error(`Invalid key format: ${key}`);\n    }\n    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n        key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n        key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage {\n    constructor(modelPath) {\n        if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n            typeof window.localStorage === 'undefined') {\n            // TODO(cais): Add more info about what IOHandler subtypes are\n            // available.\n            //   Maybe point to a doc page on the web and/or automatically determine\n            //   the available IOHandlers and print them in the error message.\n            throw new Error('The current environment does not support local storage.');\n        }\n        this.LS = window.localStorage;\n        if (modelPath == null || !modelPath) {\n            throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n        this.keys = getModelKeys(this.modelPath);\n    }\n    /**\n     * Save model artifacts to browser local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @param modelArtifacts The model artifacts to be stored.\n     * @returns An instance of SaveResult.\n     */\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const topology = JSON.stringify(modelArtifacts.modelTopology);\n            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n            const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n            try {\n                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n                this.LS.setItem(this.keys.topology, topology);\n                this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n                this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n                // Note that JSON.stringify doesn't write out keys that have undefined\n                // values, so for some keys, we set undefined instead of a null-ish\n                // value.\n                const metadata = {\n                    format: modelArtifacts.format,\n                    generatedBy: modelArtifacts.generatedBy,\n                    convertedBy: modelArtifacts.convertedBy,\n                    signature: modelArtifacts.signature != null ?\n                        modelArtifacts.signature :\n                        undefined,\n                    userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n                        modelArtifacts.userDefinedMetadata :\n                        undefined,\n                    modelInitializer: modelArtifacts.modelInitializer != null ?\n                        modelArtifacts.modelInitializer :\n                        undefined,\n                    trainingConfig: modelArtifacts.trainingConfig != null ?\n                        modelArtifacts.trainingConfig :\n                        undefined\n                };\n                this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n                return { modelArtifactsInfo };\n            }\n            catch (err) {\n                // If saving failed, clean up all items saved so far.\n                removeItems(this.keys);\n                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +\n                    `size quota being exceeded is a possible cause of this failure: ` +\n                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n            }\n        }\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const info = JSON.parse(this.LS.getItem(this.keys.info));\n        if (info == null) {\n            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n        }\n        if (info.modelTopologyType !== 'JSON') {\n            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +\n                'topology yet.');\n        }\n        const out = {};\n        // Load topology.\n        const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n        if (topology == null) {\n            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +\n                `is missing.`);\n        }\n        out.modelTopology = topology;\n        // Load weight specs.\n        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n        if (weightSpecs == null) {\n            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +\n                `are missing.`);\n        }\n        out.weightSpecs = weightSpecs;\n        // Load meta-data fields.\n        const metadataString = this.LS.getItem(this.keys.modelMetadata);\n        if (metadataString != null) {\n            const metadata = JSON.parse(metadataString);\n            out.format = metadata.format;\n            out.generatedBy = metadata.generatedBy;\n            out.convertedBy = metadata.convertedBy;\n            if (metadata.signature != null) {\n                out.signature = metadata.signature;\n            }\n            if (metadata.userDefinedMetadata != null) {\n                out.userDefinedMetadata = metadata.userDefinedMetadata;\n            }\n            if (metadata.modelInitializer != null) {\n                out.modelInitializer = metadata.modelInitializer;\n            }\n            if (metadata.trainingConfig != null) {\n                out.trainingConfig = metadata.trainingConfig;\n            }\n        }\n        // Load weight data.\n        const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n        if (weightDataBase64 == null) {\n            throw new Error(`In local storage, the binary weight values of model ` +\n                `'${this.modelPath}' are missing.`);\n        }\n        out.weightData = base64StringToArrayBuffer(weightDataBase64);\n        return out;\n    }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n    return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n    constructor() {\n        assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n        assert(typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n        this.LS = window.localStorage;\n    }\n    async listModels() {\n        const out = {};\n        const prefix = PATH_PREFIX + PATH_SEPARATOR;\n        const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n        for (let i = 0; i < this.LS.length; ++i) {\n            const key = this.LS.key(i);\n            if (key.startsWith(prefix) && key.endsWith(suffix)) {\n                const modelPath = getModelPathFromKey(key);\n                out[modelPath] = JSON.parse(this.LS.getItem(key));\n            }\n        }\n        return out;\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        const keys = getModelKeys(path);\n        if (this.LS.getItem(keys.info) == null) {\n            throw new Error(`Cannot find model at path '${path}'`);\n        }\n        const info = JSON.parse(this.LS.getItem(keys.info));\n        removeItems(keys);\n        return info;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n    constructor() {\n        this.managers = {};\n    }\n    static getInstance() {\n        if (ModelStoreManagerRegistry.instance == null) {\n            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n        }\n        return ModelStoreManagerRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n    static registerManager(scheme, manager) {\n        assert(scheme != null, () => 'scheme must not be undefined or null.');\n        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n        }\n        assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n        const registry = ModelStoreManagerRegistry.getInstance();\n        assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n        registry.managers[scheme] = manager;\n    }\n    static getManager(scheme) {\n        const manager = ModelStoreManagerRegistry.getInstance().managers[scheme];\n        if (manager == null) {\n            throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n        }\n        return manager;\n    }\n    static getSchemes() {\n        return Object.keys(ModelStoreManagerRegistry.getInstance().managers);\n    }\n}\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url) {\n    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n        throw new Error(`The url string provided does not contain a scheme. ` +\n            `Supported schemes are: ` +\n            `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n    }\n    return {\n        scheme: url.split(URL_SCHEME_SUFFIX)[0],\n        path: url.split(URL_SCHEME_SUFFIX)[1],\n    };\n}\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n    assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n    const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n    assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n    assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `load handlers for source URL ${sourceURL}.`);\n    const loadHandler = loadHandlers[0];\n    const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n    assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +\n        `URL ${destURL}.`);\n    assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +\n        `save handlers for destination URL ${destURL}.`);\n    const saveHandler = saveHandlers[0];\n    const sourceScheme = parseURL(sourceURL).scheme;\n    const sourcePath = parseURL(sourceURL).path;\n    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n    const modelArtifacts = await loadHandler.load();\n    // If moving within the same storage medium, remove the old model as soon as\n    // the loading is done. Without doing this, it is possible that the combined\n    // size of the two models will cause the cloning to fail.\n    if (deleteSource && sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    const saveResult = await saveHandler.save(modelArtifacts);\n    // If moving between mediums, the deletion is done after the save succeeds.\n    // This guards against the case in which saving to the destination medium\n    // fails.\n    if (deleteSource && !sameMedium) {\n        await ModelStoreManagerRegistry.getManager(sourceScheme)\n            .removeModel(sourcePath);\n    }\n    return saveResult.modelArtifactsInfo;\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels() {\n    const schemes = ModelStoreManagerRegistry.getSchemes();\n    const out = {};\n    for (const scheme of schemes) {\n        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n        for (const path in schemeOut) {\n            const url = scheme + URL_SCHEME_SUFFIX + path;\n            out[url] = schemeOut[path];\n        }\n    }\n    return out;\n}\n/**\n * Remove a model specified by URL from a registered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url) {\n    const schemeAndPath = parseURL(url);\n    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n    return manager.removeModel(schemeAndPath.path);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(sourceURL, destURL) {\n    const deleteSource = false;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(sourceURL, destURL) {\n    const deleteSource = true;\n    return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\nexport { moveModel, copyModel, removeModel, listModels };\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { BrowserIndexedDB, BrowserIndexedDBManager } from '../io/indexed_db';\nimport { BrowserLocalStorage, BrowserLocalStorageManager } from '../io/local_storage';\nimport { ModelStoreManagerRegistry } from '../io/model_management';\nexport class PlatformBrowser {\n    constructor() {\n        // For setTimeoutCustom\n        this.messageName = 'setTimeoutCustom';\n        this.functionRefs = [];\n        this.handledMessageCount = 0;\n        this.hasEventListener = false;\n    }\n    fetch(path, init) {\n        return fetch(path, init);\n    }\n    now() {\n        return performance.now();\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);\n        }\n        if (this.textEncoder == null) {\n            this.textEncoder = new TextEncoder();\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        return new TextDecoder(encoding).decode(bytes);\n    }\n    // If the setTimeout nesting level is greater than 5 and timeout is less\n    // than 4ms, timeout will be clamped to 4ms, which hurts the perf.\n    // Interleaving window.postMessage and setTimeout will trick the browser and\n    // avoid the clamp.\n    setTimeoutCustom(functionRef, delay) {\n        if (!window || !env().getBool('USE_SETTIMEOUTCUSTOM')) {\n            setTimeout(functionRef, delay);\n            return;\n        }\n        this.functionRefs.push(functionRef);\n        setTimeout(() => {\n            window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, '*');\n        }, delay);\n        if (!this.hasEventListener) {\n            this.hasEventListener = true;\n            window.addEventListener('message', (event) => {\n                if (event.source === window && event.data.name === this.messageName) {\n                    event.stopPropagation();\n                    const functionRef = this.functionRefs[event.data.index];\n                    functionRef();\n                    this.handledMessageCount++;\n                    if (this.handledMessageCount === this.functionRefs.length) {\n                        this.functionRefs = [];\n                        this.handledMessageCount = 0;\n                    }\n                }\n            }, true);\n        }\n    }\n}\nif (env().get('IS_BROWSER')) {\n    env().setPlatform('browser', new PlatformBrowser());\n    // Register LocalStorage IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n    }\n    catch (err) {\n    }\n    // Register IndexedDB IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n    }\n    catch (err) {\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n    // tslint:disable-next-line:no-require-imports\n    importFetch: () => require('node-fetch')\n};\nlet systemFetch;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n    systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n    systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n    return systemFetch;\n}\nexport class PlatformNode {\n    constructor() {\n        // tslint:disable-next-line:no-require-imports\n        this.util = require('util');\n        // According to the spec, the built-in encoder can do only UTF-8 encoding.\n        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n        this.textEncoder = new this.util.TextEncoder();\n    }\n    fetch(path, requestInits) {\n        if (env().global.fetch != null) {\n            return env().global.fetch(path, requestInits);\n        }\n        if (systemFetch == null) {\n            systemFetch = getNodeFetch.importFetch();\n        }\n        return systemFetch(path, requestInits);\n    }\n    now() {\n        const time = process.hrtime();\n        return time[0] * 1000 + time[1] / 1000000;\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        if (bytes.length === 0) {\n            return '';\n        }\n        return new this.util.TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n    env().setPlatform('node', new PlatformNode());\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport * as util from '../util';\n/**\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n *\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\n * `buffer.set()`, or by modifying directly `buffer.values`.\n *\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\n * those values.\n *\n * ```js\n * // Create a buffer and set values at particular indices.\n * const buffer = tf.buffer([2, 2]);\n * buffer.set(3, 0, 0);\n * buffer.set(5, 1, 0);\n *\n * // Convert the buffer back to a tensor.\n * buffer.toTensor().print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\n * @param values The values of the buffer as `TypedArray`. Defaults to\n * zeros.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function buffer(shape, dtype = 'float32', values) {\n    dtype = dtype || 'float32';\n    util.assertNonNegativeIntegerDimensions(shape);\n    return new TensorBuffer(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { Tensor } from './tensor';\nimport { assert, flatten, inferDtype, isTypedArray, toTypedArray } from './util';\nexport function inferShape(val, dtype) {\n    let firstElem = val;\n    if (isTypedArray(val)) {\n        return dtype === 'string' ? [] : [val.length];\n    }\n    if (!Array.isArray(val)) {\n        return []; // Scalar.\n    }\n    const shape = [];\n    while (Array.isArray(firstElem) ||\n        isTypedArray(firstElem) && dtype !== 'string') {\n        shape.push(firstElem.length);\n        firstElem = firstElem[0];\n    }\n    if (Array.isArray(val) &&\n        env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n        deepAssertShapeConsistency(val, shape, []);\n    }\n    return shape;\n}\nfunction deepAssertShapeConsistency(val, shape, indices) {\n    indices = indices || [];\n    if (!(Array.isArray(val)) && !isTypedArray(val)) {\n        assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n        return;\n    }\n    assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n        `but is an array of ${val.length} elements`);\n    assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n        `elements, but has ${val.length} elements`);\n    const subShape = shape.slice(1);\n    for (let i = 0; i < val.length; ++i) {\n        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n    }\n}\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n    if (expectedDtype === 'string_or_numeric') {\n        return;\n    }\n    if (expectedDtype == null) {\n        throw new Error(`Expected dtype cannot be null.`);\n    }\n    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n        expectedDtype === 'numeric' && actualDType === 'string') {\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +\n            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n    }\n}\nexport function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {\n    if (x instanceof Tensor) {\n        assertDtype(parseAsDtype, x.dtype, argName, functionName);\n        return x;\n    }\n    let inferredDtype = inferDtype(x);\n    // If the user expects a bool/int/float, use that info to update the\n    // inferredDtype when it is not a string.\n    if (inferredDtype !== 'string' &&\n        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n        inferredDtype = parseAsDtype;\n    }\n    assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n    if ((x == null) ||\n        (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n            typeof x !== 'boolean' && typeof x !== 'string')) {\n        const type = x == null ? 'null' : x.constructor.name;\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +\n            `Tensor or TensorLike, but got '${type}'`);\n    }\n    const inferredShape = inferShape(x, inferredDtype);\n    if (!isTypedArray(x) && !Array.isArray(x)) {\n        x = [x];\n    }\n    const skipTypedArray = true;\n    const values = inferredDtype !== 'string' ?\n        toTypedArray(x, inferredDtype) :\n        flatten(x, [], skipTypedArray);\n    return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nexport function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {\n    if (!Array.isArray(arg)) {\n        throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +\n            '`Tensor[]` or `TensorLike[]`');\n    }\n    const tensors = arg;\n    return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op(f) {\n    const keys = Object.keys(f);\n    if (keys.length !== 1) {\n        throw new Error(`Please provide an object with a single key ` +\n            `(operation name) mapping to a function. Got an object with ` +\n            `${keys.length} keys.`);\n    }\n    let opName = keys[0];\n    const fn = f[opName];\n    // Strip the underscore from the end of the function name.\n    if (opName.endsWith('_')) {\n        opName = opName.substring(0, opName.length - 1);\n    }\n    // add an __op suffix to distinguish ops from kernels in tf.profile\n    opName = opName + OP_SCOPE_SUFFIX;\n    // tslint:disable-next-line:no-any\n    const f2 = (...args) => {\n        ENGINE.startScope(opName);\n        try {\n            const result = fn(...args);\n            if (isPromise(result)) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            ENGINE.endScope(result);\n            return result;\n        }\n        catch (ex) {\n            ENGINE.endScope(null);\n            throw ex;\n        }\n    };\n    Object.defineProperty(f2, 'name', { value: opName, configurable: true });\n    // tslint:disable-next-line:no-any\n    return f2;\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cast } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction cast_(x, dtype) {\n    const $x = convertToTensor(x, 'x', 'cast');\n    // Sanity checks.\n    if (!util.isValidDtype(dtype)) {\n        throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n    }\n    if (dtype === 'string' && $x.dtype !== 'string' ||\n        dtype !== 'string' && $x.dtype === 'string') {\n        throw new Error('Only strings can be casted to strings');\n    }\n    const inputs = { x: $x };\n    const attrs = { dtype };\n    return ENGINE.runKernel(Cast, inputs, attrs);\n}\nexport const cast = op({ cast_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Identity } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a new tensor with the same values and shape as the specified\n * tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n *\n * x.clone().print();\n * ```\n *\n * @param x The tensor to clone.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction clone_(x) {\n    const $x = convertToTensor(x, 'x', 'clone', 'string_or_numeric');\n    const inputs = { x: $x };\n    // Note this op is called tf.identity in python. Hence the kernel name used\n    // here.\n    return ENGINE.runKernel(Identity, inputs);\n}\nexport const clone = op({ clone_ });\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Prints information about the `tf.Tensor` including its data.\n *\n * ```js\n * const verbose = true;\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n * ```\n * @param x The tensor to be printed.\n * @param verbose Whether to print verbose information about the ` Tensor`,\n * including dtype and size.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function print(x, verbose = false) {\n    console.log(x.toString(verbose));\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code for tfjs-core\n// Set up Engine and ENV\nimport { getOrMakeEngine } from './engine';\ngetOrMakeEngine();\n// Register backend-agnostic flags.\nimport './flags';\n// Register platforms\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n// Set up OpHandler\nimport { buffer } from './ops/buffer';\nimport { cast } from './ops/cast';\nimport { clone } from './ops/clone';\nimport { print } from './ops/print';\nimport { setOpHandler } from './tensor';\nconst opHandler = {\n    buffer,\n    cast,\n    clone,\n    print\n};\nsetOpHandler(opHandler);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n            const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.modelJsonAnchor == null ?\n                document.createElement('a') :\n                this.modelJsonAnchor;\n            jsonAnchor.download = this.modelJsonFileName;\n            jsonAnchor.href = modelJsonURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.jsonFile = files[0];\n        this.weightsFiles = files.slice(1);\n    }\n    async load() {\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                if (this.weightsFiles.length === 0) {\n                    resolve({ modelTopology });\n                    return;\n                }\n                const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n                resolve(modelArtifactsPromise);\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(this.jsonFile);\n        });\n    }\n    loadWeights(weightsManifest) {\n        const weightSpecs = [];\n        const paths = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n            paths.push(...entry.paths);\n        }\n        const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n        const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n        return Promise.all(promises).then(buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n    }\n    loadWeightsFile(path, file) {\n        return new Promise((resolve, reject) => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const weightData = event.target.result;\n                resolve(weightData);\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(file);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest) {\n        const basenames = [];\n        const fileNames = this.weightsFiles.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== this.weightsFiles.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${this.weightsFiles.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n    checkPromises(promises);\n    startFraction = startFraction == null ? 0 : startFraction;\n    endFraction = endFraction == null ? 1 : endFraction;\n    checkFraction(startFraction, endFraction);\n    let resolvedPromise = 0;\n    const registerMonitor = (promise) => {\n        promise.then(value => {\n            const fraction = startFraction +\n                ++resolvedPromise / promises.length * (endFraction - startFraction);\n            // pass fraction as parameter to callback function.\n            onProgress(fraction);\n            return value;\n        });\n        return promise;\n    };\n    function checkPromises(promises) {\n        assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n    }\n    function checkFraction(startFraction, endFraction) {\n        assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n        assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n        assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n    }\n    return Promise.all(promises.map(registerMonitor));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n    if (loadOptions == null) {\n        loadOptions = {};\n    }\n    const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n        loadOptions.fetchFunc;\n    // Create the requests for all of the weights in parallel.\n    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));\n    const fetchStartFraction = 0;\n    const fetchEndFraction = 0.5;\n    const responses = loadOptions.onProgress == null ?\n        await Promise.all(requests) :\n        await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n    const bufferPromises = responses.map(response => response.arrayBuffer());\n    const bufferStartFraction = 0.5;\n    const bufferEndFraction = 1;\n    const buffers = loadOptions.onProgress == null ?\n        await Promise.all(bufferPromises) :\n        await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n    return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {\n    // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n    // single weight from a group, the whole group will be fetched. At a future\n    // date, we should support fetching only the individual shards within a\n    // group that are needed to reconstruct the requested weight.\n    // TODO(cais): Use `decodeWeights` for implementation.\n    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });\n    const loadWeights = weightsLoaderFactory(fetchWeights);\n    return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n    return async (manifest, filePathPrefix = '', weightNames) => {\n        // Collect all the groups, weights, and their relative offsets to be\n        // fetched.\n        const groupIndicesToFetchMap = manifest.map(() => false);\n        const groupWeightsToFetch = {};\n        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n        const allManifestWeightNames = [];\n        manifest.forEach((manifestGroupConfig, groupIndex) => {\n            let groupOffset = 0;\n            manifestGroupConfig.weights.forEach(weightsEntry => {\n                const rawDtype = ('quantization' in weightsEntry) ?\n                    weightsEntry.quantization.dtype :\n                    weightsEntry.dtype;\n                const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n                    util.sizeFromShape(weightsEntry.shape);\n                const enqueueWeightsForFetchingFn = () => {\n                    groupIndicesToFetchMap[groupIndex] = true;\n                    if (groupWeightsToFetch[groupIndex] == null) {\n                        groupWeightsToFetch[groupIndex] = [];\n                    }\n                    groupWeightsToFetch[groupIndex].push({\n                        manifestEntry: weightsEntry,\n                        groupOffset,\n                        sizeBytes: weightsBytes\n                    });\n                };\n                if (weightNames != null) {\n                    weightNames.forEach((weightName, weightIndex) => {\n                        if (weightName === weightsEntry.name) {\n                            enqueueWeightsForFetchingFn();\n                            weightsFound[weightIndex] = true;\n                        }\n                    });\n                }\n                else {\n                    enqueueWeightsForFetchingFn();\n                }\n                allManifestWeightNames.push(weightsEntry.name);\n                groupOffset += weightsBytes;\n            });\n        });\n        if (!weightsFound.every(found => found)) {\n            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n            throw new Error(`Could not find weights in manifest with names: ` +\n                `${weightsNotFound.join(', ')}. \\n` +\n                `Manifest JSON has weights with names: ` +\n                `${allManifestWeightNames.join(', ')}.`);\n        }\n        // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n        // IDs.\n        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n            if (shouldFetch) {\n                accumulator.push(i);\n            }\n            return accumulator;\n        }, []);\n        const fetchUrls = [];\n        groupIndicesToFetch.forEach(i => {\n            manifest[i].paths.forEach(filepath => {\n                const fetchUrl = filePathPrefix +\n                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                fetchUrls.push(fetchUrl);\n            });\n        });\n        const buffers = await fetchWeightsFunction(fetchUrls);\n        const weightsTensorMap = {};\n        let bufferIndexOffset = 0;\n        groupIndicesToFetch.forEach(i => {\n            const numBuffers = manifest[i].paths.length;\n            let groupBytes = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                groupBytes += buffers[bufferIndexOffset + i].byteLength;\n            }\n            // Create a buffer for the whole group.\n            const groupBuffer = new ArrayBuffer(groupBytes);\n            const groupByteBuffer = new Uint8Array(groupBuffer);\n            let groupBufferOffset = 0;\n            for (let i = 0; i < numBuffers; i++) {\n                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n                groupByteBuffer.set(buffer, groupBufferOffset);\n                groupBufferOffset += buffer.byteLength;\n            }\n            const weightsEntries = groupWeightsToFetch[i];\n            weightsEntries.forEach(weightsEntry => {\n                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n                for (const name in nameToTensorMap) {\n                    weightsTensorMap[name] = nameToTensorMap[name];\n                }\n            });\n            bufferIndexOffset += numBuffers;\n        });\n        return weightsTensorMap;\n    };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n    constructor(path, loadOptions) {\n        this.DEFAULT_METHOD = 'POST';\n        if (loadOptions == null) {\n            loadOptions = {};\n        }\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\n        this.onProgress = loadOptions.onProgress;\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\n        if (loadOptions.fetchFunc != null) {\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\n                '`fetch` (see ' +\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n            this.fetch = loadOptions.fetchFunc;\n        }\n        else {\n            this.fetch = env().platform.fetch;\n        }\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n        if (Array.isArray(path)) {\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\n                `(actual length is ${path.length}).`);\n        }\n        this.path = path;\n        if (loadOptions.requestInit != null &&\n            loadOptions.requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = loadOptions.requestInit || {};\n    }\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n        init.body = new FormData();\n        const weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs,\n            }];\n        const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\n        if (modelArtifacts.weightData != null) {\n            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\n        }\n        const response = await this.fetch(this.path, init);\n        if (response.ok) {\n            return {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response],\n            };\n        }\n        else {\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\n                `${response.status}.`);\n        }\n    }\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n    async load() {\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n        if (!modelConfigRequest.ok) {\n            throw new Error(`Request to ${this.path} failed with status code ` +\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\n                `the model JSON of the model to load.`);\n        }\n        let modelJSON;\n        try {\n            modelJSON = await modelConfigRequest.json();\n        }\n        catch (e) {\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\n            // .pb files are mostly gone.\n            if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' +\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n                    'in favor of .json models. You can re-convert your Python ' +\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\n                    'NPM script in the tensorflow/tfjs-converter repository.';\n            }\n            else {\n                message += ' Please make sure the server is serving valid ' +\n                    'JSON for this request.';\n            }\n            throw new Error(message);\n        }\n        // We do not allow both modelTopology and weightsManifest to be missing.\n        const modelTopology = modelJSON.modelTopology;\n        const weightsManifest = modelJSON.weightsManifest;\n        if (modelTopology == null && weightsManifest == null) {\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\n                `topology or manifest for weights.`);\n        }\n        return getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n    }\n    async loadWeights(weightsManifest) {\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n        const [prefix, suffix] = parseUrl(weightPath);\n        const pathPrefix = this.weightPathPrefix || prefix;\n        const weightSpecs = getWeightSpecs(weightsManifest);\n        const fetchURLs = [];\n        const urlPromises = [];\n        for (const weightsGroup of weightsManifest) {\n            for (const path of weightsGroup.paths) {\n                if (this.weightUrlConverter != null) {\n                    urlPromises.push(this.weightUrlConverter(path));\n                }\n                else {\n                    fetchURLs.push(pathPrefix + path + suffix);\n                }\n            }\n        }\n        if (this.weightUrlConverter) {\n            fetchURLs.push(...await Promise.all(urlPromises));\n        }\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n            requestInit: this.requestInit,\n            fetchFunc: this.fetch,\n            onProgress: this.onProgress\n        });\n        return [weightSpecs, concatenateArrayBuffers(buffers)];\n    }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n    const lastSlash = url.lastIndexOf('/');\n    const lastSearchParam = url.lastIndexOf('?');\n    const prefix = url.substring(0, lastSlash);\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n    return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n    if (typeof fetch === 'undefined' &&\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n    }\n    else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        }\n        else {\n            isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n            return http(url, loadOptions);\n        }\n    }\n    return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n    return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n    return http(path, loadOptions);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nclass PassthroughLoader {\n    constructor(modelArtifacts) {\n        this.modelArtifacts = modelArtifacts;\n    }\n    load() {\n        return this.modelArtifacts;\n    }\n}\nclass PassthroughSaver {\n    constructor(saveHandler) {\n        this.saveHandler = saveHandler;\n    }\n    save(modelArtifacts) {\n        return this.saveHandler(modelArtifacts);\n    }\n}\nclass PassthroughAsync {\n    constructor(handler) {\n        if (handler.load) {\n            this.load = () => Promise.resolve(handler.load());\n        }\n        if (handler.save) {\n            this.save = (modelArtifacts) => Promise.resolve(handler.save(modelArtifacts));\n        }\n    }\n}\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandler` that simply loads the provided data.\n */\nexport function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {\n    const args = arguments;\n    return new PassthroughAsync(fromMemorySync(...args));\n}\n/**\n * Creates an IOHandler that loads model artifacts from memory.\n *\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * const model = await tf.loadLayersModel(tf.io.fromMemory(\n *     modelTopology, weightSpecs, weightData));\n * ```\n *\n * @param modelArtifacts a object containing model topology (i.e., parsed from\n *   the JSON format).\n * @param weightSpecs An array of `WeightsManifestEntry` objects describing the\n *   names, shapes, types, and quantization of the weight data. Optional.\n * @param weightData A single `ArrayBuffer` containing the weight data,\n *   concatenated in the order described by the weightSpecs. Optional.\n * @param trainingConfig Model training configuration. Optional.\n *\n * @returns A passthrough `IOHandlerSync` that simply loads the provided data.\n */\nexport function fromMemorySync(modelArtifacts, weightSpecs, weightData, trainingConfig) {\n    if (arguments.length === 1) {\n        const isModelArtifacts = modelArtifacts.modelTopology != null ||\n            modelArtifacts.weightSpecs != null;\n        if (isModelArtifacts) {\n            return new PassthroughLoader(modelArtifacts);\n        }\n        else {\n            // Legacy support: with only modelTopology.\n            // TODO(cais): Remove this deprecated API.\n            console.warn('Please call tf.io.fromMemory() with only one argument. ' +\n                'The argument should be of type ModelArtifacts. ' +\n                'The multi-argument signature of tf.io.fromMemory() has been ' +\n                'deprecated and will be removed in a future release.');\n            return new PassthroughLoader({ modelTopology: modelArtifacts });\n        }\n    }\n    else {\n        // Legacy support.\n        // TODO(cais): Remove this deprecated API.\n        console.warn('Please call tf.io.fromMemory() with only one argument. ' +\n            'The argument should be of type ModelArtifacts. ' +\n            'The multi-argument signature of tf.io.fromMemory() has been ' +\n            'deprecated and will be removed in a future release.');\n        return new PassthroughLoader({\n            modelTopology: modelArtifacts,\n            weightSpecs,\n            weightData,\n            trainingConfig\n        });\n    }\n}\n/**\n * Creates an IOHandler that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     promise that resolves to a `SaveResult`.\n */\nexport function withSaveHandler(saveHandler) {\n    return new PassthroughSaver(saveHandler);\n}\n/**\n * Creates an IOHandlerSync that passes saved model artifacts to a callback.\n *\n * ```js\n * function handleSave(artifacts) {\n *   // ... do something with the artifacts ...\n *   return {modelArtifactsInfo: {...}, ...};\n * }\n *\n * const saveResult = model.save(tf.io.withSaveHandler(handleSave));\n * ```\n *\n * @param saveHandler A function that accepts a `ModelArtifacts` and returns a\n *     `SaveResult`.\n */\nexport function withSaveHandlerSync(saveHandler) {\n    return new PassthroughSaver(saveHandler);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Importing local_storage and indexed_db is necessary for the routers to be\n// registered.\nimport './indexed_db';\nimport './local_storage';\nimport { browserFiles } from './browser_files';\nimport { browserHTTPRequest, http, isHTTPScheme } from './http';\nimport { concatenateArrayBuffers, decodeWeights, encodeWeights, getModelArtifactsForJSON, getModelArtifactsForJSONSync, getModelArtifactsInfoForJSON, getWeightSpecs } from './io_utils';\nimport { fromMemory, fromMemorySync, withSaveHandler, withSaveHandlerSync } from './passthrough';\nimport { getLoadHandlers, getSaveHandlers, registerLoadRouter, registerSaveRouter } from './router_registry';\nimport { loadWeights, weightsLoaderFactory } from './weights_loader';\nexport { copyModel, listModels, moveModel, removeModel } from './model_management';\nexport { browserFiles, browserHTTPRequest, concatenateArrayBuffers, decodeWeights, encodeWeights, fromMemory, fromMemorySync, getLoadHandlers, getModelArtifactsForJSON, getModelArtifactsForJSONSync, getModelArtifactsInfoForJSON, getSaveHandlers, getWeightSpecs, http, isHTTPScheme, loadWeights, registerLoadRouter, registerSaveRouter, weightsLoaderFactory, withSaveHandler, withSaveHandlerSync, };\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n    const inRank = inShape.length;\n    const dims = [];\n    for (let i = 0; i < inRank; i++) {\n        const dim = inRank - 1 - i;\n        const a = inShape[dim] || 1;\n        const b = outShape[outShape.length - 1 - i] || 1;\n        if (b > 1 && a === 1) {\n            dims.unshift(dim);\n        }\n    }\n    return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(inShape, outShape) {\n    const result = [];\n    for (let i = 0; i < outShape.length; i++) {\n        const inDim = inShape[inShape.length - i - 1];\n        const outAxis = outShape.length - i - 1;\n        const outDim = outShape[outAxis];\n        if (inDim == null || (inDim === 1 && outDim > 1)) {\n            result.unshift(outAxis);\n        }\n    }\n    return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n    const result = [];\n    const l = Math.max(shapeA.length, shapeB.length);\n    for (let i = 0; i < l; i++) {\n        let a = shapeA[shapeA.length - i - 1];\n        if (a == null) {\n            a = 1;\n        }\n        let b = shapeB[shapeB.length - i - 1];\n        if (b == null) {\n            b = 1;\n        }\n        if (a === 1) {\n            result.unshift(b);\n        }\n        else if (b === 1) {\n            result.unshift(a);\n        }\n        else if (a !== b) {\n            const errMsg = `Operands could not be broadcast together with shapes ` +\n                `${shapeA} and ${shapeB}.`;\n            throw Error(errMsg);\n        }\n        else {\n            result.unshift(a);\n        }\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nconst NEW_AXIS = -2;\nconst SHRINK_AXIS = -1;\nexport function assertParamsValid(input, begin, size) {\n    const inputRank = input.shape.length;\n    util.assert(inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +\n        `match the rank of the array (${inputRank}).`);\n    util.assert(inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must ` +\n        `match the rank of the array (${inputRank}).`);\n    for (let i = 0; i < inputRank; ++i) {\n        util.assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);\n    }\n}\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask) {\n    const axes = [];\n    let axis = 0;\n    while (mask > 0) {\n        if (mask & 1) {\n            axes.push(axis);\n        }\n        mask /= 2;\n        axis++;\n    }\n    return axes;\n}\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(begin, end, strides) {\n    const size = [];\n    for (let axis = 0; axis < begin.length; axis++) {\n        size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n    }\n    return size;\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\nexport function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {\n    const newStrides = [...strides];\n    for (let i = newStrides.length; i < inputShape.length; i++) {\n        newStrides.push(1);\n    }\n    for (let i = 0; i < numElidedAxes; i++) {\n        if (i === 0) {\n            newStrides[ellipsisInsertionIndex] = 1;\n        }\n        else {\n            newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */, 1 /* element to add */);\n            newStrides.pop();\n        }\n    }\n    return newStrides;\n}\nfunction unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {\n    if (normalizedAxis <= ellipsisInsertionIndex) {\n        return normalizedAxis;\n    }\n    return normalizedAxis - (numElidedAxes - 1);\n}\nfunction getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {\n    const elidedAxes = [];\n    for (let i = 0; i < numElidedAxes; i++) {\n        elidedAxes.push(ellipsisInsertionIndex + i);\n    }\n    return elidedAxes;\n}\n// Normalize the start, end and strides.\nexport function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {\n    const inputRank = inputShape.length;\n    let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);\n    if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n        const fullIndex = ellipsisAxes[0];\n        // The ellipsis applies to the masked index as well as any dimensions\n        // that are interpolated.\n        const numElidedAxes = numInterpolatedAxes + 1;\n        normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);\n        normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);\n        normalizedStrides =\n            stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n    }\n    else {\n        for (let axis = 0; axis < inputRank; axis++) {\n            normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);\n            normalizedEnd[axis] =\n                stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n            normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n        }\n    }\n    return {\n        begin: normalizedBegin,\n        end: normalizedEnd,\n        strides: normalizedStrides\n    };\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\nexport function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {\n    const newIndices = [...inputShape];\n    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n    for (let axis = 0; axis < newIndices.length; axis++) {\n        if (elidedAxes.indexOf(axis) > -1) {\n            newIndices[axis] = 0;\n        }\n        else {\n            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n            let originalValue = originalBegin[originalAxis];\n            if (beginMask & 1 << originalAxis) {\n                originalValue = 0;\n            }\n            newIndices[axis] = originalValue;\n        }\n    }\n    return newIndices;\n}\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\nexport function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {\n    const newIndices = [...inputShape];\n    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n    for (let axis = 0; axis < newIndices.length; axis++) {\n        if (elidedAxes.indexOf(axis) > -1) {\n            newIndices[axis] = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n            let originalValue = originalEnd[originalAxis];\n            if (endMask & 1 << originalAxis) {\n                originalValue = Number.MAX_SAFE_INTEGER;\n            }\n            newIndices[axis] = originalValue;\n        }\n    }\n    for (let i = 0; i < newIndices.length; i++) {\n        // Handle negative indices\n        const axisSize = inputShape[i];\n        if (newIndices[i] < 0) {\n            newIndices[i] += axisSize;\n        }\n        newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);\n    }\n    return newIndices;\n}\nexport function stridesForAxis(strides, axis, ellipsisMask) {\n    let stride = strides[axis];\n    if (ellipsisMask & (1 << axis) || stride == null) {\n        stride = 1;\n    }\n    return stride;\n}\nexport function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {\n    // Begin with the specified index\n    let start = startIndices[axis];\n    const stride = strides[axis] || 1;\n    // Check the axis bit from right of masked axes, or the begin index is not set\n    // for the axis.\n    if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n        if (stride > 0) {\n            // Forward iteration - use the first element. These values will get\n            // clamped below (Note: We could have set them to 0 and axis_size-1, but\n            // use lowest() and max() to maintain symmetry with StopForAxis())\n            start = Number.MIN_SAFE_INTEGER;\n        }\n        else {\n            // Backward iteration - use the last element.\n            start = Number.MAX_SAFE_INTEGER;\n        }\n    }\n    // Handle negative indices\n    const axisSize = inputShape[axis];\n    if (start < 0) {\n        start += axisSize;\n    }\n    // Clamping\n    start = util.clamp(0, start, axisSize - 1);\n    return start;\n}\nexport function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {\n    // Begin with the specified index\n    let stop = stopIndices[axis];\n    const stride = strides[axis] || 1;\n    // Check the axis bit from right of masked axes, or if the stop index is not\n    // set for this axis.\n    if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {\n        if (stride > 0) {\n            // Forward iteration - use the last element. These values will get\n            // clamped below\n            stop = Number.MAX_SAFE_INTEGER;\n        }\n        else {\n            // Backward iteration - use the first element.\n            stop = Number.MIN_SAFE_INTEGER;\n        }\n    }\n    // Handle negative indices\n    const axisSize = inputShape[axis];\n    if (stop < 0) {\n        stop += axisSize;\n    }\n    // Clamping\n    // Because the end index points one past the last element, we need slightly\n    // different clamping ranges depending on the direction.\n    if (stride > 0) {\n        // Forward iteration\n        stop = util.clamp(0, stop, axisSize);\n    }\n    else {\n        // Backward iteration\n        stop = util.clamp(-1, stop, axisSize - 1);\n    }\n    return stop;\n}\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(shape, begin, size) {\n    // Index of the first axis that has size > 1.\n    let firstNonOneAxis = size.length;\n    for (let i = 0; i < size.length; i++) {\n        if (size[i] > 1) {\n            firstNonOneAxis = i;\n            break;\n        }\n    }\n    for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n        if (begin[i] > 0 || size[i] !== shape[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function computeFlatOffset(begin, strides) {\n    let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n    for (let i = 0; i < begin.length - 1; i++) {\n        flatOffset += begin[i] * strides[i];\n    }\n    return flatOffset;\n}\nexport function parseSliceParams(x, begin, size) {\n    // The following logic allows for more ergonomic calls.\n    let begin_;\n    const xRank = x.shape.length;\n    if (typeof begin === 'number') {\n        begin_ = [begin, ...new Array(xRank - 1).fill(0)];\n    }\n    else if (begin.length < xRank) {\n        begin_ = begin.concat(new Array(xRank - begin.length).fill(0));\n    }\n    else {\n        begin_ = begin.slice();\n    }\n    begin_.forEach(d => {\n        util.assert(d !== -1, () => 'slice() does not support negative begin indexing.');\n    });\n    let size_;\n    if (size == null) {\n        size_ = new Array(xRank).fill(-1);\n    }\n    else if (typeof size === 'number') {\n        size_ = [size, ...new Array(xRank - 1).fill(-1)];\n    }\n    else if (size.length < xRank) {\n        size_ = size.concat(new Array(xRank - size.length).fill(-1));\n    }\n    else {\n        size_ = size;\n    }\n    size_ = size_.map((d, i) => {\n        if (d >= 0) {\n            return d;\n        }\n        else {\n            util.assert(d === -1, () => `Negative size values should be exactly -1 but got ` +\n                `${d} for the slice() size at index ${i}.`);\n            return x.shape[i] - begin_[i];\n        }\n    });\n    return [begin_, size_];\n}\n// Convert the slicing specification from a sparse representation to a dense\n// representation. This means that all ellipses and newaxis are expanded out.\nexport function sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {\n    let stridesNonNull;\n    if (strides == null) {\n        stridesNonNull = new Array(begin.length);\n        stridesNonNull.fill(1);\n    }\n    else {\n        stridesNonNull = strides;\n    }\n    // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask\n    // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power\n    // of 2. When i is a power of 2, i & (i - 1) is always 0.\n    // Also ref:\n    // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2\n    if (ellipsisMask != null && (ellipsisMask & (ellipsisMask - 1)) !== 0) {\n        throw new Error('Multiple ellipses in slice is not allowed.');\n    }\n    // Step 1: Account for ellipsis and new axis.\n    // Check for ellipsis and count how many non-newaxis there are after.\n    let ellipsisSeen = false;\n    const sparseSpec = {\n        dims: stridesNonNull.length,\n        numAddAxisAfterEllipsis: 0,\n        begin: begin.slice(),\n        end: end.slice(),\n        strides: stridesNonNull.slice(),\n        beginMask,\n        endMask,\n        ellipsisMask,\n        newAxisMask,\n        shrinkAxisMask\n    };\n    for (let i = 0; i < sparseSpec.dims; i++) {\n        if (ellipsisSeen && ((1 << i) & newAxisMask) !== 0) {\n            sparseSpec.numAddAxisAfterEllipsis++;\n        }\n        if ((1 << i) & ellipsisMask) {\n            ellipsisSeen = true;\n        }\n    }\n    // If no ellipsis insert one at the end.\n    if (!ellipsisSeen) {\n        sparseSpec.ellipsisMask |= (1 << sparseSpec.dims);\n        sparseSpec.dims++; // this effects loop iteration below\n    }\n    // Step 2: Make a sparse spec into a full index spec.\n    //\n    // The sparse spec deos not correspond to the number of dimensions.\n    // Make a dense spec that cooresponds to the number of dimensions.\n    //\n    // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to\n    // produce the missing beginMask for the first two dimensions i.e. from\n    // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),\n    // endMask = 7 (111).\n    const denseSpec = {\n        dims: xShape.length,\n        beginMask: 0,\n        endMask: 0,\n        beginValid: false,\n        endValid: false\n    };\n    buildDenseSpec(sparseSpec, denseSpec);\n    // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit\n    // and bounds check.\n    let isIdentity = true;\n    let sliceDim0 = true;\n    let isSimpleSlice = true;\n    const processingShape = [];\n    const finalShape = [];\n    for (let i = 0; i < xShape.length; ++i) {\n        if (denseSpec.strides[i] === 0) {\n            throw Error(`strides[${i}] must be non-zero`);\n        }\n        const shrinkI = !!(denseSpec.shrinkAxisMask & (1 << i));\n        const dimI = xShape[i];\n        if (dimI === -1) {\n            processingShape.push(shrinkI ? 1 : -1);\n            continue;\n        }\n        const masks = [denseSpec.beginMask & (1 << i), denseSpec.endMask & (1 << i)];\n        const validRange = [\n            denseSpec.strides[i] > 0 ? 0 : -1,\n            denseSpec.strides[i] > 0 ? dimI : dimI - 1\n        ];\n        if (shrinkI && denseSpec.strides[i] <= 0) {\n            throw Error('only stride 1 allowed on non-range indexing.');\n        }\n        isSimpleSlice = isSimpleSlice && (denseSpec.strides[i] === 1);\n        const beginAndEndMasked = !!((denseSpec.beginMask & (1 << i)) && (denseSpec.endMask & (1 << i)));\n        if (denseSpec.beginValid && denseSpec.endValid) {\n            if (shrinkI) {\n                // If we are shrinking, the end index is now possibly incorrect. In\n                // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.\n                // and canonical puts these to n-1 and 0, which implies a degenerate\n                // interval. Fortunately, it is now safe to re-create end as begin + 1.\n                const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] :\n                    denseSpec.begin[i];\n                denseSpec.begin[i] = xFwd;\n                denseSpec.end[i] = denseSpec.begin[i] + 1;\n                if (xFwd < 0 || xFwd >= dimI) {\n                    throw Error(`slice index ${denseSpec.begin[i]} of dimension ${i} out of bounds.`);\n                }\n            }\n            else {\n                denseSpec.begin[i] = canonical(denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks, validRange);\n                denseSpec.end[i] = canonical(denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);\n            }\n            // Update optimization values\n            const takeAllInDimension = denseSpec.strides[i] === 1 &&\n                denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;\n            isIdentity = isIdentity && takeAllInDimension;\n            sliceDim0 = sliceDim0 &&\n                ((i === 0 && denseSpec.strides[i] === 1) || takeAllInDimension);\n        }\n        else {\n            isIdentity =\n                isIdentity && ((denseSpec.strides[i] === 1) && beginAndEndMasked);\n            sliceDim0 = sliceDim0 &&\n                ((i === 0 && denseSpec.strides[i] === 1) || beginAndEndMasked);\n        }\n        // Compute the processing shape (the intermediate Eigen will produce)\n        let intervalLength;\n        let knownInterval = false;\n        if (denseSpec.beginValid && denseSpec.endValid) {\n            intervalLength = denseSpec.end[i] - denseSpec.begin[i];\n            knownInterval = true;\n        }\n        else if (shrinkI) {\n            // The dimension is still known as 1 for the processingShape, but will be\n            // discarded for the final shape.\n            intervalLength = 1;\n            knownInterval = true;\n        }\n        else if (beginAndEndMasked) {\n            // Even if we don't have values for begin or end, we do know that this\n            // dimension covers the whole interval. If we have shape information for\n            // this dimension, that tells us the interval length.\n            if (dimI >= 0) {\n                if (denseSpec.strides[i] < 0) {\n                    intervalLength = -dimI;\n                }\n                else {\n                    intervalLength = dimI;\n                }\n                knownInterval = true;\n            }\n        }\n        if (knownInterval) {\n            let sizeI;\n            // Hold zero if the interval is degenerate, otherwise account for\n            // remainder\n            if (intervalLength === 0 ||\n                ((intervalLength < 0) !== (denseSpec.strides[i] < 0))) {\n                sizeI = 0;\n            }\n            else {\n                sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) +\n                    (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);\n            }\n            processingShape.push(sizeI);\n        }\n        else {\n            processingShape.push(-1);\n        }\n    }\n    // Step 4: Compute the final shape\n    //\n    // newAxis will increase dimension by 1 (with a one-size dimension)\n    // slices like foo[3, ...] will reduce dimension by 1.\n    // This cannot be done earlier, because it depends on Step 3.\n    for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length; ++denseDim) {\n        const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];\n        if (gatherIndex >= 0) {\n            finalShape.push(processingShape[gatherIndex]);\n        }\n        else if (gatherIndex === NEW_AXIS) {\n            finalShape.push(1);\n        }\n    }\n    const finalShapeSparse = finalShape.filter((dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);\n    return {\n        finalShapeSparse,\n        finalShape,\n        isIdentity,\n        sliceDim0,\n        isSimpleSlice,\n        begin: denseSpec.begin,\n        end: denseSpec.end,\n        strides: denseSpec.strides\n    };\n}\nfunction buildDenseSpec(sparse, dense) {\n    dense.beginMask = 0;\n    dense.endMask = 0;\n    dense.shrinkAxisMask = 0;\n    let fullIndex = 0;\n    dense.beginValid = sparse.begin != null;\n    dense.endValid = sparse.end != null;\n    dense.begin = new Array(dense.dims);\n    dense.end = new Array(dense.dims);\n    dense.strides = new Array(dense.dims);\n    dense.finalShapeGatherIndices = [];\n    dense.finalShapeGatherIndicesSparse = [];\n    dense.inputShapeGatherIndicesSparse = new Array(dense.dims);\n    for (let i = 0; i < sparse.dims; i++) {\n        if ((1 << i) & sparse.ellipsisMask) {\n            // Only the bit that has ellipsis will fall in this condition.\n            // Expand the ellipsis into the appropriate indices\n            // Note: this only works because we guaranteed one ellipsis.\n            const nextIndex = Math.min(dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis, dense.dims);\n            for (; fullIndex < nextIndex; fullIndex++) {\n                // newAxis aren't real axis so you have to skip.\n                dense.begin[fullIndex] = 0;\n                dense.end[fullIndex] = 0;\n                dense.strides[fullIndex] = 1;\n                dense.beginMask |= (1 << fullIndex);\n                dense.endMask |= (1 << fullIndex);\n                dense.finalShapeGatherIndices.push(fullIndex);\n                dense.finalShapeGatherIndicesSparse.push(-1);\n                dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n            }\n        }\n        else if ((1 << i) & sparse.newAxisMask) {\n            // Only the bit that has newAxis will fall in this condition.\n            dense.finalShapeGatherIndices.push(NEW_AXIS);\n            dense.finalShapeGatherIndicesSparse.push(-1);\n        }\n        else {\n            if (fullIndex === dense.begin.length) {\n                throw Error(`Index out of range using input dim ${fullIndex}; input ` +\n                    `has only ${dense.dims} dims, ${dense.begin.length}.`);\n            }\n            // Gather slicing spec into appropriate index.\n            if (sparse.begin != null) {\n                dense.begin[fullIndex] = sparse.begin[i];\n            }\n            if (sparse.end != null) {\n                dense.end[fullIndex] = sparse.end[i];\n            }\n            dense.strides[fullIndex] = sparse.strides[i];\n            if (sparse.beginMask & (1 << i)) {\n                dense.beginMask |= (1 << fullIndex);\n            }\n            if (sparse.endMask & (1 << i)) {\n                dense.endMask |= (1 << fullIndex);\n            }\n            // If shrink, record where to get the dimensionality from (i.e. newAxis)\n            // creates a fake 1 size dimension. Also remember shrink axis (now in\n            // dense form) so we can ignore dense.end below.\n            if (sparse.shrinkAxisMask & (1 << i)) {\n                dense.finalShapeGatherIndices.push(SHRINK_AXIS);\n                dense.finalShapeGatherIndicesSparse.push(-1);\n                dense.shrinkAxisMask |= (1 << fullIndex);\n            }\n            else {\n                dense.finalShapeGatherIndices.push(fullIndex);\n                // Remember that where in the sparse shape the dense dim comes from.\n                dense.finalShapeGatherIndicesSparse.push(i);\n            }\n            dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n            fullIndex++;\n        }\n    }\n}\nfunction canonical(x, c, strideI, dimI, masks, validRange) {\n    if (masks[c]) {\n        return strideI > 0 ? validRange[c] : validRange[(c + 1) & 1];\n    }\n    else {\n        const xFwd = x < 0 ? dimI + x : x; // make negative indices positive\n        return xFwd < validRange[0] ? validRange[0] :\n            xFwd > validRange[1] ? validRange[1] : xFwd;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Reshape } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Reshapes a `tf.Tensor` to a given shape.\n *\n * Given an input tensor, returns a new tensor with the same values as the\n * input tensor with shape `shape`.\n *\n * If one component of shape is the special value -1, the size of that\n * dimension is computed so that the total size remains constant. In\n * particular, a shape of [-1] flattens into 1-D. At most one component of\n * shape can be -1.\n *\n * If shape is 1-D or higher, then the operation returns a tensor with shape\n * shape filled with the values of tensor. In this case, the number of\n * elements implied by shape must be the same as the number of elements in\n * tensor.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * x.reshape([2, 2]).print();\n * ```\n *\n * @param x The input tensor to be reshaped.\n * @param shape An array of integers defining the output tensor shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction reshape_(x, shape) {\n    const $x = convertToTensor(x, 'x', 'reshape', 'string_or_numeric');\n    const inputs = { x: $x };\n    const attrs = { shape };\n    return ENGINE.runKernel(Reshape, inputs, attrs);\n}\nexport const reshape = op({ reshape_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { clone } from './clone';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Broadcast an array to a compatible shape NumPy-style.\n *\n * The tensor's shape is compared to the broadcast shape from end to beginning.\n * Ones are prepended to the tensor's shape until it has the same length as\n * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is\n * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then\n * the input tensor is tiled N times along that axis (using tf.tile).\n *\n * @param input The tensor that is to be broadcasted.\n * @param shape The input is to be broadcast to this shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction broadcastTo_(x, shape) {\n    let input = convertToTensor(x, 'broadcastTo', 'x');\n    const xShape = input.shape;\n    if (shape.some(d => !(d > 0) || d % 1 !== 0)) {\n        throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);\n    }\n    if (shape.length < input.rank) {\n        throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);\n    }\n    if (shape.length > input.rank) {\n        const newShape = input.shape.slice();\n        while (newShape.length < shape.length) {\n            newShape.unshift(1);\n        }\n        input = reshape(input, newShape);\n    }\n    const inputShape = input.shape;\n    const reps = Array.from(shape);\n    for (let i = shape.length - 1; i >= 0; i--) {\n        if (inputShape[i] === shape[i]) {\n            reps[i] = 1;\n        }\n        else if (input.shape[i] !== 1) {\n            throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);\n        }\n    }\n    const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);\n    if (axes.length === 0) {\n        return clone(input);\n    }\n    // TODO call broadcastTo kernel directly once backends implement broadcstTo\n    const inputs = { x: input };\n    const attrs = { reps };\n    return ENGINE.runKernel(Tile, inputs, attrs);\n}\nexport const broadcastTo = op({ broadcastTo_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { assert, assertNonNegativeIntegerDimensions, flatten, inferDtype, isTypedArray, sizeFromShape, toTypedArray } from '../util';\n/** This is shared code across all tensor creation methods. */\nexport function makeTensor(values, shape, inferredShape, dtype) {\n    if (dtype == null) {\n        dtype = inferDtype(values);\n    }\n    if (dtype === 'complex64') {\n        throw new Error(`Cannot construct a complex64 tensor directly. ` +\n            `Please use tf.complex(real, imag).`);\n    }\n    if (!isTypedArray(values) && !Array.isArray(values) &&\n        typeof values !== 'number' && typeof values !== 'boolean' &&\n        typeof values !== 'string') {\n        throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +\n            'an array of numbers/booleans/strings, or a TypedArray');\n    }\n    if (shape != null) {\n        assertNonNegativeIntegerDimensions(shape);\n        const providedSize = sizeFromShape(shape);\n        const inferredSize = sizeFromShape(inferredShape);\n        assert(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n        for (let i = 0; i < inferredShape.length; ++i) {\n            const inferred = inferredShape[i];\n            const flatDimsDontMatch = i === inferredShape.length - 1 ?\n                inferred !== sizeFromShape(shape.slice(i)) :\n                true;\n            assert(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` +\n                `(${inferredShape}) does not match the provided ` +\n                `shape (${shape}). `);\n        }\n    }\n    if (!isTypedArray(values) && !Array.isArray(values)) {\n        values = [values];\n    }\n    shape = shape || inferredShape;\n    values = dtype !== 'string' ?\n        toTypedArray(values, dtype) :\n        flatten(values, [], true);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isTypedArray } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.scalar` as it makes the code more readable.\n *\n * ```js\n * tf.scalar(3.14).print();\n * ```\n *\n * @param value The value of the scalar.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function scalar(value, dtype) {\n    if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&\n        dtype !== 'complex64') {\n        throw new Error('Error creating a new Scalar: value must be a primitive ' +\n            '(number|boolean|string)');\n    }\n    if (dtype === 'string' && isTypedArray(value) &&\n        !(value instanceof Uint8Array)) {\n        throw new Error('When making a scalar from encoded string, ' +\n            'the value must be `Uint8Array`.');\n    }\n    const shape = [];\n    const inferredShape = [];\n    return makeTensor(value, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Complex } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Converts two real numbers to a complex number.\n *\n * Given a tensor `real` representing the real part of a complex number, and a\n * tensor `imag` representing the imaginary part of a complex number, this\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\n * where r represents the real part and i represents the imag part.\n *\n * The input tensors real and imag must have the same shape.\n *\n * ```js\n * const real = tf.tensor1d([2.25, 3.25]);\n * const imag = tf.tensor1d([4.75, 5.75]);\n * const complex = tf.complex(real, imag);\n *\n * complex.print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction complex_(real, imag) {\n    const $real = convertToTensor(real, 'real', 'complex');\n    const $imag = convertToTensor(imag, 'imag', 'complex');\n    util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +\n        `must match in call to tf.complex().`);\n    const inputs = { real: $real, imag: $imag };\n    return ENGINE.runKernel(Complex, inputs);\n}\nexport const complex = op({ complex_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { makeZerosTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\n/**\n * Creates a `tf.Tensor` with all elements set to 0.\n *\n * ```js\n * tf.zeros([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Can\n *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function zeros(shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(shape, 'float32');\n        const imag = zeros(shape, 'float32');\n        return complex(real, imag);\n    }\n    const values = makeZerosTypedArray(sizeFromShape(shape), dtype);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Concat } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport { assert } from '../util';\nimport { clone } from './clone';\nimport { op } from './operation';\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concatenate along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction concat_(tensors, axis = 0) {\n    assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n    const $tensors = convertToTensorArray(tensors, 'tensors', 'concat', 'string_or_numeric');\n    if ($tensors[0].dtype === 'complex64') {\n        $tensors.forEach(tensor => {\n            if (tensor.dtype !== 'complex64') {\n                throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n            }\n        });\n    }\n    if ($tensors.length === 1) {\n        return clone($tensors[0]);\n    }\n    const inputs = $tensors;\n    const attr = { axis };\n    return ENGINE.runKernel(Concat, inputs, attr);\n}\nexport const concat = op({ concat_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Imag } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the imaginary part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the imaginary part of each element in input considered as a complex number.\n * If input is real, a tensor of all zeros is returned.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.imag(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction imag_(input) {\n    const $input = convertToTensor(input, 'input', 'imag');\n    const inputs = { input: $input };\n    return ENGINE.runKernel(Imag, inputs);\n}\nexport const imag = op({ imag_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Real } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Returns the real part of a complex (or real) tensor.\n *\n * Given a tensor input, this operation returns a tensor of type float that is\n * the real part of each element in input considered as a complex number.\n *\n * If the input is real, it simply makes a clone.\n *\n * ```js\n * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\n * tf.real(x).print();\n * ```\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction real_(input) {\n    const $input = convertToTensor(input, 'input', 'real');\n    const inputs = { input: $input };\n    return ENGINE.runKernel(Real, inputs);\n}\nexport const real = op({ real_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Slice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\n * and is of size `size`.\n *\n * Also available are stricter rank-specific methods with the same signature\n * as this method that assert that `x` is of the given rank:\n *   - `tf.slice1d`\n *   - `tf.slice2d`\n *   - `tf.slice3d`\n *   - `tf.slice4d`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.slice([1], [2]).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * x.slice([1, 0], [1, 2]).print();\n * ```\n * @param x The input `tf.Tensor` to slice from.\n * @param begin The coordinates to start the slice from. The length can be\n *     less than the rank of x - the rest of the axes will have implicit 0 as\n *     start. Can also be a single number, in which case it specifies the\n *     first axis.\n * @param size The size of the slice. The length can be less than the rank of\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\n *     the rest of the dimensions in the axis. Can also be a single number,\n *     in which case it specifies the size of the first axis.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction slice_(x, begin, size) {\n    const $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');\n    if ($x.rank === 0) {\n        throw new Error('Slicing scalar is not possible');\n    }\n    const inputs = { x: $x };\n    const attrs = { begin, size };\n    return ENGINE.runKernel(Slice, inputs, attrs);\n}\nexport const slice = op({ slice_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SplitV } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * Can contain one -1 indicating that dimension is to be inferred.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction split_(x, numOrSizeSplits, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'split');\n    const inputs = { x: $x };\n    const attr = { numOrSizeSplits, axis };\n    return ENGINE.runKernel(SplitV, inputs, attr);\n}\nexport const split = op({ split_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ZerosLike } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\n * given tensor.\n *\n * ```js\n * const x = tf.tensor([1, 2]);\n * tf.zerosLike(x).print();\n * ```\n *\n * @param x The tensor of required shape.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction zerosLike_(x) {\n    const $x = convertToTensor(x, 'x', 'zerosLike');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(ZerosLike, inputs);\n}\nexport const zerosLike = op({ zerosLike_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction fft_(input) {\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` +\n        `but got ${input.dtype}.`);\n    const inputs = { input };\n    return ENGINE.runKernel(FFT, inputs);\n}\nexport const fft = op({ fft_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../../util';\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { split } from '../split';\nimport { zeros } from '../zeros';\nimport { zerosLike } from '../zeros_like';\nimport { fft } from './fft';\n/**\n * Real value input fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n *\n * real.rfft().print();\n * ```\n * @param input The real value input to compute an rfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction rfft_(input, fftLength) {\n    assert(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);\n    let innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    let adjustedInput;\n    if (fftLength != null && fftLength < innerDimensionSize) {\n        // Need to crop\n        const begin = input.shape.map(v => 0);\n        const size = input.shape.map(v => v);\n        size[input.shape.length - 1] = fftLength;\n        adjustedInput = slice(input, begin, size);\n        innerDimensionSize = fftLength;\n    }\n    else if (fftLength != null && fftLength > innerDimensionSize) {\n        // Need to pad with zeros\n        const zerosShape = input.shape.map(v => v);\n        zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;\n        adjustedInput = concat([input, zeros(zerosShape)], input.shape.length - 1);\n        innerDimensionSize = fftLength;\n    }\n    else {\n        adjustedInput = input;\n    }\n    // Complement the input with zero imaginary numbers.\n    const zerosInput = zerosLike(adjustedInput);\n    const complexInput = reshape(complex(adjustedInput, zerosInput), [batch, innerDimensionSize]);\n    const ret = fft(complexInput);\n    // Exclude complex conjugations. These conjugations are put symmetrically.\n    const half = Math.floor(innerDimensionSize / 2) + 1;\n    const realValues = real(ret);\n    const imagValues = imag(ret);\n    const realComplexConjugate = split(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);\n    const imagComplexConjugate = split(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);\n    const outputShape = adjustedInput.shape.slice();\n    outputShape[adjustedInput.shape.length - 1] = half;\n    return reshape(complex(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);\n}\nexport const rfft = op({ rfft_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { IFFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input) {\n    assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n        `but got ${input.dtype}.`);\n    const inputs = { input };\n    return ENGINE.runKernel(IFFT, inputs);\n}\nexport const ifft = op({ ifft_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Multiply } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n *\n * We also expose `tf.mulStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([2, 3, 4, 5]);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n *\n * ```js\n * // Broadcast mul a with b.\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.scalar(5);\n *\n * a.mul(b).print();  // or tf.mul(a, b)\n * ```\n * @param a The first tensor to multiply.\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction mul_(a, b) {\n    let $a = convertToTensor(a, 'a', 'mul');\n    let $b = convertToTensor(b, 'b', 'mul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Multiply, inputs);\n}\nexport const mul = op({ mul_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Reverse } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Reverses a `tf.Tensor` along a specified axis.\n *\n * Also available are stricter rank-specific methods that assert that `x` is\n * of the given rank:\n *   - `tf.reverse1d`\n *   - `tf.reverse2d`\n *   - `tf.reverse3d`\n *   - `tf.reverse4d`\n *\n * Except `tf.reverse1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.reverse().print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.reverse(axis).print();\n * ```\n * @param x The input tensor to be reversed.\n * @param axis The set of dimensions to reverse. Must be in the\n *     range [-rank(x), rank(x)). Defaults to all axes.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction reverse_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'reverse');\n    const inputs = { x: $x };\n    const attrs = { dims: axis };\n    return ENGINE.runKernel(Reverse, inputs, attrs);\n}\nexport const reverse = op({ reverse_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { reverse } from '../reverse';\nimport { scalar } from '../scalar';\nimport { slice } from '../slice';\nimport { ifft } from './ifft';\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input) {\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = input.size / innerDimensionSize;\n    let ret;\n    if (innerDimensionSize <= 2) {\n        const complexInput = reshape(input, [batch, innerDimensionSize]);\n        ret = ifft(complexInput);\n    }\n    else {\n        // The length of unique components of the DFT of a real-valued signal\n        // is 2 * (input_len - 1)\n        const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n        const realInput = reshape(real(input), [batch, innerDimensionSize]);\n        const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n        const realConjugate = reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n        const imagConjugate = mul(reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));\n        const r = concat([realInput, realConjugate], 1);\n        const i = concat([imagInput, imagConjugate], 1);\n        const complexInput = reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n        ret = ifft(complexInput);\n    }\n    ret = real(ret);\n    // reshape the result if the input is 3D tensor.\n    if (input.rank === 3 && input.shape[0] !== 0) {\n        const temp = ret;\n        const batch = input.shape[0];\n        ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n        temp.dispose();\n    }\n    return ret;\n}\nexport const irfft = op({ irfft_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor1d` as it makes the code more readable.\n *\n * ```js\n * tf.tensor1d([1, 2, 3]).print();\n * ```\n *\n * @param values The values of the tensor. Can be array of numbers,\n *     or a `TypedArray`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor1d(values, dtype) {\n    assertNonNull(values);\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 1) {\n        throw new Error('tensor1d() requires values to be a flat/TypedArray');\n    }\n    const shape = null;\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from './tensor1d';\nexport function enclosingPowerOfTwo(value) {\n    // Return 2**N for integer N such that 2**N >= value.\n    return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\nexport function cosineWindow(windowLength, a, b) {\n    const even = 1 - windowLength % 2;\n    const newValues = new Float32Array(windowLength);\n    for (let i = 0; i < windowLength; ++i) {\n        const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n        newValues[i] = a - b * Math.cos(cosArg);\n    }\n    return tensor1d(newValues, 'float32');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from '../operation';\nimport { cosineWindow } from '../signal_ops_util';\n/**\n * Generate a hamming window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hammingWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hammingWindow_(windowLength) {\n    return cosineWindow(windowLength, 0.54, 0.46);\n}\nexport const hammingWindow = op({ hammingWindow_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from '../operation';\nimport { cosineWindow } from '../signal_ops_util';\n/**\n * Generate a Hann window.\n *\n * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows\n *\n * ```js\n * tf.signal.hannWindow(10).print();\n * ```\n * @param The length of window\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction hannWindow_(windowLength) {\n    return cosineWindow(windowLength, 0.5, 0.5);\n}\nexport const hannWindow = op({ hannWindow_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Fill } from '../kernel_names';\n/**\n * Creates a `tf.Tensor` filled with a scalar value.\n *\n * ```js\n * tf.fill([2, 2], 4).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param value The scalar value to fill the tensor with.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n * 'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction fill(shape, value, dtype) {\n    const attrs = { shape, value, dtype };\n    return ENGINE.runKernel(Fill, {}, attrs);\n}\nexport { fill };\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor2d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor2d([[1, 2], [3, 4]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided, it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor2d(values, shape, dtype) {\n    assertNonNull(values);\n    if (shape != null && shape.length !== 2) {\n        throw new Error('tensor2d() requires shape to have two numbers');\n    }\n    const inferredShape = inferShape(values, dtype);\n    if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n        throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');\n    }\n    if (inferredShape.length === 1 && shape == null) {\n        throw new Error('tensor2d() requires shape to be provided when `values` ' +\n            'are a flat/TypedArray');\n    }\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue A number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {\n    let start = 0;\n    const output = [];\n    while (start + frameLength <= signal.size) {\n        output.push(slice(signal, start, frameLength));\n        start += frameStep;\n    }\n    if (padEnd) {\n        while (start < signal.size) {\n            const padLen = (start + frameLength) - signal.size;\n            const pad = concat([\n                slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n            ]);\n            output.push(pad);\n            start += frameStep;\n        }\n    }\n    if (output.length === 0) {\n        return tensor2d([], [0, frameLength]);\n    }\n    return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = op({ frame_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { enclosingPowerOfTwo } from '../signal_ops_util';\nimport { rfft } from '../spectral/rfft';\nimport { frame } from './frame';\nimport { hannWindow } from './hann_window';\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(signal, frameLength, frameStep, fftLength, windowFn = hannWindow) {\n    if (fftLength == null) {\n        fftLength = enclosingPowerOfTwo(frameLength);\n    }\n    const framedSignal = frame(signal, frameLength, frameStep);\n    const windowedSignal = mul(framedSignal, windowFn(frameLength));\n    return rfft(windowedSignal, fftLength);\n}\nexport const stft = op({ stft_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { CropAndResize } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the `boxInd[i]`th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(image, boxes, boxInd, cropSize, method = 'bilinear', extrapolationValue = 0) {\n    const $image = convertToTensor(image, 'image', 'cropAndResize');\n    const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n    const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n    const numBoxes = $boxes.shape[0];\n    util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n        `but had shape ${$boxes.shape}.`);\n    util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n        `length ${cropSize.length}.`);\n    util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n    util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);\n    const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };\n    const attrs = { method, extrapolationValue, cropSize };\n    const res = ENGINE.runKernel(CropAndResize, inputs, attrs);\n    return res;\n}\nexport const cropAndResize = op({ cropAndResize_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FlipLeftRight } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Flips the image left to right. Currently available in the CPU, WebGL, and\n * WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n */\n/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */\nfunction flipLeftRight_(image) {\n    const $image = convertToTensor(image, 'image', 'flipLeftRight', 'float32');\n    util.assert($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    const inputs = { image: $image };\n    const res = ENGINE.runKernel(FlipLeftRight, inputs, {});\n    return res;\n}\nexport const flipLeftRight = op({ flipLeftRight_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's `i`th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the `i`th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction tile_(x, reps) {\n    const $x = convertToTensor(x, 'x', 'tile', 'string_or_numeric');\n    util.assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of reps ${reps}.`);\n    const inputs = { x: $x };\n    const attrs = { reps };\n    return ENGINE.runKernel(Tile, inputs, attrs);\n}\nexport const tile = op({ tile_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { tile } from '../tile';\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction grayscaleToRGB_(image) {\n    const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n    const lastDimsIdx = $image.rank - 1;\n    const lastDims = $image.shape[lastDimsIdx];\n    util.assert($image.rank >= 2, () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +\n        `but got rank ${$image.rank}.`);\n    util.assert(lastDims === 1, () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +\n        `should be size 1, but got size ${lastDims}.`);\n    const reps = new Array($image.rank);\n    reps.fill(1, 0, lastDimsIdx);\n    reps[lastDimsIdx] = 3;\n    return tile($image, reps);\n}\nexport const grayscaleToRGB = op({ grayscaleToRGB_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { RotateWithOffset } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Rotates the input image tensor counter-clockwise with an optional offset\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param radians The amount of rotation.\n * @param fillValue The value to fill in the empty space leftover\n *     after rotation. Can be either a single grayscale value (0-255), or an\n *     array of three numbers `[red, green, blue]` specifying the red, green,\n *     and blue channels. Defaults to `0` (black).\n * @param center The center of rotation. Can be either a single value (0-1), or\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\n *     the image around its center).\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {\n    const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\n    util.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    const inputs = { image: $image };\n    const attrs = { radians, fillValue, center };\n    const res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);\n    return res;\n}\nexport const rotateWithOffset = op({ rotateWithOffset_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    if (iouThreshold == null) {\n        iouThreshold = 0.5;\n    }\n    if (scoreThreshold == null) {\n        scoreThreshold = Number.NEGATIVE_INFINITY;\n    }\n    if (softNmsSigma == null) {\n        softNmsSigma = 0.0;\n    }\n    const numBoxes = boxes.shape[0];\n    maxOutputSize = Math.min(maxOutputSize, numBoxes);\n    util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n    util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n    util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n    util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n    util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n        `but was ${scores.shape[0]}`);\n    util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n    return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n}\nexport { nonMaxSuppSanityCheck };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV3 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression', 'float32');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression', 'float32');\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n    maxOutputSize = inputs.maxOutputSize;\n    iouThreshold = inputs.iouThreshold;\n    scoreThreshold = inputs.scoreThreshold;\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold };\n    return ENGINE.runKernel(NonMaxSuppressionV3, { boxes: $boxes, scores: $scores }, attrs);\n}\nexport const nonMaxSuppression = op({ nonMaxSuppression_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert(arr, element, comparator) {\n    const index = binarySearch(arr, element, comparator);\n    const insertionPoint = index < 0 ? -(index + 1) : index;\n    arr.splice(insertionPoint, 0, element);\n}\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\nexport function binarySearch(arr, target, comparator) {\n    return binarySearch_(arr, target, comparator || defaultComparator);\n}\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nfunction defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction binarySearch_(arr, target, comparator) {\n    let left = 0;\n    let right = arr.length;\n    let middle = 0;\n    let found = false;\n    while (left < right) {\n        middle = left + ((right - left) >>> 1);\n        const compareResult = comparator(target, arr[middle]);\n        if (compareResult > 0) {\n            left = middle + 1;\n        }\n        else {\n            right = middle;\n            // If compareResult is 0, the value is found. We record it is found,\n            // and then keep looking because there may be duplicate.\n            found = !compareResult;\n        }\n    }\n    return found ? left : -left - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { binaryInsert } from './non_max_suppression_util';\nexport function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */);\n}\nexport function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true\n    /* returnValidOutputs */ );\n}\nexport function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);\n}\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {\n    // The list is sorted in ascending order, so that we can always pop the\n    // candidate with the largest score in O(1) time.\n    const candidates = [];\n    for (let i = 0; i < scores.length; i++) {\n        if (scores[i] > scoreThreshold) {\n            candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });\n        }\n    }\n    candidates.sort(ascendingComparator);\n    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n    // before.\n    const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n    const selectedIndices = [];\n    const selectedScores = [];\n    while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n        const candidate = candidates.pop();\n        const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;\n        if (originalScore < scoreThreshold) {\n            break;\n        }\n        // Overlapping boxes are likely to have similar scores, therefore we\n        // iterate through the previously selected boxes backwards in order to\n        // see if candidate's score should be suppressed. We use\n        // suppressBeginIndex to track and ensure a candidate can be suppressed\n        // by a selected box no more than once. Also, if the overlap exceeds\n        // iouThreshold, we simply ignore the candidate.\n        let ignoreCandidate = false;\n        for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n            if (iou >= iouThreshold) {\n                ignoreCandidate = true;\n                break;\n            }\n            candidate.score =\n                candidate.score * suppressWeight(iouThreshold, scale, iou);\n            if (candidate.score <= scoreThreshold) {\n                break;\n            }\n        }\n        // At this point, if `candidate.score` has not dropped below\n        // `scoreThreshold`, then we know that we went through all of the\n        // previous selections and can safely update `suppressBeginIndex` to the\n        // end of the selected array. Then we can re-insert the candidate with\n        // the updated score and suppressBeginIndex back in the candidate list.\n        // If on the other hand, `candidate.score` has dropped below the score\n        // threshold, we will not add it back to the candidates list.\n        candidate.suppressBeginIndex = selectedIndices.length;\n        if (!ignoreCandidate) {\n            // Candidate has passed all the tests, and is not suppressed, so\n            // select the candidate.\n            if (candidate.score === originalScore) {\n                selectedIndices.push(boxIndex);\n                selectedScores.push(candidate.score);\n            }\n            else if (candidate.score > scoreThreshold) {\n                // Candidate's score is suppressed but is still high enough to be\n                // considered, so add back to the candidates list.\n                binaryInsert(candidates, candidate, ascendingComparator);\n            }\n        }\n    }\n    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n    const validOutputs = selectedIndices.length;\n    const elemsToPad = maxOutputSize - validOutputs;\n    if (padToMaxOutputSize && elemsToPad > 0) {\n        selectedIndices.push(...new Array(elemsToPad).fill(0));\n        selectedScores.push(...new Array(elemsToPad).fill(0.0));\n    }\n    const result = { selectedIndices };\n    if (returnScoresTensor) {\n        result['selectedScores'] = selectedScores;\n    }\n    if (returnValidOutputs) {\n        result['validOutputs'] = validOutputs;\n    }\n    return result;\n}\nfunction intersectionOverUnion(boxes, i, j) {\n    const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n    const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n    const yminI = Math.min(iCoord[0], iCoord[2]);\n    const xminI = Math.min(iCoord[1], iCoord[3]);\n    const ymaxI = Math.max(iCoord[0], iCoord[2]);\n    const xmaxI = Math.max(iCoord[1], iCoord[3]);\n    const yminJ = Math.min(jCoord[0], jCoord[2]);\n    const xminJ = Math.min(jCoord[1], jCoord[3]);\n    const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n    const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n    const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n    if (areaI <= 0 || areaJ <= 0) {\n        return 0.0;\n    }\n    const intersectionYmin = Math.max(yminI, yminJ);\n    const intersectionXmin = Math.max(xminI, xminJ);\n    const intersectionYmax = Math.min(ymaxI, ymaxJ);\n    const intersectionXmax = Math.min(xmaxI, xmaxJ);\n    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n        Math.max(intersectionXmax - intersectionXmin, 0.0);\n    return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold, scale, iou) {\n    const weight = Math.exp(scale * iou * iou);\n    return iou <= iouThreshold ? weight : 0.0;\n}\nfunction ascendingComparator(c1, c2) {\n    // For objects with same scores, we make the object with the larger index go\n    // first. In an array that pops from the end, this means that the object with\n    // the smaller index will be popped first. This ensures the same output as\n    // the TensorFlow python version.\n    return (c1.score - c2.score) ||\n        ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n    maxOutputSize = inputs.maxOutputSize;\n    iouThreshold = inputs.iouThreshold;\n    scoreThreshold = inputs.scoreThreshold;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return tensor1d(selectedIndices, 'int32');\n}\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV5 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (cf.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const inputs = { boxes: $boxes, scores: $scores };\n    const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const result = ENGINE.runKernel(NonMaxSuppressionV5, inputs, attrs);\n    return { selectedIndices: result[0], selectedScores: result[1] };\n}\nexport const nonMaxSuppressionWithScore = op({ nonMaxSuppressionWithScore_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (cf.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    maxOutputSize = params.maxOutputSize;\n    iouThreshold = params.iouThreshold;\n    scoreThreshold = params.scoreThreshold;\n    softNmsSigma = params.softNmsSigma;\n    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n    const boxesVals = boxesAndScores[0];\n    const scoresVals = boxesAndScores[1];\n    // We call a cpu based impl directly with the typedarray data  here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return {\n        selectedIndices: tensor1d(selectedIndices, 'int32'),\n        selectedScores: tensor1d(selectedScores)\n    };\n}\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { NonMaxSuppressionV4 } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { op } from '../operation';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defaults to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppression');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppression');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\n    const $maxOutputSize = params.maxOutputSize;\n    const $iouThreshold = params.iouThreshold;\n    const $scoreThreshold = params.scoreThreshold;\n    const inputs = { boxes: $boxes, scores: $scores };\n    const attrs = {\n        maxOutputSize: $maxOutputSize,\n        iouThreshold: $iouThreshold,\n        scoreThreshold: $scoreThreshold,\n        padToMaxOutputSize\n    };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const result = ENGINE.runKernel(NonMaxSuppressionV4, inputs, attrs);\n    return { selectedIndices: result[0], validOutputs: result[1] };\n}\nexport const nonMaxSuppressionPadded = op({ nonMaxSuppressionPadded_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV4Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { scalar } from '../scalar';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union), with an option to pad results.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param padToMaxOutputSize Defaults to false. If true, size of output\n *     `selectedIndices` is padded to maxOutputSize.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - validOutputs: A scalar denoting how many elements in `selectedIndices`\n *       are valid. Valid elements occur first, then padding.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {\n    const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n    const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n    const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);\n    const $maxOutputSize = params.maxOutputSize;\n    const $iouThreshold = params.iouThreshold;\n    const $scoreThreshold = params.scoreThreshold;\n    const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);\n    // We call a cpu based impl directly with the typedarray data here rather\n    // than a kernel because all kernels are synchronous (and thus cannot await\n    // .data()).\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);\n    if ($boxes !== boxes) {\n        $boxes.dispose();\n    }\n    if ($scores !== scores) {\n        $scores.dispose();\n    }\n    return {\n        selectedIndices: tensor1d(selectedIndices, 'int32'),\n        validOutputs: scalar(validOutputs, 'int32')\n    };\n}\nexport const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeBilinear } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Bilinear resize a single 3D image or a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to `false`. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers\n *     are at 0.5, which would make the floating point coordinates of the top\n *     left pixel 0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeBilinear_(images, size, alignCorners = false, halfPixelCenters = false) {\n    const $images = convertToTensor(images, 'images', 'resizeBilinear');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` +\n        `${size}.`);\n    util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeBilinear: If halfPixelCenters is true, ` +\n        `alignCorners must be false.`);\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [] = size;\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, halfPixelCenters, size };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(ResizeBilinear, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeBilinear = op({ resizeBilinear_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assume pixels are of\n *      half the actual dimensions, and yield more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {\n    const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n        `${size}.`);\n    util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n    util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +\n        `alignCorners must be false.`);\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [] = size;\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, halfPixelCenters, size };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    const res = ENGINE.runKernel(ResizeNearestNeighbor, inputs, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeNearestNeighbor = op({ resizeNearestNeighbor_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Bincount } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction bincount_(x, weights, size) {\n    const $x = convertToTensor(x, 'x', 'bincount');\n    const $weights = convertToTensor(weights, 'weights', 'bincount');\n    util.assert($x.dtype === 'int32', () => `Error in bincount: input ` +\n        `dtype must be int32, but got ${$x.dtype}`);\n    util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n    util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or` +\n        `0-length, but got input shape: ${$x.shape}, weights shape: ` +\n        `${$weights.shape}.`);\n    const inputs = { x: $x, weights: $weights };\n    const attrs = { size };\n    return ENGINE.runKernel(Bincount, inputs, attrs);\n}\nexport const bincount = op({ bincount_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LessEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.lessEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction lessEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'lessEqual', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'lessEqual', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(LessEqual, inputs);\n}\nexport const lessEqual = op({ lessEqual_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Greater } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a > b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greater(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greater_(a, b) {\n    let $a = convertToTensor(a, 'a', 'greater', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'greater', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Greater, inputs);\n}\nexport const greater = op({ greater_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Computes the sum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If axes has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.sum().print();  // or tf.sum(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.sum(axis).print();  // or tf.sum(x, axis)\n * ```\n *\n * @param x The input tensor to compute the sum over. If the dtype is `bool`\n *   it will be converted to `int32` and the output dtype will be `int32`.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction sum_(x, axis = null, keepDims = false) {\n    let $x = convertToTensor(x, 'x', 'sum');\n    if ($x.dtype === 'bool') {\n        $x = cast($x, 'int32');\n    }\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernel(Sum, inputs, attrs);\n}\nexport const sum = op({ sum_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Add } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3, 4]);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n *\n * ```js\n * // Broadcast add a with b.\n * const a = tf.scalar(5);\n * const b = tf.tensor1d([10, 20, 30, 40]);\n *\n * a.add(b).print();  // or tf.add(a, b)\n * ```\n * @param a The first `tf.Tensor` to add.\n * @param b The second `tf.Tensor` to add. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction add_(a, b) {\n    let $a = convertToTensor(a, 'a', 'add');\n    let $b = convertToTensor(b, 'b', 'add');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Add, inputs);\n}\nexport const add = op({ add_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { FloorDiv } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n * The result is rounded with floor function.\n *\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.floorDiv(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.floorDiv(b).print();  // or tf.floorDiv(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction floorDiv_(a, b) {\n    let $a = convertToTensor(a, 'a', 'floorDiv');\n    let $b = convertToTensor(b, 'b', 'floorDiv');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(FloorDiv, inputs);\n}\nexport const floorDiv = op({ floorDiv_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { RealDiv } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { floorDiv } from './floorDiv';\nimport { op } from './operation';\n/**\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 9, 16]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * ```js\n * // Broadcast div a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(2);\n *\n * a.div(b).print();  // or tf.div(a, b)\n * ```\n *\n * @param a The first tensor as the numerator.\n * @param b The second tensor as the denominator. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction div_(a, b) {\n    let $a = convertToTensor(a, 'a', 'div');\n    let $b = convertToTensor(b, 'b', 'div');\n    [$a, $b] = makeTypesMatch($a, $b);\n    if ($a.dtype === 'int32' && $b.dtype === 'int32') {\n        return floorDiv($a, $b);\n    }\n    const inputs = { a: $a, b: $b };\n    const attrs = {};\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(RealDiv, inputs, attrs);\n}\nexport const div = op({ div_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sub } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.tensor1d([1, 2, 3, 4]);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n *\n * ```js\n * // Broadcast subtract a with b.\n * const a = tf.tensor1d([10, 20, 30, 40]);\n * const b = tf.scalar(5);\n *\n * a.sub(b).print();  // or tf.sub(a, b)\n * ```\n * @param a The first `tf.Tensor` to subtract from.\n * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as\n * `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction sub_(a, b) {\n    let $a = convertToTensor(a, 'a', 'sub');\n    let $b = convertToTensor(b, 'b', 'sub');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Sub, inputs);\n}\nexport const sub = op({ sub_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Round } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes round of input `tf.Tensor` element-wise: `round(x)`.\n * It implements banker's rounding.\n *\n * ```js\n * const x = tf.tensor1d([.6, 1.1, -3.3]);\n *\n * x.round().print();  // or tf.round(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction round_(x) {\n    const $x = convertToTensor(x, 'x', 'round');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Round, inputs);\n}\nexport const round = op({ round_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Select } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { broadcastTo } from './broadcast_to';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same dtype as `a` and with shape that is\n *     compatible with `a`.\n * @return A tensor with same dtype as `a` and `b`, and shape that is\n *     broadcastable from `a` and `b`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction where_(condition, a, b) {\n    const $a = convertToTensor(a, 'a', 'where');\n    const $b = convertToTensor(b, 'b', 'where');\n    const $condition = convertToTensor(condition, 'condition', 'where', 'bool');\n    // TODO: move this logic to forward function when the broadcastTo op is\n    // implemented in WASM.\n    // Find the broadcastable shape for $condition, $a, and $b.\n    const broadcastShape = assertAndGetBroadcastShape(assertAndGetBroadcastShape($condition.shape, $a.shape), $b.shape);\n    const $broadcastedCondition = broadcastTo($condition, broadcastShape);\n    const $broadcastedA = broadcastTo($a, broadcastShape);\n    const $broadcastedB = broadcastTo($b, broadcastShape);\n    const inputs = {\n        condition: $broadcastedCondition,\n        t: $broadcastedA,\n        e: $broadcastedB\n    };\n    return ENGINE.runKernel(Select, inputs);\n}\nexport const where = op({ where_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Range } from '../kernel_names';\n/**\n * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n *\n * The tensor is a half-open interval meaning it includes start, but\n * excludes stop. Decrementing ranges and negative step values are also\n * supported.\n *\n *\n * ```js\n * tf.range(0, 9, 2).print();\n * ```\n *\n * @param start An integer start value\n * @param stop An integer stop value\n * @param step An integer increment (will default to 1 or -1)\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function range(start, stop, step = 1, dtype = 'float32') {\n    if (step === 0) {\n        throw new Error('Cannot have a step of zero');\n    }\n    const attrs = { start, stop, step, dtype };\n    return ENGINE.runKernel(Range, {} /* inputs */, attrs);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates a `tf.Tensor` with the provided values, shape and dtype.\n *\n * ```js\n * // Pass an array of values to create a vector.\n * tf.tensor([1, 2, 3, 4]).print();\n * ```\n *\n * ```js\n * // Pass a nested array of values to make a matrix or a higher\n * // dimensional tensor.\n * tf.tensor([[1, 2], [3, 4]]).print();\n * ```\n *\n * ```js\n * // Pass a flat array and specify a shape yourself.\n * tf.tensor([1, 2, 3, 4], [2, 2]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`. If the values are strings,\n *     they will be encoded as utf-8 and kept as `Uint8Array[]`.\n * @param shape The shape of the tensor. Optional. If not provided,\n *   it is inferred from `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor(values, shape, dtype) {\n    const inferredShape = inferShape(values, dtype);\n    return makeTensor(values, shape, inferredShape, dtype);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from '../tensor1d';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport { slice } from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\nfunction threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {\n    const $image = convertToTensor(image, 'image', 'threshold');\n    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n    Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n    const RED_INTENCITY_COEF = 0.2989;\n    const GREEN_INTENCITY_COEF = 0.5870;\n    const BLUE_INTENCITY_COEF = 0.1140;\n    const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n    let $threshold = mul(tensor1d([threshValue]), 255);\n    let r, g, b, grayscale;\n    util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' +\n        'image color channel must be equal to 3 or 1' +\n        `but got ${$image.shape[2]}.`);\n    util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' +\n        `but got dtype ${$image.dtype}.`);\n    util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);\n    if ($image.shape[2] === 3) {\n        [r, g, b] = split($image, [1, 1, 1], -1);\n        const $r = mul(r, RED_INTENCITY_COEF);\n        const $g = mul(g, GREEN_INTENCITY_COEF);\n        const $b = mul(b, BLUE_INTENCITY_COEF);\n        grayscale = add(add($r, $g), $b);\n    }\n    else {\n        grayscale = image;\n    }\n    if (method === 'otsu') {\n        const $histogram = bincount(cast(round(grayscale), 'int32'), tensor([]), 256);\n        $threshold = otsu($histogram, totalPixelsInImage);\n    }\n    const invCondition = inverted ?\n        lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n    const result = cast(mul(invCondition, 255), 'int32');\n    return result;\n}\nfunction otsu(histogram, total) {\n    let bestThresh = tensor1d([-1]);\n    let bestInBetVar = tensor1d([0]);\n    let cInBetVar = tensor1d([0]);\n    let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n    for (let index = 0; index < histogram.size - 1; index++) {\n        classFirst = slice(histogram, 0, index + 1);\n        classSecond = slice(histogram, index + 1);\n        weightForeground = div(sum(classFirst), total);\n        weightBack = div(sum(classSecond), total);\n        const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n        meanFirst = div(meanFirstDivA, sum(classFirst));\n        const meanSecFill = fill(classSecond.shape, classFirst.size);\n        const meanSecAdd = add(range(0, classSecond.size), meanSecFill);\n        const meanSecMul = mul(classSecond, (meanSecAdd));\n        meanSec = div(sum(meanSecMul), sum(classSecond));\n        const cInBetVarSubA = sub(meanFirst, meanSec);\n        const cInBetVarSubB = sub(meanFirst, meanSec);\n        const cInBetVarMul = mul(weightForeground, weightBack);\n        cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n        const condition = greater(cInBetVar, bestInBetVar);\n        bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n        bestThresh = where(condition, tensor1d([index]), bestThresh);\n    }\n    return bestThresh;\n}\nexport const threshold = op({ threshold_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { Transform } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Applies the given transform(s) to the image(s).\n *\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\n * @param transforms Projective transform matrix/matrices. A tensor1d of length\n *     8 or tensor of size N x 8. If one row of transforms is [a0, a1, a2, b0,\n *     b1, b2, c0, c1], then it maps the output point (x, y) to a transformed\n *     input point (x', y') = ((a0 x + a1 y + a2) / k, (b0 x + b1 y + b2) / k),\n *     where k = c0 x + c1 y + 1. The transforms are inverted compared to the\n *     transform mapping input points to output points.\n * @param interpolation Interpolation mode.\n *     Supported values: 'nearest', 'bilinear'. Default to 'nearest'.\n * @param fillMode Points outside the boundaries of the input are filled\n *     according to the given mode, one of 'constant', 'reflect', 'wrap',\n *     'nearest'. Default to 'constant'.\n *     'reflect': (d c b a | a b c d | d c b a ) The input is extended by\n *     reflecting about the edge of the last pixel.\n *     'constant': (k k k k | a b c d | k k k k) The input is extended by\n *     filling all values beyond the edge with the same constant value k.\n *     'wrap': (a b c d | a b c d | a b c d) The input is extended by\n *     wrapping around to the opposite edge.\n *     'nearest': (a a a a | a b c d | d d d d) The input is extended by\n *     the nearest pixel.\n * @param fillValue A float represents the value to be filled outside the\n *     boundaries when fillMode is 'constant'.\n * @param Output dimension after the transform, [height, width]. If undefined,\n *     output is the same size as input image.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction transform_(image, transforms, interpolation = 'nearest', fillMode = 'constant', fillValue = 0, outputShape) {\n    const $image = convertToTensor(image, 'image', 'transform', 'float32');\n    const $transforms = convertToTensor(transforms, 'transforms', 'transform', 'float32');\n    util.assert($image.rank === 4, () => 'Error in transform: image must be rank 4,' +\n        `but got rank ${$image.rank}.`);\n    util.assert($transforms.rank === 2 &&\n        ($transforms.shape[0] === $image.shape[0] ||\n            $transforms.shape[0] === 1) &&\n        $transforms.shape[1] === 8, () => `Error in transform: Input transform should be batch x 8 or 1 x 8`);\n    util.assert(outputShape == null || outputShape.length === 2, () => 'Error in transform: outputShape must be [height, width] or null, ' +\n        `but got ${outputShape}.`);\n    const inputs = { image: $image, transforms: $transforms };\n    const attrs = { interpolation, fillMode, fillValue, outputShape };\n    return ENGINE.runKernel(Transform, inputs, attrs);\n}\nexport const transform = op({ transform_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { GreaterEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([2, 2, 2]);\n *\n * a.greaterEqual(b).print();\n * ```\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction greaterEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'greaterEqual', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'greaterEqual', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(GreaterEqual, inputs);\n}\nexport const greaterEqual = op({ greaterEqual_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LogicalAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalAnd_(a, b) {\n    const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n    const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(LogicalAnd, inputs);\n}\nexport const logicalAnd = op({ logicalAnd_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Pack } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction stack_(tensors, axis = 0) {\n    const $tensors = convertToTensorArray(tensors, 'tensors', 'stack', 'string_or_numeric');\n    util.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');\n    if ($tensors.length > 0) {\n        util.assert(axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');\n    }\n    const inputs = $tensors;\n    const attrs = { axis };\n    return ENGINE.runKernel(Pack, inputs, attrs);\n}\nexport const stack = op({ stack_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'unstack', 'string_or_numeric');\n    util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n    const inputs = { value: $x };\n    const attrs = { axis };\n    return ENGINE.runKernel(Unpack, inputs, attrs);\n}\nexport const unstack = op({ unstack_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower)`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_(a, numLower, numUpper) {\n    assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n    assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n    const $a = convertToTensor(a, 'a', 'bandPart');\n    assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n    const shape = $a.shape;\n    const [M, N] = $a.shape.slice(-2);\n    if (!(numLower <= M)) {\n        throw new Error(`bandPart(): numLower (${numLower})` +\n            ` must not be greater than the number of rows (${M}).`);\n    }\n    if (!(numUpper <= N)) {\n        throw new Error(`bandPart(): numUpper (${numUpper})` +\n            ` must not be greater than the number of columns (${N}).`);\n    }\n    if (numLower < 0) {\n        numLower = M;\n    }\n    if (numUpper < 0) {\n        numUpper = N;\n    }\n    const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n    const j = range(0, N, 1, 'int32');\n    const ij = sub(i, j);\n    const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n    const zero = zeros([M, N], $a.dtype);\n    return reshape(stack(unstack(reshape($a, [-1, M, N]))\n        .map(mat => where(inBand, mat, zero))), shape);\n}\nexport const bandPart = op({ bandPart_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Abs, ComplexAbs } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes absolute value element-wise: `abs(x)`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.abs().print();  // or tf.abs(x)\n * ```\n * @param x The input `tf.Tensor`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction abs_(x) {\n    const $x = convertToTensor(x, 'x', 'abs');\n    if ($x.dtype === 'complex64') {\n        const inputs = { x: $x };\n        return ENGINE.runKernel(ComplexAbs, inputs);\n    }\n    else {\n        const inputs = { x: $x };\n        return ENGINE.runKernel(Abs, inputs);\n    }\n}\nexport const abs = op({ abs_ });\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n * Returns true if the axis specifies the inner most dimensions of the\n * array.\n */\nexport function axesAreInnerMostDims(axes, rank) {\n    for (let i = 0; i < axes.length; ++i) {\n        if (axes[axes.length - i - 1] !== rank - 1 - i) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function combineLocations(outputLoc, reduceLoc, axes) {\n    const rank = outputLoc.length + reduceLoc.length;\n    const loc = [];\n    let outIdx = 0;\n    let reduceIdx = 0;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            loc.push(outputLoc[outIdx++]);\n        }\n        else {\n            loc.push(reduceLoc[reduceIdx++]);\n        }\n    }\n    return loc;\n}\nexport function computeOutAndReduceShapes(aShape, axes) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            outShape.push(aShape[dim]);\n        }\n    }\n    const reduceShape = axes.map(dim => aShape[dim]);\n    return [outShape, reduceShape];\n}\nexport function expandShapeToKeepDim(shape, axes) {\n    const reduceSubShape = axes.map(x => 1);\n    return combineLocations(shape, reduceSubShape, axes);\n}\nexport function assertAxesAreInnerMostDims(msg, axes, rank) {\n    util.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +\n        `Got axes ${axes} and rank-${rank} input.`);\n}\n/**\n * Returns the axes permutation to be used with `tf.transpose`, if such\n * permutation is necessary. Otherwise it returns null. This method is used by\n * operations that operate only on inner-most axes.\n */\nexport function getAxesPermutation(axes, rank) {\n    if (axesAreInnerMostDims(axes, rank)) {\n        return null;\n    }\n    const result = [];\n    for (let i = 0; i < rank; ++i) {\n        if (axes.indexOf(i) === -1) {\n            result.push(i);\n        }\n    }\n    axes.forEach(axis => result.push(axis));\n    return result;\n}\n/** Returns the axes permutation that undoes the original permutation. */\nexport function getUndoAxesPermutation(axes) {\n    return axes.map((axis, i) => [i, axis])\n        .sort((a, b) => a[1] - b[1])\n        .map(x => x[0]);\n}\nexport function getInnerMostAxes(numAxes, rank) {\n    const res = [];\n    for (let i = rank - numAxes; i < rank; ++i) {\n        res.push(i);\n    }\n    return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Max } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the maximum of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\n * length 1. If `axes` has no entries, all dimensions are reduced, and a\n * `tf.Tensor` with a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.max().print();  // or tf.max(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.max(axis).print();  // or tf.max(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction max_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'max');\n    const inputs = { x: $x };\n    const attrs = { reductionIndices: axis, keepDims };\n    return ENGINE.runKernel(Max, inputs, attrs);\n}\nexport const max = op({ max_ });\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Min } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction min_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'min');\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    // tslint:disable-next-line: no-unnecessary-type-assertion\n    return ENGINE.runKernel(Min, inputs, attrs);\n}\nexport const min = op({ min_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Pow } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n *\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\n * corresponding elements in x and y. The result's dtype will be the upcasted\n * type of the `base` and `exp` dtypes.\n *\n * ```js\n * const a = tf.tensor([[2, 3], [4, 5]])\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n *\n * ```js\n * const a = tf.tensor([[1, 2], [3, 4]])\n * const b = tf.tensor(2).toInt();\n *\n * a.pow(b).print();  // or tf.pow(a, b)\n * ```\n * We also expose `powStrict` which has the same signature as this op and\n * asserts that `base` and `exp` are the same shape (does not broadcast).\n *\n * @param base The base `tf.Tensor` to pow element-wise.\n * @param exp The exponent `tf.Tensor` to pow element-wise.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction pow_(base, exp) {\n    let $base = convertToTensor(base, 'base', 'pow');\n    let $exp = convertToTensor(exp, 'exp', 'pow');\n    [$base, $exp] = makeTypesMatch($base, $exp);\n    const inputs = { a: $base, b: $exp };\n    return ENGINE.runKernel(Pow, inputs);\n}\nexport const pow = op({ pow_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sqrt } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 4, -1]);\n *\n * x.sqrt().print();  // or tf.sqrt(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sqrt_(x) {\n    const $x = convertToTensor(x, 'x', 'sqrt', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Sqrt, inputs);\n}\nexport const sqrt = op({ sqrt_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes square of `x` element-wise: `x ^ 2`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n *\n * x.square().print();  // or tf.square(x)\n * ```\n * @param x The input Tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction square_(x) {\n    const $x = convertToTensor(x, 'x', 'square');\n    const attrs = {};\n    return ENGINE.runKernel('Square', { x: $x }, attrs);\n}\nexport const square = op({ square_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^(1/2)\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is an integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm has the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(x, ord = 'euclidean', axis = null, keepDims = false) {\n    x = convertToTensor(x, 'x', 'norm');\n    const norm = normImpl(x, ord, axis);\n    let keepDimsShape = norm.shape;\n    if (keepDims) {\n        const axes = parseAxisParam(axis, x.shape);\n        keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n    }\n    return reshape(norm, keepDimsShape);\n}\nfunction normImpl(x, p, axis = null) {\n    if (x.rank === 0) {\n        return abs(x);\n    }\n    // consider vector when no axis is specified\n    if (x.rank !== 1 && axis === null) {\n        return normImpl(reshape(x, [-1]), p, axis);\n    }\n    // vector\n    if (x.rank === 1 || typeof axis === 'number' ||\n        Array.isArray(axis) && axis.length === 1) {\n        if (p === 1) {\n            return sum(abs(x), axis);\n        }\n        if (p === Infinity) {\n            return max(abs(x), axis);\n        }\n        if (p === -Infinity) {\n            return min(abs(x), axis);\n        }\n        if (p === 'euclidean' || p === 2) {\n            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n            return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    // matrix (assumption axis[0] < axis[1])\n    if (Array.isArray(axis) && axis.length === 2) {\n        if (p === 1) {\n            return max(sum(abs(x), axis[0]), axis[1] - 1);\n        }\n        if (p === Infinity) {\n            return max(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === -Infinity) {\n            return min(sum(abs(x), axis[1]), axis[0]);\n        }\n        if (p === 'fro' || p === 'euclidean') {\n            // norm(x) = sqrt(sum(pow(x, 2)))\n            return sqrt(sum(square(x), axis));\n        }\n        throw new Error(`Error in norm: invalid ord value: ${p}`);\n    }\n    throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\nexport const norm = op({ norm_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { squeezeShape } from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\n * x.squeeze().print();\n * ```\n *\n * @param x The input tensor to be squeezed.\n * @param axis An optional list of numbers. If specified, only\n *     squeezes the dimensions listed. The dimension index starts at 0. It\n * is an error to squeeze a dimension that is not 1.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction squeeze_(x, axis) {\n    const $x = convertToTensor(x, 'x', 'squeeze', 'string_or_numeric');\n    return reshape($x, squeezeShape($x.shape, axis).newShape);\n}\nexport const squeeze = op({ squeeze_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Orthogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction gramSchmidt_(xs) {\n    let inputIsTensor2D;\n    if (Array.isArray(xs)) {\n        inputIsTensor2D = false;\n        assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +\n            'empty');\n        const dim = xs[0].shape[0];\n        for (let i = 1; i < xs.length; ++i) {\n            assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +\n                `(${xs[i].shape[0]} vs. ${dim})`);\n        }\n    }\n    else {\n        inputIsTensor2D = true;\n        xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n    }\n    assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +\n        `number of dimensions (${xs[0].shape[0]}).`);\n    const ys = [];\n    const xs1d = xs;\n    for (let i = 0; i < xs.length; ++i) {\n        ys.push(ENGINE.tidy(() => {\n            let x = xs1d[i];\n            if (i > 0) {\n                for (let j = 0; j < i; ++j) {\n                    const proj = mul(sum(mul(ys[j], x)), ys[j]);\n                    x = sub(x, proj);\n                }\n            }\n            return div(x, norm(x, 'euclidean'));\n        }));\n    }\n    if (inputIsTensor2D) {\n        return stack(ys, 0);\n    }\n    else {\n        return ys;\n    }\n}\nexport const gramSchmidt = op({ gramSchmidt_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { setDeprecationWarningFn } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\n/**\n * Enables production mode which disables correctness checks in favor of\n * performance.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableProdMode() {\n    env().set('PROD', true);\n}\n/**\n * Enables debug mode which will log information about all executed kernels:\n * the elapsed time of the kernel execution, as well as the rank, shape, and\n * size of the output tensor.\n *\n * Debug mode will significantly slow down your application as it will\n * download the result of every operation to the CPU. This should not be used in\n * production. Debug mode does not affect the timing information of the kernel\n * execution as we do not measure download time in the kernel execution time.\n *\n * See also: `tf.profile`, `tf.memory`.\n *\n * @doc {heading: 'Environment'}\n */\nexport function enableDebugMode() {\n    env().set('DEBUG', true);\n}\n/** Globally disables deprecation warnings */\nexport function disableDeprecationWarnings() {\n    env().set('DEPRECATION_WARNINGS_ENABLED', false);\n    console.warn(`TensorFlow.js deprecation warnings have been disabled.`);\n}\n/** Warn users about deprecated functionality. */\nexport function deprecationWarn(msg) {\n    if (env().getBool('DEPRECATION_WARNINGS_ENABLED')) {\n        console.warn(msg + ' You can disable deprecation warnings with ' +\n            'tf.disableDeprecationWarnings().');\n    }\n}\nsetDeprecationWarningFn(deprecationWarn);\n/**\n * Dispose all variables kept in backend engine.\n *\n * @doc {heading: 'Environment'}\n */\nexport function disposeVariables() {\n    ENGINE.disposeVariables();\n}\n/**\n * It returns the global engine that keeps track of all tensors and backends.\n *\n * @doc {heading: 'Environment'}\n */\nexport function engine() {\n    return ENGINE;\n}\n/**\n * Returns memory info at the current time in the program. The result is an\n * object with the following properties:\n *\n * - `numBytes`: Number of bytes allocated (undisposed) at this time.\n * - `numTensors`: Number of unique tensors allocated.\n * - `numDataBuffers`: Number of unique data buffers allocated\n *   (undisposed) at this time, which is ≤ the number of tensors\n *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n *   data buffer with `a`).\n * - `unreliable`: True if the memory usage is unreliable. See `reasons` when\n *    `unreliable` is true.\n * - `reasons`: `string[]`, reasons why the memory is unreliable, present if\n *    `unreliable` is true.\n *\n * WebGL Properties:\n * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at\n *     this time.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function memory() {\n    return ENGINE.memory();\n}\n/**\n * Executes the provided function `f()` and returns a promise that resolves\n * with information about the function's memory use:\n * - `newBytes`: the number of new bytes allocated\n * - `newTensors`: the number of new tensors created\n * - `peakBytes`: the peak number of bytes allocated\n * - `kernels`: an array of objects for each kernel involved that reports\n * their input and output shapes, number of bytes used, and number of new\n * tensors created.\n * - `kernelNames`: an array of unique strings with just the names of the\n * kernels in the `kernels` array.\n *\n * ```js\n * const profile = await tf.profile(() => {\n *   const x = tf.tensor1d([1, 2, 3]);\n *   let x2 = x.square();\n *   x2.dispose();\n *   x2 = x.square();\n *   x2.dispose();\n *   return x;\n * });\n *\n * console.log(`newBytes: ${profile.newBytes}`);\n * console.log(`newTensors: ${profile.newTensors}`);\n * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>\n * k.totalBytesSnapshot)}`);\n * ```\n *\n *\n * @doc {heading: 'Performance', subheading: 'Profile'}\n */\nexport function profile(f) {\n    return ENGINE.profile(f);\n}\n/**\n * Executes the provided function `fn` and after it is executed, cleans up all\n * intermediate tensors allocated by `fn` except those returned by `fn`.\n * `fn` must not return a Promise (async functions not allowed). The returned\n * result can be a complex object.\n *\n * Using this method helps avoid memory leaks. In general, wrap calls to\n * operations in `tf.tidy` for automatic memory cleanup.\n *\n * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to\n * dispose variables, please use `tf.disposeVariables` or call dispose()\n * directly on variables.\n *\n * ```js\n * // y = 2 ^ 2 + 1\n * const y = tf.tidy(() => {\n *   // a, b, and one will be cleaned up when the tidy ends.\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *   const b = a.square();\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * y.print();\n * ```\n *\n * @param nameOrFn The name of the closure, or the function to execute.\n *     If a name is provided, the 2nd argument should be the function.\n *     If debug mode is on, the timing and the memory usage of the function\n *     will be tracked and displayed on the console using the provided name.\n * @param fn The function to execute.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function tidy(nameOrFn, fn) {\n    return ENGINE.tidy(nameOrFn, fn);\n}\n/**\n * Disposes any `tf.Tensor`s found within the provided object.\n *\n * @param container an object that may be a `tf.Tensor` or may directly\n *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\n *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing\n *     happens. In general it is safe to pass any object here, except that\n *     `Promise`s are not supported.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function dispose(container) {\n    const tensors = getTensorsInContainer(container);\n    tensors.forEach(tensor => tensor.dispose());\n}\n/**\n * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\n * automatically.\n *\n * ```js\n * let b;\n * const y = tf.tidy(() => {\n *   const one = tf.scalar(1);\n *   const a = tf.scalar(2);\n *\n *   // b will not be cleaned up by the tidy. a and one will be cleaned up\n *   // when the tidy ends.\n *   b = tf.keep(a.square());\n *\n *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n *\n *   // The value returned inside the tidy function will return\n *   // through the tidy, in this case to the variable y.\n *   return b.add(one);\n * });\n *\n * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);\n * console.log('y:');\n * y.print();\n * console.log('b:');\n * b.print();\n * ```\n *\n * @param result The tensor to keep from being disposed.\n *\n * @doc {heading: 'Performance', subheading: 'Memory'}\n */\nexport function keep(result) {\n    return ENGINE.keep(result);\n}\n/**\n * Executes `f()` and returns a promise that resolves with timing\n * information.\n *\n * The result is an object with the following properties:\n *\n * - `wallMs`: Wall execution time.\n * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the\n * WebGL backend and the query timer extension is not available, this will\n * return an error object.\n * - On `WebGL` The following additional properties exist:\n *   - `uploadWaitMs`: CPU blocking time on texture uploads.\n *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n *\n * ```js\n * const x = tf.randomNormal([20, 20]);\n * const time = await tf.time(() => x.matMul(x));\n *\n * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n * ```\n *\n * @param f The function to execute and time.\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nexport function time(f) {\n    return ENGINE.time(f);\n}\n/**\n * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and\n * executing operations on those tensors. Returns a promise that resolves\n * to a boolean if the backend initialization was successful.\n *\n * Note this disposes the current backend, if any, as well as any tensors\n * associated with it. A new backend is initialized, even if it is of the\n * same type as the previous one.\n *\n * @param backendName The name of the backend. Currently supports\n *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js\n *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).\n *\n * @doc {heading: 'Backends'}\n */\nexport function setBackend(backendName) {\n    return ENGINE.setBackend(backendName);\n}\n/**\n * Returns a promise that resolves when the currently selected backend (or the\n * highest priority one) has initialized. Await this promise when you are using\n * a backend that has async initialization.\n *\n * @doc {heading: 'Backends'}\n */\nexport function ready() {\n    return ENGINE.ready();\n}\n/**\n * Returns the current backend name (cpu, webgl, etc). The backend is\n * responsible for creating tensors and executing operations on those tensors.\n *\n * @doc {heading: 'Backends'}\n */\nexport function getBackend() {\n    return ENGINE.backendName;\n}\n/**\n * Removes a backend and the registered factory.\n *\n * @doc {heading: 'Backends'}\n */\nexport function removeBackend(name) {\n    ENGINE.removeBackend(name);\n}\n/**\n * Finds the backend registered under the provided name. Returns null if the\n * name is not in the registry, or the registration hasn't finished yet.\n */\nexport function findBackend(name) {\n    return ENGINE.findBackend(name);\n}\n/**\n * Finds the backend factory registered under the provided name. Returns a\n * function that produces a new backend when called. Returns null if the name\n * is not in the registry.\n */\nexport function findBackendFactory(name) {\n    return ENGINE.findBackendFactory(name);\n}\n/**\n * Registers a global backend. The registration should happen when importing\n * a module file (e.g. when importing `backend_webgl.ts`), and is used for\n * modular builds (e.g. custom tfjs bundle with only webgl support).\n *\n * @param factory The backend factory function. When called, it should\n * return a backend instance, or a promise of an instance.\n * @param priority The priority of the backend (higher = more important).\n *     In case multiple backends are registered, the priority is used to find\n *     the best backend. Defaults to 1.\n * @return False if there is already a registered backend under this name, true\n *     if not.\n *\n * @doc {heading: 'Backends'}\n */\nexport function registerBackend(name, factory, priority = 1) {\n    return ENGINE.registerBackend(name, factory, priority);\n}\n/**\n * Gets the current backend. If no backends have been initialized, this will\n * attempt to initialize the best backend. Will throw an error if the highest\n * priority backend has async initialization, in which case you should call\n * 'await tf.ready()' before running other code.\n *\n * @doc {heading: 'Backends'}\n */\nexport function backend() {\n    return ENGINE.backend;\n}\n/**\n * Sets the global platform.\n *\n * @param platformName The name of this platform.\n * @param platform A platform implementation.\n */\nexport function setPlatform(platformName, platform) {\n    env().setPlatform(platformName, platform);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ExpandDims } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions are to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction expandDims_(x, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n    util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n    const inputs = { input: $x };\n    const attrs = { dim: axis };\n    return ENGINE.runKernel(ExpandDims, inputs, attrs);\n}\nexport const expandDims = op({ expandDims_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(numRows, numColumns, batchShape, dtype = 'float32') {\n    if (numColumns == null) {\n        numColumns = numRows;\n    }\n    const buff = buffer([numRows, numColumns], dtype);\n    const n = numRows <= numColumns ? numRows : numColumns;\n    for (let i = 0; i < n; ++i) {\n        buff.set(1, i, i);\n    }\n    const out = reshape(buff.toTensor(), [numRows, numColumns]);\n    if (batchShape == null) {\n        return out;\n    }\n    else {\n        if (batchShape.length === 1) {\n            return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n        }\n        else if (batchShape.length === 2) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n        }\n        else if (batchShape.length === 3) {\n            // tslint:disable-next-line:no-unnecessary-type-assertion\n            return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n                batchShape[0], batchShape[1], batchShape[2], 1, 1\n            ]);\n        }\n        else {\n            throw new Error(`eye() currently supports only 1D and 2D ` +\n                // tslint:disable-next-line:no-any\n                `batchShapes, but received ${batchShape.length}D.`);\n        }\n    }\n}\nexport const eye = op({ eye_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchMatMul } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_(a, b, transposeA = false, transposeB = false) {\n    let $a = convertToTensor(a, 'a', 'matMul');\n    let $b = convertToTensor(b, 'b', 'matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    const inputs = { a: $a, b: $b };\n    const attrs = { transposeA, transposeB };\n    return ENGINE.runKernel(BatchMatMul, inputs, attrs);\n}\nexport const matMul = op({ matMul_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Neg } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes `-1 * x` element-wise.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n *\n * x.neg().print();  // or tf.neg(x)\n * ```\n *\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction neg_(x) {\n    const $x = convertToTensor(x, 'x', 'neg');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Neg, inputs);\n}\nexport const neg = op({ neg_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { tidy } from '../globals';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { complex } from './complex';\nimport { imag } from './imag';\nimport { neg } from './neg';\nimport { op } from './operation';\nimport { real } from './real';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n * @param conjugate Will conjugate complex input if true.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_(x, perm, conjugate) {\n    const $x = convertToTensor(x, 'x', 'transpose');\n    if (perm == null) {\n        perm = $x.shape.map((s, i) => i).reverse();\n    }\n    util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of perm ${perm}.`);\n    perm.forEach(axis => {\n        util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n    });\n    if ($x.rank <= 1) {\n        return $x.clone();\n    }\n    const inputs = { x: $x };\n    const attrs = { perm };\n    if ($x.dtype === 'complex64') {\n        return tidy(() => {\n            let $real = real($x);\n            let $imag = imag($x);\n            $real = ENGINE.runKernel(Transpose, { x: $real }, attrs);\n            $imag = ENGINE.runKernel(Transpose, { x: $imag }, attrs);\n            if (conjugate) {\n                $imag = neg($imag);\n            }\n            return complex($real, $imag);\n        });\n    }\n    return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nexport const transpose = op({ transpose_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { dispose } from '../../globals';\nimport { assert } from '../../util';\nimport { clone } from '../clone';\nimport { concat } from '../concat';\nimport { div } from '../div';\nimport { eye } from '../eye';\nimport { greater } from '../greater';\nimport { matMul } from '../mat_mul';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { tensor2d } from '../tensor2d';\nimport { transpose } from '../transpose';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\n/**\n * Compute QR decomposition of m-by-n matrix using Householder transformation.\n *\n * Implementation based on\n *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [3, 4]]);\n * let [q, r] = tf.linalg.qr(a);\n * console.log('Q');\n * q.print();\n * console.log('R');\n * r.print();\n * console.log('Orthogonalized');\n * q.dot(q.transpose()).print()  // should be nearly the identity matrix.\n * console.log('Reconstructed');\n * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n * ```\n *\n * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\n *   it has the shape `[..., M, N]`.\n * @param fullMatrices An optional boolean parameter. Defaults to `false`.\n *   If `true`, compute full-sized `Q`. If `false` (the default),\n *   compute only the leading N columns of `Q` and `R`.\n * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,\n *   i.e., its columns all have unit norm and are mutually orthogonal.\n *   If `M >= N`,\n *     If `fullMatrices` is `false` (default),\n *       - `Q` has a shape of `[..., M, N]`,\n *       - `R` has a shape of `[..., N, N]`.\n *     If `fullMatrices` is `true` (default),\n *       - `Q` has a shape of `[..., M, M]`,\n *       - `R` has a shape of `[..., M, N]`.\n *   If `M < N`,\n *     - `Q` has a shape of `[..., M, M]`,\n *     - `R` has a shape of `[..., M, N]`.\n * @throws If the rank of `x` is less than 2.\n *\n * @doc {heading:'Operations',\n *       subheading:'Linear Algebra',\n *       namespace:'linalg'}\n */\nfunction qr_(x, fullMatrices = false) {\n    assert(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);\n    if (x.rank === 2) {\n        return qr2d(x, fullMatrices);\n    }\n    else {\n        // Rank > 2.\n        // TODO(cais): Below we split the input into individual 2D tensors,\n        //   perform QR decomposition on them and then stack the results back\n        //   together. We should explore whether this can be parallelized.\n        const outerDimsProd = x.shape.slice(0, x.shape.length - 2)\n            .reduce((value, prev) => value * prev);\n        const x2ds = unstack(reshape(x, [\n            outerDimsProd, x.shape[x.shape.length - 2],\n            x.shape[x.shape.length - 1]\n        ]), 0);\n        const q2ds = [];\n        const r2ds = [];\n        x2ds.forEach(x2d => {\n            const [q2d, r2d] = qr2d(x2d, fullMatrices);\n            q2ds.push(q2d);\n            r2ds.push(r2d);\n        });\n        const q = reshape(stack(q2ds, 0), x.shape);\n        const r = reshape(stack(r2ds, 0), x.shape);\n        return [q, r];\n    }\n}\nfunction qr2d(x, fullMatrices = false) {\n    return ENGINE.tidy(() => {\n        assert(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);\n        const m = x.shape[0];\n        const n = x.shape[1];\n        let q = eye(m); // Orthogonal transform so far.\n        let r = clone(x); // Transformed matrix so far.\n        const one2D = tensor2d([[1]], [1, 1]);\n        let w = clone(one2D);\n        const iters = m >= n ? n : m;\n        for (let j = 0; j < iters; ++j) {\n            // This tidy within the for-loop ensures we clean up temporary\n            // tensors as soon as they are no longer needed.\n            const rTemp = r;\n            const wTemp = w;\n            const qTemp = q;\n            [w, r, q] = ENGINE.tidy(() => {\n                // Find H = I - tau * w * w', to put zeros below R(j, j).\n                const rjEnd1 = slice(r, [j, j], [m - j, 1]);\n                const normX = norm(rjEnd1);\n                const rjj = slice(r, [j, j], [1, 1]);\n                // The sign() function returns 0 on 0, which causes division by zero.\n                const s = where(greater(rjj, 0), tensor2d([[-1]]), tensor2d([[1]]));\n                const u1 = sub(rjj, mul(s, normX));\n                const wPre = div(rjEnd1, u1);\n                if (wPre.shape[0] === 1) {\n                    w = clone(one2D);\n                }\n                else {\n                    w = concat([\n                        one2D,\n                        slice(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])\n                    ], 0);\n                }\n                const tau = neg(div(matMul(s, u1), normX));\n                // -- R := HR, Q := QH.\n                const rjEndAll = slice(r, [j, 0], [m - j, n]);\n                const tauTimesW = mul(tau, w);\n                const wT = transpose(w);\n                if (j === 0) {\n                    r = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                }\n                else {\n                    const rTimesTau = sub(rjEndAll, matMul(tauTimesW, matMul(wT, rjEndAll)));\n                    r = concat([slice(r, [0, 0], [j, n]), rTimesTau], 0);\n                }\n                const tawTimesWT = transpose(tauTimesW);\n                const qAllJEnd = slice(q, [0, j], [m, q.shape[1] - j]);\n                if (j === 0) {\n                    q = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                }\n                else {\n                    const qTimesTau = sub(qAllJEnd, matMul(matMul(qAllJEnd, w), tawTimesWT));\n                    q = concat([slice(q, [0, 0], [m, j]), qTimesTau], 1);\n                }\n                return [w, r, q];\n            });\n            dispose([rTemp, wTemp, qTemp]);\n        }\n        if (!fullMatrices && m > n) {\n            q = slice(q, [0, 0], [m, n]);\n            r = slice(r, [0, 0], [n, n]);\n        }\n        return [q, r];\n    });\n}\nexport const qr = op({ qr_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Reduction;\n(function (Reduction) {\n    Reduction[Reduction[\"NONE\"] = 0] = \"NONE\";\n    Reduction[Reduction[\"MEAN\"] = 1] = \"MEAN\";\n    Reduction[Reduction[\"SUM\"] = 2] = \"SUM\";\n    Reduction[Reduction[\"SUM_BY_NONZERO_WEIGHTS\"] = 3] = \"SUM_BY_NONZERO_WEIGHTS\";\n})(Reduction || (Reduction = {}));\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Mean } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the mean of elements across dimensions of a `tf.Tensor`.\n *\n * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is\n * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\n * a single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.mean().print();  // or tf.mean(a)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.mean(axis).print();  // or tf.mean(x, axis)\n * ```\n *\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction mean_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'mean');\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernel(Mean, inputs, attrs);\n}\nexport const mean = op({ mean_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { NotEqual } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of (a != b) element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([0, 2, 3]);\n *\n * a.notEqual(b).print();\n * ```\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same dtype as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction notEqual_(a, b) {\n    let $a = convertToTensor(a, 'a', 'notEqual', 'string_or_numeric');\n    let $b = convertToTensor(b, 'b', 'notEqual', 'string_or_numeric');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(NotEqual, inputs);\n}\nexport const notEqual = op({ notEqual_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { makeOnesTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\nimport { zeros } from './zeros';\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function ones(shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = ones(shape, 'float32');\n        const imag = zeros(shape, 'float32');\n        return complex(real, imag);\n    }\n    const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n    return ENGINE.makeTensor(values, shape, dtype);\n}\n","import { convertToTensor } from '../../tensor_util_env';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { Reduction } from '../loss_ops_utils';\nimport { mean } from '../mean';\nimport { mul } from '../mul';\nimport { notEqual } from '../not_equal';\nimport { ones } from '../ones';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sum } from '../sum';\n/**\n * Computes the weighted loss between two tensors.\n *\n * @param losses Tensor of shape `[batch_size, d1, ..., dN]`.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `losses`, and must be broadcastable to `losses` (i.e., all\n *    dimensions must be either `1`, or the same as the corresponding\n *    `losses` dimension).\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction computeWeightedLoss_(losses, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $losses = convertToTensor(losses, 'losses', 'computeWeightedLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'computeWeightedLoss');\n    }\n    const weightedLoss = ($weights == null) ? $losses : mul($losses, $weights);\n    if (reduction === Reduction.NONE) {\n        return weightedLoss;\n    }\n    if (reduction === Reduction.SUM) {\n        return sum(weightedLoss);\n    }\n    if (reduction === Reduction.MEAN) {\n        if ($weights == null) {\n            return mean(weightedLoss);\n        }\n        else {\n            const broadcastFactor = $losses.size / $weights.size;\n            const result = div(sum(weightedLoss), sum($weights));\n            return broadcastFactor > 1 ? div(result, scalar(broadcastFactor)) :\n                result;\n        }\n    }\n    if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n        if ($weights == null) {\n            return div(sum(weightedLoss), scalar($losses.size));\n        }\n        else {\n            const broadcastedWeights = mul($weights, ones($losses.shape));\n            const numNonZeros = cast(sum(notEqual(broadcastedWeights, scalar(0))), 'float32');\n            return div(sum(weightedLoss), numNonZeros);\n        }\n    }\n    throw Error(`Unknown reduction: ${reduction}`);\n}\nexport const computeWeightedLoss = op({ computeWeightedLoss_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { Reduction } from '../loss_ops_utils';\nimport { op } from '../operation';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction absoluteDifference_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n    const $predictions = convertToTensor(predictions, 'predictions', 'absoluteDifference');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n    const losses = abs(sub($labels, $predictions));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const absoluteDifference = op({ absoluteDifference_ });\n","import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the cosine distance loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param axis The dimension along which the cosine distance is computed.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction cosineDistance_(labels, predictions, axis, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'cosineDistance');\n    const $predictions = convertToTensor(predictions, 'predictions', 'cosineDistance');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'cosineDistance');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in cosineDistance: ');\n    const one = scalar(1);\n    const losses = sub(one, sum(mul($labels, $predictions), axis, true));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const cosineDistance = op({ cosineDistance_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Relu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes rectified linear element-wise: `max(x, 0)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.relu().print();  // or tf.relu(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu_(x) {\n    const $x = convertToTensor(x, 'x', 'relu');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Relu, inputs);\n}\nexport const relu = op({ relu_ });\n","import { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the Hinge loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction hingeLoss_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $labels = convertToTensor(labels, 'labels', 'hingeLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'hingeLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'hingeLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in hingeLoss: ');\n    const one = scalar(1);\n    // Convert binary labels to (-1, 1)\n    $labels = sub(mul(scalar(2), $labels), one);\n    const losses = relu(sub(one, mul($labels, $predictions)));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const hingeLoss = op({ hingeLoss_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Minimum } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { cast } from './cast';\nimport { op } from './operation';\n/**\n * Returns the min of a and b (`a < b ? a : b`) element-wise.\n * Supports broadcasting.\n *\n * We also expose `minimumStrict` which has the same signature as this op and\n * asserts that `a` and `b` are the same shape (does not broadcast).\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * ```js\n * // Broadcast minimum a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.minimum(b).print();  // or tf.minimum(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction minimum_(a, b) {\n    let $a = convertToTensor(a, 'a', 'minimum');\n    let $b = convertToTensor(b, 'b', 'minimum');\n    [$a, $b] = makeTypesMatch($a, $b);\n    if ($a.dtype === 'bool') {\n        $a = cast($a, 'int32');\n        $b = cast($b, 'int32');\n    }\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    return ENGINE.runKernel(Minimum, inputs);\n}\nexport const minimum = op({ minimum_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { Reduction } from '../loss_ops_utils';\nimport { minimum } from '../minimum';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { square } from '../square';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the Huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where Huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction huberLoss_(labels, predictions, weights, delta = 1.0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'huberLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n    const deltaScalar = scalar(delta);\n    const error = abs(sub($predictions, $labels));\n    const quadratic = minimum(error, deltaScalar);\n    const linear = sub(error, quadratic);\n    const losses = add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const huberLoss = op({ huberLoss_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Log } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E]);\n *\n * x.log().print();  // or tf.log(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log_(x) {\n    const $x = convertToTensor(x, 'x', 'log', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Log, inputs);\n}\nexport const log = op({ log_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { log } from '../log';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the log loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param epsilon A small increment to avoid taking log of zero\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'logLoss');\n    const $predictions = convertToTensor(predictions, 'predictions', 'logLoss');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'logLoss');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in logLoss: ');\n    const one = scalar(1);\n    const epsilonScalar = scalar(epsilon);\n    const l1 = neg(mul($labels, log(add($predictions, epsilonScalar))));\n    const l2 = mul(sub(one, $labels), log(add(sub(one, $predictions), epsilonScalar)));\n    const losses = sub(l1, l2);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const logLoss = op({ logLoss_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SquaredDifference } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns (a - b) * (a - b) element-wise.\n * Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([1, 4, 3, 16]);\n * const b = tf.tensor1d([1, 2, 9, 4]);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * ```js\n * // Broadcast squared difference  a with b.\n * const a = tf.tensor1d([2, 4, 6, 8]);\n * const b = tf.scalar(5);\n *\n * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n * ```\n *\n * @param a The first tensor.\n * @param b The second tensor. Must have the same type as `a`.\n *\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction squaredDifference_(a, b) {\n    let $a = convertToTensor(a, 'a', 'squaredDifference');\n    let $b = convertToTensor(b, 'b', 'squaredDifference');\n    [$a, $b] = makeTypesMatch($a, $b);\n    assertAndGetBroadcastShape($a.shape, $b.shape);\n    const inputs = { a: $a, b: $b };\n    const attrs = {};\n    return ENGINE.runKernel(SquaredDifference, inputs, attrs);\n}\nexport const squaredDifference = op({ squaredDifference_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { Reduction } from '../loss_ops_utils';\nimport { op } from '../operation';\nimport { squaredDifference } from '../squared_difference';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the mean squared error between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction meanSquaredError_(labels, predictions, weights, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    const $labels = convertToTensor(labels, 'labels', 'meanSquaredError');\n    const $predictions = convertToTensor(predictions, 'predictions', 'meanSquaredError');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'meanSquaredError');\n    }\n    assertShapesMatch($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');\n    const losses = squaredDifference($labels, $predictions);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const meanSquaredError = op({ meanSquaredError_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Exp } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, -3]);\n *\n * x.exp().print();  // or tf.exp(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction exp_(x) {\n    const $x = convertToTensor(x, 'x', 'exp');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Exp, inputs);\n}\nexport const exp = op({ exp_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Log1p } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes natural logarithm of the input `tf.Tensor` plus one\n * element-wise: `ln(1 + x)`\n *\n * ```js\n * const x = tf.tensor1d([1, 2, Math.E - 1]);\n *\n * x.log1p().print();  // or tf.log1p(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction log1p_(x) {\n    const $x = convertToTensor(x, 'x', 'log1p');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Log1p, inputs);\n}\nexport const log1p = op({ log1p_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { exp } from '../exp';\nimport { log1p } from '../log1p';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\nfunction sigmoidCrossEntropyWithLogits_(labels, logits) {\n    const $labels = convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n    const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n    assertShapesMatch($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n    /**\n     * Implementation Details:\n     *\n     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n     *   = (1 - z) * x + log(1 + exp(-x))\n     *   = x - x * z + log(1 + exp(-x))\n     *\n     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n     *     x - x * z + log(1 + exp(-x))\n     *   = log(exp(x)) - x * z + log(1 + exp(-x))\n     *   = - x * z + log(1 + exp(x))\n     *\n     * Hence, to ensure stability and avoid overflow, the implementation uses\n     * this equivalent formulation:\n     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n     */\n    const maxOutput = relu($logits);\n    const outputXTarget = mul($logits, $labels);\n    const sigmoidOutput = log1p(exp(neg(abs($logits))));\n    return add(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $multiClassLabels = convertToTensor(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n    const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n    }\n    assertShapesMatch($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n    if (labelSmoothing > 0) {\n        const labelSmoothingScalar = scalar(labelSmoothing);\n        const one = scalar(1);\n        const half = scalar(0.5);\n        $multiClassLabels =\n            add(mul($multiClassLabels, sub(one, labelSmoothingScalar)), mul(half, labelSmoothingScalar));\n    }\n    const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const sigmoidCrossEntropy = op({ sigmoidCrossEntropy_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { Tensor, Variable } from './tensor';\nimport { convertToTensor, convertToTensorArray } from './tensor_util_env';\nimport * as util from './util';\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n    return (x, dy) => {\n        // x can be of any dtype, thus null as the last argument.\n        const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f($x), [$x], $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                    'returned by f(x)');\n            }\n            checkGrads(grads);\n            return grads[0];\n        });\n    };\n}\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n        // args can be of any dtype, thus null as the last argument.\n        const $args = convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n        const $dy = (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n        return ENGINE.tidy(() => {\n            const { value, grads } = ENGINE.gradients(() => f(...$args), $args, $dy);\n            if ($dy != null) {\n                util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                    'match the shape returned by f([x1,...])');\n            }\n            checkGrads(grads);\n            return grads;\n        });\n    };\n}\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t. `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrad(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');\n    return (x, dy) => {\n        util.assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n        const { grads, value } = ENGINE.gradients(() => f(x), [x], dy);\n        checkGrads(grads);\n        return { grad: grads[0], value };\n    };\n}\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t. each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrads(f) {\n    util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');\n    return (args, dy) => {\n        util.assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n        util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n        const res = ENGINE.gradients(() => f(...args), args, dy);\n        if (dy != null) {\n            util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n        }\n        checkGrads(res.grads);\n        return res;\n    };\n}\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction variableGrads(f, varList) {\n    util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');\n    util.assert(varList == null ||\n        Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' +\n        'of variables');\n    const specifiedVarList = varList != null;\n    if (!specifiedVarList) {\n        // Get all of the trainable variables.\n        varList = [];\n        for (const varName in ENGINE.registeredVariables) {\n            varList.push(ENGINE.registeredVariables[varName]);\n        }\n    }\n    const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n    // Prune non-trainable variables.\n    const originalVarCount = varList.length;\n    varList = varList.filter(variable => variable.trainable);\n    util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` +\n        `be trainable, but none of the ${originalVarCount} variables is ` +\n        `trainable.`);\n    const allowNoGradients = true;\n    const { value, grads } = ENGINE.gradients(f, varList, null, allowNoGradients);\n    util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' +\n        'the loss function y=f(x). Please make sure the operations that ' +\n        'use variables are inside the function f passed to minimize().');\n    util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n        `returned a rank-${value.rank} tensor`);\n    const namedGrads = {};\n    varList.forEach((v, i) => {\n        if (grads[i] != null) {\n            namedGrads[v.name] = grads[i];\n        }\n    });\n    if (specifiedNonTrainable != null) {\n        // If varList is explicitly provided and contains non-trainable values,\n        // add them to the returned gradients with `null` values.\n        specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n    }\n    return { value, grads: namedGrads };\n}\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensors.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction customGrad(f) {\n    return ENGINE.customGrad(f);\n}\nfunction checkGrads(grads) {\n    const numNullGradients = grads.filter(g => g == null).length;\n    if (numNullGradients > 0) {\n        throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n    }\n}\nexport { customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads, };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { add } from './add';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions))).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction logSumExp_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'logSumExp');\n    const axes = parseAxisParam(axis, $x.shape);\n    const xMax = max($x, axes, true /* keepDims */);\n    const a = sub($x, xMax);\n    const b = exp(a);\n    const c = sum(b, axes);\n    const d = log(c);\n    const res = add(reshape(xMax, d.shape), d);\n    if (keepDims) {\n        const newShape = expandShapeToKeepDim(res.shape, axes);\n        return reshape(res, newShape);\n    }\n    return res;\n}\nexport const logSumExp = op({ logSumExp_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../../gradients';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { expandShapeToKeepDim } from '../axis_util';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { exp } from '../exp';\nimport { logSumExp } from '../log_sum_exp';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes softmax cross entropy between logits and labels.\n *\n * Measures the probability error in discrete classification tasks in which\n * the classes are mutually exclusive (each entry is in exactly one class).\n * For example, each CIFAR-10 image is labeled with one and only one label: an\n * image can be a dog or a truck, but not both.\n *\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\n * not be. All that is required is that each row of labels is a valid\n * probability distribution. If they are not, the computation of the gradient\n * will be incorrect.\n *\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\n * logits internally for efficiency. Do not call this op with the output of\n * softmax, as it will produce incorrect results.\n *\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\n * and the same dtype.\n * @param labels The labels array.\n * @param logits The logits array.\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n */\nfunction softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {\n    if (dim === -1) {\n        dim = logits.rank - 1;\n    }\n    if (dim !== logits.rank - 1) {\n        throw Error(`Softmax cross entropy along a non-last dimension is not yet ` +\n            `supported. Labels / logits was rank ${logits.rank} ` +\n            `and dim was ${dim}`);\n    }\n    // Use a custom gradient for numerical stability.\n    const customOp = customGrad((labels, logits, save) => {\n        // Reference:\n        //   1. http://cs231n.github.io/linear-classify/#softmax\n        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n        const keepDims = true;\n        const lse = logSumExp(logits, [dim], keepDims);\n        const logResult = sub(cast(logits, 'float32'), lse);\n        save([labels, logResult]);\n        const costVector = neg(mul(logResult, labels));\n        const value = sum(costVector, [dim]);\n        const gradFunc = (dy, saved) => {\n            const [labels, logResult] = saved;\n            const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n            return [\n                mul(reshape(dy, dyShape), sub(cast(labels, 'float32'), exp(logResult))),\n                mul(reshape(dy, dyShape), sub(exp(logResult), cast(labels, 'float32'))),\n            ];\n        };\n        return { value, gradFunc };\n    });\n    return customOp(labels, logits);\n}\n/**\n * Computes the softmax cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n *                         + labelSmoothing / numClasses\n *\n * @param onehotLabels One hot encoded labels\n *    [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or 1, and must be\n *    broadcastable to `loss`  of shape [batch_size]\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n    let $onehotLabels = convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n    const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n    let $weights = null;\n    if (weights != null) {\n        $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n    }\n    assertShapesMatch($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n    if (labelSmoothing > 0) {\n        const labelSmoothingScalar = scalar(labelSmoothing);\n        const one = scalar(1);\n        const numClasses = scalar($onehotLabels.shape[1]);\n        $onehotLabels =\n            add(mul($onehotLabels, sub(one, labelSmoothingScalar)), div(labelSmoothingScalar, numClasses));\n    }\n    const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n    return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const softmaxCrossEntropy = op({ softmaxCrossEntropy_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseFillEmptyRows } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * The input SparseTensor is represented via the map of inputs {`indices`,\n * `values`, `denseShape`}. The output SparseTensor has the same `denseShape`\n * but with indices `outputIndices` and values `outputValues`. This op inserts a\n * single entry for every row that doesn't have any values. The index is created\n * as `[row, 0, ..., 0]` and the inserted value is `defaultValue`.\n *\n * For example, suppose `spInput` has shape [5, 6] and non-empty values:\n * [0, 1]: a\n * [0, 3]: b\n * [2, 0]: c\n * [3, 1]: d\n *\n * Rows 1 and 4 are empty, so the output will be of shape [5, 6] with values:\n * [0, 1]: a\n * [0, 3]: b\n * [1, 0]: `defaultValue`\n * [2, 0]: c\n * [3, 1]: d\n * [4, 0]: `defaultValue`\n *\n * The output SparseTensor will be in row-major order and will have the same\n * shape as the input.\n *\n * This op also returns an indicator vector shaped [dense_shape[0]] such that\n * emptyRowIndicator[i] = True iff row i was an empty row.\n *\n * And a reverse index map vector shaped [indices.shape[0]] that is used during\n * backpropagation, reverseIndexMap[i] = outi s.t. indices[i, j] ==\n * outputIndices[outi, j] for all j\n *\n * ```js\n * const result = tf.sparse.sparseFillEmptyRows(\n *   [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]],\n *   [0, 10, 13, 14, 32, 33], [5, 6], -1);\n * console.log(result);\n * result['outputIndices'].print(); // [[0, 0], [1, 0], [1, 3], [1, 4],\n *                                  //  [2, 0], [3, 2], [3, 3], [4, 0]]\n * result['outputValues'].print(); // [0, 10, 13, 14,-1, 32, 33, -1]\n * result['emptyRowIndicator'].print(); // [false, false, true, false, true]\n * result['reverseIndexMap'].print(); // [0, 1, 2, 3, 5, 6]\n * ```\n * @param indices: 2-D. The indices of the sparse tensor.\n * @param values: 1-D. The values of the sparse tensor.\n * @param denseShape: 1-D. The shape of the sparse tensor.\n * @param defaultValue: 0-D. Default value to insert into location [row, 0, ...,\n *     0] for rows missing from the input sparse tensor.\n * @return A map with the following properties:\n *     - outputIndices\n *     - outputValues: 1-D. The values of the filled sparse tensor.\n *     - emptyRowIndicator: 1-D. Whether the dense row was missing in the input\n * sparse tensor.\n *     - reverseIndexMap: 1-D. A map from the input indices to the output\n * indices.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseFillEmptyRows_(indices, values, denseShape, defaultValue) {\n    const $indices = convertToTensor(indices, 'indices', 'sparseFillEmptyRows', 'int32');\n    const $values = convertToTensor(values, 'values', 'sparseFillEmptyRows');\n    const $denseShape = convertToTensor(denseShape, 'denseShape', 'sparseFillEmptyRows', 'int32');\n    const $defaultValue = convertToTensor(defaultValue, 'defaultValue', 'sparseFillEmptyRows', $values.dtype);\n    if ($indices.rank !== 2) {\n        throw new Error(`Indices should be Tensor2D but received shape\n        ${$indices.shape}`);\n    }\n    if ($values.rank !== 1) {\n        throw new Error(`Values should be Tensor1D but received shape ${$values.shape}`);\n    }\n    if ($denseShape.rank !== 1) {\n        throw new Error(`Dense shape should be Tensor1D but received shape ${$denseShape.shape}`);\n    }\n    if ($defaultValue.rank !== 0) {\n        throw new Error(`Default value should be a scalar but received shape ${$defaultValue.shape}`);\n    }\n    const inputs = {\n        indices: $indices,\n        values: $values,\n        denseShape: $denseShape,\n        defaultValue: $defaultValue\n    };\n    const result = ENGINE.runKernel(SparseFillEmptyRows, inputs);\n    return {\n        outputIndices: result[0],\n        outputValues: result[1],\n        emptyRowIndicator: result[2],\n        reverseIndexMap: result[3]\n    };\n}\nexport const sparseFillEmptyRows = op({ sparseFillEmptyRows_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseReshape } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * This operation has the same semantics as reshape on the represented dense\n * tensor. The `inputIndices` are recomputed based on the requested `newShape`.\n * If one component of `newShape` is the special value -1, the size of that\n * dimension is computed so that the total dense size remains constant. At most\n * one component of `newShape` can be -1. The number of dense elements implied\n * by `newShape` must be the same as the number of dense elements originally\n * implied by `inputShape`. Reshaping does not affect the order of values in the\n * SparseTensor. If the input tensor has rank R_in and N non-empty values, and\n * `newShape` has length R_out, then `inputIndices` has shape [N, R_in],\n * `inputShape` has length R_in, `outputIndices` has shape [N, R_out], and\n * `outputShape` has length R_out.\n *\n * ```js\n * const result = tf.sparse.sparseReshape(\n *   [[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 2, 3]],\n *   [2, 3, 6], [9, -1]);\n * console.log(result);\n * result['outputIndices'].print(); //[[0, 0], [0, 1], [1, 2], [4, 2], [8, 1]]\n * result['outputShape'].print(); // [9, 4]\n * ```\n * @param inputIndices: 2-D. N x R_in matrix with the indices of non-empty\n * values in a SparseTensor.\n * @param inputShape: 1-D. R_in Tensor1D with the input SparseTensor's dense\n * shape.\n * @param newShape: 1-D. R_out Tensor1D with the requested new dense shape.\n * @return A map with the following properties:\n *     - outputIndices: 2-D. N x R_out matrix with the updated indices of\n *       non-empty values in the output SparseTensor.\n *     - outputShape: 1-D. R_out vector with the full dense shape of the output\n *       SparseTensor. This is the same as newShape but with any -1 dimensions\n *        filled in.\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseReshape_(inputIndices, inputShape, newShape) {\n    const $inputIndices = convertToTensor(inputIndices, 'inputIndices', 'sparseReshape', 'int32');\n    const $inputShape = convertToTensor(inputShape, 'inputShape', 'sparseReshape', 'int32');\n    const $newShape = convertToTensor(newShape, 'newShape', 'sparseReshape', 'int32');\n    if ($inputIndices.rank !== 2) {\n        throw new Error(`Input indices should be Tensor2D but received shape\n        ${$inputIndices.shape}`);\n    }\n    if ($inputShape.rank !== 1) {\n        throw new Error(`Input shape should be Tensor1D but received shape ${$inputShape.shape}`);\n    }\n    if ($newShape.rank !== 1) {\n        throw new Error(`New shape should be Tensor1D but received shape ${$newShape.shape}`);\n    }\n    const inputs = {\n        inputIndices: $inputIndices,\n        inputShape: $inputShape,\n        newShape: $newShape\n    };\n    const result = ENGINE.runKernel(SparseReshape, inputs);\n    return { outputIndices: result[0], outputShape: result[1] };\n}\nexport const sparseReshape = op({ sparseReshape_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseSegmentMean } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Computes the mean along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [6,7,8,9]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentMean(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1], 'int32'),\n *                                             tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentMean(c,\n *                                             tf.tensor1d([0, 1, 2], 'int32'),\n *                                             tf.tensor1d([0, 1, 1], 'int32'));\n * result3.print(); // [[1.0, 2.0, 3.0, 4.0], [2.5, 2.5, 2.5, 2.5]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentMean_(data, indices, segmentIds) {\n    const $data = convertToTensor(data, 'data', 'sparseSegmentMean');\n    const $indices = convertToTensor(indices, 'indices', 'sparseSegmentMean', 'int32');\n    const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentMean', 'int32');\n    if ($data.rank < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if ($indices.rank !== 1) {\n        throw new Error(`Indices should be Tensor1D but received shape\n          ${$indices.shape}`);\n    }\n    if ($segmentIds.rank !== 1) {\n        throw new Error(`Segment ids should be Tensor1D but received shape\n          ${$segmentIds.shape}`);\n    }\n    const inputs = {\n        data: $data,\n        indices: $indices,\n        segmentIds: $segmentIds\n    };\n    return ENGINE.runKernel(SparseSegmentMean, inputs);\n}\nexport const sparseSegmentMean = op({ sparseSegmentMean_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { SparseSegmentSum } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Computes the sum along sparse segments of a tensor.\n *\n * ```js\n * const c = tf.tensor2d([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]]);\n * // Select two rows, one segment.\n * const result1 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 0], 'int32'));\n * result1.print(); // [[0, 0, 0, 0]]\n *\n * // Select two rows, two segments.\n * const result2 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1], 'int32'),\n *                                           tf.tensor1d([0, 1], 'int32'));\n * result2.print(); // [[1, 2, 3, 4], [-1, -2, -3, -4]]\n *\n * // Select all rows, two segments.\n * const result3 = tf.sparse.sparseSegmentSum(c,\n *                                           tf.tensor1d([0, 1, 2], 'int32'),\n *                                           tf.tensor1d([0, 0, 1], 'int32'));\n * result3.print(); // [[0, 0, 0, 0], [5, 6, 7, 8]]\n * ```\n * @param data: A Tensor of at least one dimension with data that will be\n *     assembled in the output.\n * @param indices: A 1-D Tensor with indices into data. Has same rank as\n *     segmentIds.\n * @param segmentIds: A 1-D Tensor with indices into the output Tensor. Values\n *     should be sorted and can be repeated.\n * @return Has same shape as data, except for dimension 0 which has equal to\n *         the number of segments.\n *\n * @doc {heading: 'Operations', subheading: 'Sparse'}\n */\nfunction sparseSegmentSum_(data, indices, segmentIds) {\n    const $data = convertToTensor(data, 'data', 'sparseSegmentSum');\n    const $indices = convertToTensor(indices, 'indices', 'sparseSegmentSum', 'int32');\n    const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'sparseSegmentSum', 'int32');\n    if ($data.rank < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if ($indices.rank !== 1) {\n        throw new Error(`Indices should be Tensor1D but received shape\n         ${$indices.shape}`);\n    }\n    if ($segmentIds.rank !== 1) {\n        throw new Error(`Segment ids should be Tensor1D but received shape\n         ${$segmentIds.shape}`);\n    }\n    const inputs = {\n        data: $data,\n        indices: $indices,\n        segmentIds: $segmentIds\n    };\n    return ENGINE.runKernel(SparseSegmentSum, inputs);\n}\nexport const sparseSegmentSum = op({ sparseSegmentSum_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringNGrams } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Creates ngrams from ragged string data.\n *\n * This op accepts a ragged tensor with 1 ragged dimension containing only\n * strings and outputs a ragged tensor with 1 ragged dimension containing ngrams\n * of that string, joined along the innermost axis.\n *\n * ```js\n * const result = tf.string.stringNGrams(\n *   ['a', 'b', 'c', 'd'], tf.tensor1d([0, 2, 4], 'int32'),\n *   '|', [1, 2], 'LP', 'RP', -1, false);\n * result['nGrams'].print(); // ['a', 'b', 'LP|a', 'a|b', 'b|RP',\n *                           //  'c', 'd', 'LP|c', 'c|d', 'd|RP']\n * result['nGramsSplits'].print(); // [0, 5, 10]\n * ```\n * @param data: The values tensor of the ragged string tensor to make ngrams out\n *     of. Must be a 1D string tensor.\n * @param dataSplits: The splits tensor of the ragged string tensor to make\n *     ngrams out of.\n * @param separator: The string to append between elements of the token. Use \"\"\n *     for no separator.\n * @param nGramWidths: The sizes of the ngrams to create.\n * @param leftPad: The string to use to pad the left side of the ngram sequence.\n *     Only used if pad_width !== 0.\n * @param rightPad: The string to use to pad the right side of the ngram\n *     sequence. Only used if pad_width !== 0.\n * @param padWidth: The number of padding elements to add to each side of each\n *     sequence. Note that padding will never be greater than `nGramWidths`-1\n *     regardless of this value. If `padWidth`=-1, then add max(`nGramWidths`)-1\n *     elements.\n * @param preserveShortSequences: If true, then ensure that at least one ngram\n *     is generated for each input sequence. In particular, if an input sequence\n *     is shorter than min(ngramWidth) + 2*padWidth, then generate a single\n *     ngram containing the entire sequence. If false, then no ngrams are\n *     generated for these short input sequences.\n * @return A map with the following properties:\n *     - nGrams: The values tensor of the output ngrams ragged tensor.\n *     - nGramsSplits: The splits tensor of the output ngrams ragged tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringNGrams_(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    const $data = convertToTensor(data, 'data', 'stringNGrams', 'string');\n    if ($data.dtype !== 'string') {\n        throw new Error('Data must be of datatype string');\n    }\n    if ($data.shape.length !== 1) {\n        throw new Error(`Data must be a vector, saw: ${$data.shape}`);\n    }\n    const $dataSplits = convertToTensor(dataSplits, 'dataSplits', 'stringNGrams');\n    if ($dataSplits.dtype !== 'int32') {\n        throw new Error('Data splits must be of datatype int32');\n    }\n    const attrs = {\n        separator,\n        nGramWidths,\n        leftPad,\n        rightPad,\n        padWidth,\n        preserveShortSequences\n    };\n    const inputs = { data: $data, dataSplits: $dataSplits };\n    const result = ENGINE.runKernel(StringNGrams, inputs, attrs);\n    return { nGrams: result[0], nGramsSplits: result[1] };\n}\nexport const stringNGrams = op({ stringNGrams_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringSplit } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Split elements of `input` based on `delimiter` into a SparseTensor .\n *\n * Let N be the size of source (typically N will be the batch size). Split each\n * element of `input` based on `delimiter` and return a SparseTensor containing\n * the splitted tokens. Empty tokens are ignored if `skipEmpty` is set to True.\n *\n * `delimiter` can be empty, or a string of split characters. If `delimiter` is\n * an empty string, each element of `input` is split into individual\n * character strings. Otherwise every character of `delimiter` is a potential\n * split point.\n *\n * ```js\n * const result = tf.string.stringSplit(['hello world',  'a b c'], ' ');\n * result['indices'].print(); // [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]]\n * result['values'].print(); // ['hello', 'world', 'a', 'b', 'c']\n * result['shape'].print(); // [2, 3]\n * ```\n * @param input: 1-D. Strings to split.\n * @param delimiter: 0-D. Delimiter characters, or empty string.\n * @param skipEmpty: Optional. If true, skip the empty strings from the result.\n *     Defaults to true.\n * @return A map with the following properties:\n *     - indices: A dense matrix of int32 representing the indices of the sparse\n *       tensor.\n *     - values: A vector of strings corresponding to the splited values.\n *     - shape: a length-2 vector of int32 representing the shape of the sparse\n * tensor, where the first value is N and the second value is the maximum number\n * of tokens in a single input entry.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringSplit_(input, delimiter, skipEmpty = true) {\n    const $input = convertToTensor(input, 'input', 'stringSplit', 'string');\n    const $delimiter = convertToTensor(delimiter, 'delimiter', 'stringSplit', 'string');\n    if ($input.rank !== 1) {\n        throw new Error(`Input should be Tensor1D but received shape ${$input.shape}`);\n    }\n    if ($delimiter.rank !== 0) {\n        throw new Error(`Delimiter should be a scalar but received shape ${$delimiter.shape}`);\n    }\n    const attrs = { skipEmpty };\n    const inputs = { input: $input, delimiter: $delimiter };\n    const result = ENGINE.runKernel(StringSplit, inputs, attrs);\n    return { indices: result[0], values: result[1], shape: result[2] };\n}\nexport const stringSplit = op({ stringSplit_ });\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringToHashBucketFast } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Converts each string in the input Tensor to its hash mod by a number of\n * buckets.\n *\n * The hash function is deterministic on the content of the string within the\n * process and will never change. However, it is not suitable for cryptography.\n * This function may be used when CPU time is scarce and inputs are trusted or\n * unimportant. There is a risk of adversaries constructing inputs that all hash\n * to the same bucket.\n *\n * ```js\n * const result = tf.string.stringToHashBucketFast(\n *   ['Hello', 'TensorFlow', '2.x'], 3);\n * result.print(); // [0, 2, 2]\n * ```\n * @param input: The strings to assign a hash bucket.\n * @param numBuckets: The number of buckets.\n * @return A Tensor of the same shape as the input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringToHashBucketFast_(input, numBuckets) {\n    const $input = convertToTensor(input, 'input', 'stringToHashBucketFast', 'string');\n    const attrs = { numBuckets };\n    if (numBuckets <= 0) {\n        throw new Error(`Number of buckets must be at least 1`);\n    }\n    const inputs = { input: $input };\n    return ENGINE.runKernel(StringToHashBucketFast, inputs, attrs);\n}\nexport const stringToHashBucketFast = op({ stringToHashBucketFast_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Modularized ops.\nexport { abs } from './abs';\nexport { acos } from './acos';\nexport { acosh } from './acosh';\nexport { add } from './add';\nexport { addN } from './add_n';\nexport { all } from './all';\nexport { any } from './any';\nexport { argMax } from './arg_max';\nexport { argMin } from './arg_min';\nexport { asin } from './asin';\nexport { asinh } from './asinh';\nexport { atan } from './atan';\nexport { atan2 } from './atan2';\nexport { atanh } from './atanh';\nexport { avgPool } from './avg_pool';\nexport { avgPool3d } from './avg_pool_3d';\nexport { basicLSTMCell } from './basic_lstm_cell';\nexport { batchToSpaceND } from './batch_to_space_nd';\nexport { batchNorm } from './batchnorm';\nexport { batchNorm2d } from './batchnorm2d';\nexport { batchNorm3d } from './batchnorm3d';\nexport { batchNorm4d } from './batchnorm4d';\nexport { bincount } from './bincount';\nexport { broadcastArgs } from './broadcast_args';\nexport { broadcastTo } from './broadcast_to';\nexport { buffer } from './buffer';\nexport { cast } from './cast';\nexport { ceil } from './ceil';\nexport { clipByValue } from './clip_by_value';\nexport { clone } from './clone';\nexport { complex } from './complex';\nexport { concat } from './concat';\nexport { concat1d } from './concat_1d';\nexport { concat2d } from './concat_2d';\nexport { concat3d } from './concat_3d';\nexport { concat4d } from './concat_4d';\nexport { conv1d } from './conv1d';\nexport { conv2d } from './conv2d';\nexport { conv2dTranspose } from './conv2d_transpose';\nexport { conv3d } from './conv3d';\nexport { conv3dTranspose } from './conv3d_transpose';\nexport { cos } from './cos';\nexport { cosh } from './cosh';\nexport { cumprod } from './cumprod';\nexport { cumsum } from './cumsum';\nexport { denseBincount } from './dense_bincount';\nexport { depthToSpace } from './depth_to_space';\nexport { depthwiseConv2d } from './depthwise_conv2d';\nexport { diag } from './diag';\nexport { dilation2d } from './dilation2d';\nexport { div } from './div';\nexport { divNoNan } from './div_no_nan';\nexport { dot } from './dot';\nexport { einsum } from './einsum';\nexport { elu } from './elu';\nexport { equal } from './equal';\nexport { erf } from './erf';\nexport { euclideanNorm } from './euclidean_norm';\nexport { exp } from './exp';\nexport { expandDims } from './expand_dims';\nexport { expm1 } from './expm1';\nexport { eye } from './eye';\nexport { fill } from './fill';\nexport { floor } from './floor';\nexport { floorDiv } from './floorDiv';\nexport { gather } from './gather';\nexport { greater } from './greater';\nexport { greaterEqual } from './greater_equal';\nexport { imag } from './imag';\nexport { isFinite } from './is_finite';\nexport { isInf } from './is_inf';\nexport { isNaN } from './is_nan';\nexport { leakyRelu } from './leaky_relu';\nexport { less } from './less';\nexport { lessEqual } from './less_equal';\nexport { linspace } from './linspace';\nexport { localResponseNormalization } from './local_response_normalization';\nexport { log } from './log';\nexport { log1p } from './log1p';\nexport { logSigmoid } from './log_sigmoid';\nexport { logSoftmax } from './log_softmax';\nexport { logSumExp } from './log_sum_exp';\nexport { logicalAnd } from './logical_and';\nexport { logicalNot } from './logical_not';\nexport { logicalOr } from './logical_or';\nexport { logicalXor } from './logical_xor';\nexport { lowerBound } from './lower_bound';\nexport { matMul } from './mat_mul';\nexport { max } from './max';\nexport { maxPool } from './max_pool';\nexport { maxPool3d } from './max_pool_3d';\nexport { maxPoolWithArgmax } from './max_pool_with_argmax';\nexport { maximum } from './maximum';\nexport { mean } from './mean';\nexport { meshgrid } from './meshgrid';\nexport { min } from './min';\nexport { minimum } from './minimum';\nexport { mirrorPad } from './mirror_pad';\nexport { mod } from './mod';\nexport { moments } from './moments';\nexport { mul } from './mul';\nexport { multiRNNCell } from './multi_rnn_cell';\nexport { multinomial } from './multinomial';\nexport { neg } from './neg';\nexport { notEqual } from './not_equal';\nexport { oneHot } from './one_hot';\nexport { ones } from './ones';\nexport { onesLike } from './ones_like';\nexport { outerProduct } from './outer_product';\nexport { pad } from './pad';\nexport { pad1d } from './pad1d';\nexport { pad2d } from './pad2d';\nexport { pad3d } from './pad3d';\nexport { pad4d } from './pad4d';\nexport { pool } from './pool';\nexport { pow } from './pow';\nexport { prelu } from './prelu';\nexport { print } from './print';\nexport { prod } from './prod';\nexport { raggedGather } from './ragged_gather';\nexport { raggedTensorToTensor } from './ragged_tensor_to_tensor';\nexport { rand } from './rand';\nexport { randomGamma } from './random_gamma';\nexport { randomNormal } from './random_normal';\nexport { randomStandardNormal } from './random_standard_normal';\nexport { randomUniform } from './random_uniform';\nexport { range } from './range';\nexport { real } from './real';\nexport { reciprocal } from './reciprocal';\nexport { relu } from './relu';\nexport { relu6 } from './relu6';\nexport { reshape } from './reshape';\nexport { reverse } from './reverse';\nexport { reverse1d } from './reverse_1d';\nexport { reverse2d } from './reverse_2d';\nexport { reverse3d } from './reverse_3d';\nexport { reverse4d } from './reverse_4d';\nexport { round } from './round';\nexport { rsqrt } from './rsqrt';\nexport { scalar } from './scalar';\nexport { selu } from './selu';\nexport { separableConv2d } from './separable_conv2d';\nexport { setdiff1dAsync } from './setdiff1d_async';\nexport { sigmoid } from './sigmoid';\nexport { sign } from './sign';\nexport { sin } from './sin';\nexport { sinh } from './sinh';\nexport { slice } from './slice';\nexport { slice1d } from './slice1d';\nexport { slice2d } from './slice2d';\nexport { slice3d } from './slice3d';\nexport { slice4d } from './slice4d';\nexport { softmax } from './softmax';\nexport { softplus } from './softplus';\nexport { spaceToBatchND } from './space_to_batch_nd';\nexport { fft } from './spectral/fft';\nexport { ifft } from './spectral/ifft';\nexport { irfft } from './spectral/irfft';\nexport { rfft } from './spectral/rfft';\nexport { split } from './split';\nexport { sqrt } from './sqrt';\nexport { square } from './square';\nexport { squaredDifference } from './squared_difference';\nexport { squeeze } from './squeeze';\nexport { stack } from './stack';\nexport { step } from './step';\nexport { stridedSlice } from './strided_slice';\nexport { sub } from './sub';\nexport { sum } from './sum';\nexport { tan } from './tan';\nexport { tanh } from './tanh';\nexport { tensor } from './tensor';\nexport { tensor1d } from './tensor1d';\nexport { tensor2d } from './tensor2d';\nexport { tensor3d } from './tensor3d';\nexport { tensor4d } from './tensor4d';\nexport { tensor5d } from './tensor5d';\nexport { tensor6d } from './tensor6d';\nexport { tile } from './tile';\nexport { topk } from './topk';\nexport { truncatedNormal } from './truncated_normal';\nexport { unique } from './unique';\nexport { unsortedSegmentSum } from './unsorted_segment_sum';\nexport { unstack } from './unstack';\nexport { upperBound } from './upper_bound';\nexport { variable } from './variable';\nexport { where } from './where';\nexport { whereAsync } from './where_async';\nexport { zeros } from './zeros';\nexport { zerosLike } from './zeros_like';\nexport * from './boolean_mask';\nexport * from './transpose';\nexport * from './norm';\nexport * from './moving_average';\nexport * from './scatter_nd';\nexport * from './search_sorted';\nexport * from './sparse_to_dense';\nexport * from './gather_nd';\nexport * from './dropout';\nexport * from './signal_ops_util';\nexport * from './in_top_k';\nexport { op, OP_SCOPE_SUFFIX } from './operation';\nimport { rfft } from './spectral/rfft';\nimport { fft } from './spectral/fft';\nimport { ifft } from './spectral/ifft';\nimport { irfft } from './spectral/irfft';\nconst spectral = {\n    fft,\n    ifft,\n    rfft,\n    irfft\n};\nimport * as fused from './fused_ops';\nimport { hammingWindow } from './signal/hamming_window';\nimport { hannWindow } from './signal/hann_window';\nimport { frame } from './signal/frame';\nimport { stft } from './signal/stft';\nconst signal = {\n    hammingWindow,\n    hannWindow,\n    frame,\n    stft,\n};\n// Image Ops namespace\nimport { cropAndResize } from './image/crop_and_resize';\nimport { flipLeftRight } from './image/flip_left_right';\nimport { grayscaleToRGB } from './image/grayscale_to_rgb';\nimport { rotateWithOffset } from './image/rotate_with_offset';\nimport { nonMaxSuppression } from './image/non_max_suppression';\nimport { nonMaxSuppressionAsync } from './image/non_max_suppression_async';\nimport { nonMaxSuppressionWithScore } from './image/non_max_suppression_with_score';\nimport { nonMaxSuppressionWithScoreAsync } from './image/non_max_suppression_with_score_async';\nimport { nonMaxSuppressionPadded } from './image/non_max_suppression_padded';\nimport { nonMaxSuppressionPaddedAsync } from './image/non_max_suppression_padded_async';\nimport { resizeBilinear } from './image/resize_bilinear';\nimport { resizeNearestNeighbor } from './image/resize_nearest_neighbor';\nimport { threshold } from './image/threshold';\nimport { transform } from './image/transform';\nconst image = {\n    flipLeftRight,\n    grayscaleToRGB,\n    resizeNearestNeighbor,\n    resizeBilinear,\n    rotateWithOffset,\n    cropAndResize,\n    nonMaxSuppression,\n    nonMaxSuppressionAsync,\n    nonMaxSuppressionWithScore,\n    nonMaxSuppressionWithScoreAsync,\n    nonMaxSuppressionPadded,\n    nonMaxSuppressionPaddedAsync,\n    threshold,\n    transform\n};\n// linalg namespace\nimport { bandPart } from './linalg/band_part';\nimport { gramSchmidt } from './linalg/gram_schmidt';\nimport { qr } from './linalg/qr';\nconst linalg = {\n    bandPart,\n    gramSchmidt,\n    qr\n};\n// losses namespace;\nimport { absoluteDifference } from './losses/absolute_difference';\nimport { computeWeightedLoss } from './losses/compute_weighted_loss';\nimport { cosineDistance } from './losses/cosine_distance';\nimport { hingeLoss } from './losses/hinge_loss';\nimport { huberLoss } from './losses/huber_loss';\nimport { logLoss } from './losses/log_loss';\nimport { meanSquaredError } from './losses/mean_squared_error';\nimport { sigmoidCrossEntropy } from './losses/sigmoid_cross_entropy';\nimport { softmaxCrossEntropy } from './losses/softmax_cross_entropy';\nconst losses = {\n    absoluteDifference,\n    computeWeightedLoss,\n    cosineDistance,\n    hingeLoss,\n    huberLoss,\n    logLoss,\n    meanSquaredError,\n    sigmoidCrossEntropy,\n    softmaxCrossEntropy\n};\nimport { sparseFillEmptyRows } from './sparse/sparse_fill_empty_rows';\nimport { sparseReshape } from './sparse/sparse_reshape';\nimport { sparseSegmentMean } from './sparse/sparse_segment_mean';\nimport { sparseSegmentSum } from './sparse/sparse_segment_sum';\nconst sparse = {\n    sparseFillEmptyRows,\n    sparseReshape,\n    sparseSegmentMean,\n    sparseSegmentSum\n};\nimport { stringNGrams } from './string/string_n_grams';\nimport { stringSplit } from './string/string_split';\nimport { stringToHashBucketFast } from './string/string_to_hash_bucket_fast';\n// tslint:disable-next-line:variable-name\nconst string = {\n    stringNGrams,\n    stringSplit,\n    stringToHashBucketFast\n};\n// Second level exports.\nexport { image, linalg, losses, spectral, fused, signal, sparse, string };\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst delayCallback = (() => {\n    if (typeof requestAnimationFrame !== 'undefined') {\n        return requestAnimationFrame;\n    }\n    else if (typeof setImmediate !== 'undefined') {\n        return setImmediate;\n    }\n    return (f) => f(); // no delays\n})();\n/**\n * Returns a promise that resolves when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame() {\n    return new Promise(resolve => delayCallback(() => resolve()));\n}\nexport { nextFrame };\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nexport function assertParamsConsistent(shapes, axis) {\n    const rank = shapes[0].length;\n    shapes.forEach((shape, i) => {\n        util.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n    });\n    util.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n    const firstShape = shapes[0];\n    shapes.forEach((shape, i) => {\n        for (let r = 0; r < rank; r++) {\n            util.assert((r === axis) || (shape[r] === firstShape[r]), () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n                `does not match the shape of the rest (${firstShape}) ` +\n                `along the non-concatenated axis ${i}.`);\n        }\n    });\n}\nexport function computeOutShape(shapes, axis) {\n    const outputShape = shapes[0].slice();\n    for (let i = 1; i < shapes.length; i++) {\n        outputShape[axis] += shapes[i][axis];\n    }\n    return outputShape;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {\n    // `computerConv2DInfo` require filterShape to be in the dimension of:\n    // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n    // outDepth, it should have the same depth as the input.\n    // Input shape: [batch, height, width, inChannels]\n    const inputChannels = inputShape[3];\n    const $filterShape = [...filterShape, inputChannels];\n    const $dataFormat = convertConv2DDataFormat(dataFormat);\n    return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\nexport function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {\n    const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n    let filterShape;\n    if (dataFormat === 'channelsLast') {\n        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n    }\n    else if (dataFormat === 'channelsFirst') {\n        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {\n    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n    let filterShape;\n    let $dataFormat;\n    if (dataFormat === 'NDHWC') {\n        $dataFormat = 'channelsLast';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n    }\n    else if (dataFormat === 'NCDHW') {\n        $dataFormat = 'channelsFirst';\n        filterShape =\n            [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);\n}\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {\n    let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideHeight, strideWidth] = parseTupleParam(strides);\n    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inHeight,\n        inWidth,\n        inChannels,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideHeight,\n        strideWidth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {\n    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n    if (dataFormat === 'channelsLast') {\n        [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n    }\n    else if (dataFormat === 'channelsFirst') {\n        [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;\n    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    let outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n    }\n    else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize,\n        dataFormat,\n        inDepth,\n        inHeight,\n        inWidth,\n        inChannels,\n        outDepth,\n        outHeight,\n        outWidth,\n        outChannels,\n        padInfo,\n        strideDepth,\n        strideHeight,\n        strideWidth,\n        filterDepth,\n        filterHeight,\n        filterWidth,\n        effectiveFilterDepth,\n        effectiveFilterHeight,\n        effectiveFilterWidth,\n        dilationDepth,\n        dilationHeight,\n        dilationWidth,\n        inShape,\n        outShape,\n        filterShape\n    };\n}\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputRows = inShape[0];\n    const inputCols = inShape[1];\n    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    return [outputRows, outputCols];\n}\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    const inputDepth = inShape[0];\n    const inputRows = inShape[1];\n    const inputCols = inShape[2];\n    const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    return [outputDepths, outputRows, outputCols, outChannels];\n}\nexport function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {\n    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\nfunction parseTupleParam(param) {\n    if (typeof param === 'number') {\n        return [param, param, param];\n    }\n    if (param.length === 2) {\n        return [param[0], param[1], 1];\n    }\n    return param;\n}\nfunction parse3TupleParam(param) {\n    return typeof param === 'number' ? [param, param, param] : param;\n}\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize, dilation) {\n    if (dilation <= 1) {\n        return filterSize;\n    }\n    return filterSize + (filterSize - 1) * (dilation - 1);\n}\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n    let padInfo;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };\n        const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n        outHeight = outShape[0];\n        outWidth = outShape[1];\n    }\n    else if (pad === 'same') {\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else if (typeof pad === 'object') {\n        const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n        const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n        const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n        const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n        const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n            'VALID' :\n            'EXPLICIT';\n        padInfo = { top, bottom, left, right, type: padType };\n        outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n        outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outHeight, outWidth };\n}\nfunction get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n    let padInfo;\n    let outDepth;\n    let outHeight;\n    let outWidth;\n    if (typeof pad === 'number') {\n        const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n        padInfo = {\n            top: pad,\n            bottom: pad,\n            left: pad,\n            right: pad,\n            front: pad,\n            back: pad,\n            type: padType\n        };\n        const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);\n        outDepth = outShape[0];\n        outHeight = outShape[1];\n        outWidth = outShape[2];\n    }\n    else if (pad === 'same') {\n        outDepth = Math.ceil(inDepth / strideDepth);\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n        const front = Math.floor(padAlongDepth / 2);\n        const back = padAlongDepth - front;\n        const top = Math.floor(padAlongHeight / 2);\n        const bottom = padAlongHeight - top;\n        const left = Math.floor(padAlongWidth / 2);\n        const right = padAlongWidth - left;\n        padInfo = { top, bottom, left, right, front, back, type: 'SAME' };\n    }\n    else if (pad === 'valid') {\n        padInfo = {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            front: 0,\n            back: 0,\n            type: 'VALID'\n        };\n        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    }\n    else {\n        throw Error(`Unknown padding parameter: ${pad}`);\n    }\n    return { padInfo, outDepth, outHeight, outWidth };\n}\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value, roundingMode) {\n    if (!roundingMode) {\n        return Math.trunc(value);\n    }\n    switch (roundingMode) {\n        case 'round':\n            // used for Caffe Conv\n            return Math.round(value);\n        case 'ceil':\n            // used for Caffe Pool\n            return Math.ceil(value);\n        case 'floor':\n            return Math.floor(value);\n        default:\n            throw new Error(`Unknown roundingMode ${roundingMode}`);\n    }\n}\nexport function tupleValuesAreOne(param) {\n    const [dimA, dimB, dimC] = parseTupleParam(param);\n    return dimA === 1 && dimB === 1 && dimC === 1;\n}\nexport function eitherStridesOrDilationsAreOne(strides, dilations) {\n    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat) {\n    if (dataFormat === 'NHWC') {\n        return 'channelsLast';\n    }\n    else if (dataFormat === 'NCHW') {\n        return 'channelsFirst';\n    }\n    else {\n        throw new Error(`Unknown dataFormat ${dataFormat}`);\n    }\n}\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\nexport function checkPadOnDimRoundingMode(opDesc, pad, dimRoundingMode) {\n    if (dimRoundingMode != null) {\n        if (typeof pad === 'string') {\n            throw Error(`Error in ${opDesc}: pad must be an integer when using ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n        }\n        else if (typeof pad === 'number') {\n            util.assert(util.isInt(pad), () => `Error in ${opDesc}: pad must be an integer when using ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n        }\n        else if (typeof pad === 'object') {\n            pad.forEach(p => {\n                p.forEach(v => {\n                    util.assert(util.isInt(v), () => `Error in ${opDesc}: pad must be an integer when using ` +\n                        `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n                });\n            });\n        }\n        else {\n            throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Elu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes exponential linear element-wise: `x > 0 ? x : (e ^ x) - 1`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 1, -3, 2]);\n *\n * x.elu().print();  // or tf.elu(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction elu_(x) {\n    const $x = convertToTensor(x, 'x', 'elu', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Elu, inputs);\n}\nexport const elu = op({ elu_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LeakyRelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes leaky rectified linear element-wise.\n *\n * See\n * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n *\n * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n * ```\n * @param x The input tensor.\n * @param alpha The scaling factor for negative values, defaults to 0.2.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction leakyRelu_(x, alpha = 0.2) {\n    const $x = convertToTensor(x, 'x', 'leakyRelu');\n    const inputs = { x: $x };\n    const attrs = { alpha };\n    return ENGINE.runKernel(LeakyRelu, inputs, attrs);\n}\nexport const leakyRelu = op({ leakyRelu_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Prelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes leaky rectified linear element-wise with parametric alphas.\n *\n * `x < 0 ? alpha * x : f(x) = x`\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 4]);\n * const alpha = tf.scalar(0.1);\n *\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\n * ```\n * @param x The input tensor.\n * @param alpha Scaling factor for negative values.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction prelu_(x, alpha) {\n    const $x = convertToTensor(x, 'x', 'prelu');\n    const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n    const inputs = { x: $x, alpha: $alpha };\n    return ENGINE.runKernel(Prelu, inputs);\n}\nexport const prelu = op({ prelu_ });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Relu6 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.\n *\n * ```js\n * const x = tf.tensor1d([-1, 2, -3, 8]);\n *\n * x.relu6().print();  // or tf.relu6(x)\n * ```\n * @param x The input tensor. If the dtype is `bool`, the output dtype will be\n *     `int32`.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction relu6_(x) {\n    const $x = convertToTensor(x, 'x', 'relu6');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Relu6, inputs);\n}\nexport const relu6 = op({ relu6_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Sigmoid } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n *\n * ```js\n * const x = tf.tensor1d([0, -1, 2, -3]);\n *\n * x.sigmoid().print();  // or tf.sigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction sigmoid_(x) {\n    const $x = convertToTensor(x, 'x', 'sigmoid', 'float32');\n    const inputs = { x: $x };\n    return ENGINE.runKernel(Sigmoid, inputs);\n}\nexport const sigmoid = op({ sigmoid_ });\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Step } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n *\n * ```js\n * const x = tf.tensor1d([0, 2, -1, -3]);\n *\n * x.step(.5).print();  // or tf.step(x, .5)\n * ```\n * @param x The input tensor.\n * @param alpha The gradient when input is negative.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction step_(x, alpha = 0.0) {\n    const $x = convertToTensor(x, 'x', 'step');\n    const inputs = { x: $x };\n    const attrs = { alpha };\n    return ENGINE.runKernel(Step, inputs, attrs);\n}\nexport const step = op({ step_ });\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as broadcast_util from './broadcast_util';\nimport { elu } from './elu';\nimport { leakyRelu } from './leaky_relu';\nimport { mul } from './mul';\nimport { prelu } from './prelu';\nimport { relu } from './relu';\nimport { relu6 } from './relu6';\nimport { reshape } from './reshape';\nimport { sigmoid } from './sigmoid';\nimport { step } from './step';\nimport { sum } from './sum';\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(dy, y, activation) {\n    if (activation == null || activation === 'linear') {\n        return dy;\n    }\n    if (activation === 'relu') {\n        return mul(dy, step(y));\n    }\n    throw new Error(`Cannot compute gradient for fused activation ${activation}.`);\n}\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(bias, dyActivation) {\n    let res = dyActivation;\n    const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n    if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n    }\n    return reshape(res, bias.shape);\n}\nexport function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {\n    if (activation === 'linear') {\n        return x;\n    }\n    else if (activation === 'relu') {\n        return relu(x);\n    }\n    else if (activation === 'elu') {\n        return elu(x);\n    }\n    else if (activation === 'relu6') {\n        return relu6(x);\n    }\n    else if (activation === 'prelu') {\n        return prelu(x, preluActivationWeights);\n    }\n    else if (activation === 'leakyrelu') {\n        return leakyRelu(x, leakyreluAlpha);\n    }\n    else if (activation === 'sigmoid') {\n        return sigmoid(x);\n    }\n    throw new Error(`Unknown fused activation ${activation}.`);\n}\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth, activation) => {\n    const gradientMode = gradientDepth > 0;\n    return !gradientMode || activation === 'linear';\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var RowPartitionType;\n(function (RowPartitionType) {\n    RowPartitionType[RowPartitionType[\"FIRST_DIM_SIZE\"] = 0] = \"FIRST_DIM_SIZE\";\n    RowPartitionType[RowPartitionType[\"VALUE_ROWIDS\"] = 1] = \"VALUE_ROWIDS\";\n    RowPartitionType[RowPartitionType[\"ROW_LENGTHS\"] = 2] = \"ROW_LENGTHS\";\n    RowPartitionType[RowPartitionType[\"ROW_SPLITS\"] = 3] = \"ROW_SPLITS\";\n    RowPartitionType[RowPartitionType[\"ROW_LIMITS\"] = 4] = \"ROW_LIMITS\";\n    RowPartitionType[RowPartitionType[\"ROW_STARTS\"] = 5] = \"ROW_STARTS\";\n})(RowPartitionType || (RowPartitionType = {}));\nexport function combineRaggedTensorToTensorShapes(raggedRank, shape, valueShape) {\n    // Test for consistency of valueShape and shape specified.\n    // If shape is unspecified and valueShape is specified, then copy\n    // over the size from the valueShape dimension.\n    let outputShape = new Array();\n    if (valueShape == null && shape == null) {\n        return outputShape;\n    }\n    if (shape == null) {\n        // Here, value_shape must be of known size.\n        while (outputShape.length < raggedRank + valueShape.length) {\n            outputShape.push(-1);\n        }\n    }\n    else {\n        outputShape = shape.slice();\n    }\n    if (valueShape == null) {\n        return outputShape;\n    }\n    // At this point, valueShape and output_shape have known ranks.\n    if (raggedRank + valueShape.length !== outputShape.length) {\n        throw new Error(`rt input.shape and shape=${shape} are incompatible: rt input.rank = ${raggedRank +\n            valueShape.length}, but shape.rank = ${outputShape.length}`);\n    }\n    for (let i = 1; i < valueShape.length; ++i) {\n        const valueDim = valueShape[i];\n        const outputShapeDimIndex = outputShape[outputShape.length - valueShape.length + i];\n        const outputShapeDim = outputShape[outputShapeDimIndex];\n        if (valueDim >= 0) {\n            if (outputShapeDim >= 0) {\n                if (outputShapeDim !== valueDim) {\n                    throw new Error(`rt input.shape and shape=${shape} are incompatible: rt input.shape[${i + raggedRank}] = ${valueDim} but shape[${i + raggedRank}] = ${outputShapeDim}`);\n                }\n            }\n            else {\n                outputShape[outputShapeDimIndex] = valueDim;\n            }\n        }\n    }\n    return outputShape;\n}\nexport function getRowPartitionTypesHelper(rowPartitionTypeStrings) {\n    const stringToType = {\n        'FIRST_DIM_SIZE': RowPartitionType.FIRST_DIM_SIZE,\n        'VALUE_ROWIDS': RowPartitionType.VALUE_ROWIDS,\n        'ROW_LENGTHS': RowPartitionType.ROW_LENGTHS,\n        'ROW_SPLITS': RowPartitionType.ROW_SPLITS,\n        'ROW_LIMITS': RowPartitionType.ROW_LIMITS,\n        'ROW_STARTS': RowPartitionType.ROW_STARTS\n    };\n    const result = [];\n    for (const typeStr of rowPartitionTypeStrings) {\n        if (typeStr in stringToType) {\n            result.push(stringToType[typeStr]);\n        }\n        else {\n            break;\n        }\n    }\n    return result;\n}\nexport function getRaggedRank(rowPartitionTypes) {\n    if (rowPartitionTypes.length === 0) {\n        return 0;\n    }\n    if (rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n        return rowPartitionTypes.length - 1;\n    }\n    return rowPartitionTypes.length;\n}\nexport function validateDefaultValueShape(defaultValueShape, valueShape) {\n    if (defaultValueShape == null || valueShape == null) {\n        return;\n    }\n    const defaultNDims = defaultValueShape.length;\n    const valuesNDims = valueShape.length;\n    if (defaultNDims >= valuesNDims) {\n        throw new Error(`defaultValue.shape=${defaultValueShape} and ragged tensor flatValues.shape=${valueShape}, are incompatible: defaultValue.rank = ${defaultNDims} must be less than ragged tensor input flatValues.rank = ${valuesNDims})`);\n    }\n    for (let i = 0; i < Math.min(defaultNDims, valuesNDims - 1); ++i) {\n        const defaultDim = defaultValueShape[i];\n        const valueDim = valueShape[i + 1];\n        if (defaultDim >= 0 && valueDim >= 0 && defaultDim !== 1 &&\n            defaultDim !== valueDim) {\n            throw new Error(`defaultValue.shape=${defaultValueShape}, and ragged tensor input flatValues.shape=${valueShape} are incompatible: defaultValue.shape[${i - defaultValueShape.length}] = ${defaultDim} but ragged tensor input.flatValues.shape[${i - defaultValueShape.length}] = ${valueDim}`);\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Inputs of size above this threshold will be parallelized by calling multiple\n * shader programs.\n */\nimport { nearestDivisor } from '../util';\nexport const PARALLELIZE_THRESHOLD = 30;\nexport function computeOptimalWindowSize(inSize) {\n    if (inSize <= PARALLELIZE_THRESHOLD) {\n        return inSize;\n    }\n    return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Returns the image center in pixels.\nexport function getImageCenter(center, imageHeight, imageWidth) {\n    const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);\n    const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);\n    return [centerX, centerY];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Gets the new shape of the input Tensor after it's been reshaped\n * to:\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\n * inputShape[1], ..., inputShape[N-1]]\n *\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {\n    let reshaped = [];\n    if (batchToSpace) {\n        reshaped = reshaped.concat(blockShape.slice(0));\n        reshaped.push(inputShape[0] / prod);\n        reshaped = reshaped.concat(inputShape.slice(1));\n    }\n    else {\n        reshaped = reshaped.concat(inputShape[0]);\n        const spatialLength = blockShape.length;\n        for (let i = 0; i < spatialLength; ++i) {\n            reshaped =\n                reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n        }\n        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n    }\n    return reshaped;\n}\n/**\n * Gets the permutation that will transpose the dimensions of the\n * reshaped tensor to shape:\n *\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {\n    const permuted = [];\n    if (batchToSpace) {\n        permuted.push(blockShapeRank);\n        for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n            if (i <= 2 * blockShapeRank) {\n                permuted.push(i);\n                permuted.push(i - (blockShapeRank + 1));\n            }\n            else {\n                permuted.push(i);\n            }\n        }\n    }\n    else {\n        const permutedBeforeBatch = [];\n        const permutedAfterBatch = [];\n        for (let i = 1; i < reshapedRank; ++i) {\n            if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n                permutedAfterBatch.push(i);\n            }\n            else {\n                permutedBeforeBatch.push(i);\n            }\n        }\n        permuted.push(...permutedBeforeBatch);\n        permuted.push(0);\n        permuted.push(...permutedAfterBatch);\n    }\n    return permuted;\n}\n/**\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\n * is applied.  The new shape will be:\n *\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {\n    const reshapedPermuted = [];\n    if (batchToSpace) {\n        reshapedPermuted.push(inputShape[0] / prod);\n    }\n    else {\n        reshapedPermuted.push(inputShape[0] * prod);\n    }\n    for (let i = 1; i < inputShape.length; ++i) {\n        if (i <= blockShape.length) {\n            if (batchToSpace) {\n                reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n            }\n            else {\n                reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n            }\n        }\n        else {\n            reshapedPermuted.push(inputShape[i]);\n        }\n    }\n    return reshapedPermuted;\n}\n/**\n * Converts the crops argument into the beginning coordinates of a slice\n * operation.\n */\nexport function getSliceBeginCoords(crops, blockShape) {\n    const sliceBeginCoords = [0];\n    for (let i = 0; i < blockShape; ++i) {\n        sliceBeginCoords.push(crops[i][0]);\n    }\n    return sliceBeginCoords;\n}\n/**\n * Converts the crops argument into the size of a slice operation.  When\n * combined with getSliceBeginCoords this function allows the reshaped and\n * permuted Tensor to be cropped to its final output shape of:\n *\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\n *\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\n */\nexport function getSliceSize(uncroppedShape, crops, blockShape) {\n    const sliceSize = uncroppedShape.slice(0, 1);\n    for (let i = 0; i < blockShape; ++i) {\n        sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n    }\n    return sliceSize;\n}\n","import { computeStrides, sizeFromShape } from '../util';\n/**\n * Validate gather nd inputs.\n *\n * @param tensor The tensor contains the source values.\n * @param indices The tensor contains the indices to slice the source.\n *\n * @returns [resultShape, numUpdates, sliceSize, strides]\n */\nexport function prepareAndValidate(tensor, indices) {\n    const tensorRank = tensor.shape.length;\n    const indicesRank = indices.shape.length;\n    if (tensorRank < 1) {\n        throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' +\n            ` but the rank was ${tensorRank}.`);\n    }\n    if (indicesRank < 1) {\n        throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' +\n            ` but the rank was ${indicesRank}.`);\n    }\n    if (indices.dtype !== 'int32') {\n        throw new Error('tf.gatherND() expects the indices to be int32 type,' +\n            ` but the dtype was ${indices.dtype}.`);\n    }\n    if (indices.shape[indicesRank - 1] > tensorRank) {\n        throw new Error('index innermost dimension length must be <= tensor rank; saw: ' +\n            `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);\n    }\n    if (sizeFromShape(tensor.shape) === 0) {\n        throw new Error('Requested more than 0 entries, but input is empty.' +\n            ` Input shape: ${tensor.shape}.`);\n    }\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    // The result shape is\n    //   indices.shape[:-1] + params.shape[indices.shape[-1]:]\n    let nResult = 1;\n    for (let i = 0; i < indicesShape.length - 1; ++i) {\n        nResult *= indicesShape[i];\n    }\n    const inputShape = tensor.shape;\n    const resultShape = indicesShape.slice();\n    resultShape.pop();\n    let sliceSize = 1;\n    for (let i = sliceRank; i < tensorRank; ++i) {\n        sliceSize *= inputShape[i];\n        resultShape.push(inputShape[i]);\n    }\n    const strides = [...computeStrides(tensor.shape).map(stride => stride / sliceSize),\n        1].slice(0, sliceRank);\n    return [resultShape, nResult, sliceSize, strides];\n}\n","import { computeStrides, sizeFromShape } from '../util';\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(shape, indices, updates) {\n    const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n    const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n    const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n        `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n        `, indices.shape: ${indices.shape}, shape: ${shape}` +\n        `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n    if (updates.rank < batchDim) {\n        throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n    }\n    if (shape.length < sliceDim + (updates.rank - batchDim)) {\n        throw new Error(shapeError +\n            ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n    }\n    if (updates.rank !== batchDim + shape.length - sliceDim) {\n        throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n    }\n    for (let d = 0; d < batchDim; ++d) {\n        if (updates.shape[d] !== indices.shape[d]) {\n            throw new Error(shapeError +\n                ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);\n        }\n    }\n    for (let d = 0; d < updates.rank - batchDim; ++d) {\n        if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n            throw new Error(shapeError +\n                ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);\n        }\n    }\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(updates, indices, shape) {\n    if (indices.rank < 1) {\n        throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' +\n            ` but the rank was ${indices.rank}.`);\n    }\n    if (updates.rank < 1) {\n        throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' +\n            ` but the rank was ${updates.rank}.`);\n    }\n    if (indices.dtype !== 'int32') {\n        throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);\n    }\n    if (shape.length < 1) {\n        throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);\n    }\n    if (shape.length === 0) {\n        if (indices.size === 0) {\n            throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);\n        }\n        if (updates.size === 0) {\n            throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);\n        }\n    }\n    validateUpdateShape(shape, indices, updates);\n}\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(updates, indices, shape) {\n    // Calculate the number of dimensions in indices\n    const indicesRank = indices.shape.length;\n    const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;\n    // Calculate the number of elements that make up each slice of our updated\n    // tensor. This allows us to work with flattened tensors and copy over whole\n    // slices at a time.\n    const totalNd = shape.length;\n    let sliceSize = 1;\n    for (let i = sliceRank; i < totalNd; ++i) {\n        sliceSize *= shape[i];\n    }\n    const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n    const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n    const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n    const outputSize = sizeFromShape(shape);\n    return { sliceRank, numUpdates, sliceSize, strides, outputSize };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexport const SELU_SCALE = 1.0507009873554804934193349852946;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const ERF_P = 0.3275911;\nexport const ERF_A1 = 0.254829592;\nexport const ERF_A2 = -0.284496736;\nexport const ERF_A3 = 1.421413741;\nexport const ERF_A4 = -1.453152027;\nexport const ERF_A5 = 1.061405429;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Merges real and imaginary Float32Arrays into a single complex Float32Array.\n *\n * The memory layout is interleaved as follows:\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n * complex: [r0, i0, r1, i1, r2, i2]\n *\n * This is the inverse of splitRealAndImagArrays.\n *\n * @param real The real values of the complex tensor values.\n * @param imag The imag values of the complex tensor values.\n * @returns A complex tensor as a Float32Array with merged values.\n */\nexport function mergeRealAndImagArrays(real, imag) {\n    if (real.length !== imag.length) {\n        throw new Error(`Cannot merge real and imag arrays of different lengths. real:` +\n            `${real.length}, imag: ${imag.length}.`);\n    }\n    const result = new Float32Array(real.length * 2);\n    for (let i = 0; i < result.length; i += 2) {\n        result[i] = real[i / 2];\n        result[i + 1] = imag[i / 2];\n    }\n    return result;\n}\n/**\n * Splits a complex Float32Array into real and imag parts.\n *\n * The memory layout is interleaved as follows:\n * complex: [r0, i0, r1, i1, r2, i2]\n * real: [r0, r1, r2]\n * imag: [i0, i1, i2]\n *\n * This is the inverse of mergeRealAndImagArrays.\n *\n * @param complex The complex tensor values.\n * @returns An object with real and imag Float32Array components of the complex\n *     tensor.\n */\nexport function splitRealAndImagArrays(complex) {\n    const real = new Float32Array(complex.length / 2);\n    const imag = new Float32Array(complex.length / 2);\n    for (let i = 0; i < complex.length; i += 2) {\n        real[i / 2] = complex[i];\n        imag[i / 2] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Extracts even indexed complex values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithEvenIndex(complex) {\n    const len = Math.ceil(complex.length / 4);\n    const real = new Float32Array(len);\n    const imag = new Float32Array(len);\n    for (let i = 0; i < complex.length; i += 4) {\n        real[Math.floor(i / 4)] = complex[i];\n        imag[Math.floor(i / 4)] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Extracts odd indexed comple values in the given array.\n * @param complex The complex tensor values\n */\nexport function complexWithOddIndex(complex) {\n    const len = Math.floor(complex.length / 4);\n    const real = new Float32Array(len);\n    const imag = new Float32Array(len);\n    for (let i = 2; i < complex.length; i += 4) {\n        real[Math.floor(i / 4)] = complex[i];\n        imag[Math.floor(i / 4)] = complex[i + 1];\n    }\n    return { real, imag };\n}\n/**\n * Get the map representing a complex value in the given array.\n * @param complex The complex tensor values.\n * @param index An index of the target complex value.\n */\nexport function getComplexWithIndex(complex, index) {\n    const real = complex[index * 2];\n    const imag = complex[index * 2 + 1];\n    return { real, imag };\n}\n/**\n * Insert a given complex value into the TypedArray.\n * @param data The array in which the complex value is inserted.\n * @param c The complex value to be inserted.\n * @param index An index of the target complex value.\n */\nexport function assignToTypedArray(data, real, imag, index) {\n    data[index * 2] = real;\n    data[index * 2 + 1] = imag;\n}\n/**\n * Make the list of exponent terms used by FFT.\n */\nexport function exponents(n, inverse) {\n    const real = new Float32Array(n / 2);\n    const imag = new Float32Array(n / 2);\n    for (let i = 0; i < Math.ceil(n / 2); i++) {\n        const x = (inverse ? 2 : -2) * Math.PI * (i / n);\n        real[i] = Math.cos(x);\n        imag[i] = Math.sin(x);\n    }\n    return { real, imag };\n}\n/**\n * Make the exponent term used by FFT.\n */\nexport function exponent(k, n, inverse) {\n    const x = (inverse ? 2 : -2) * Math.PI * (k / n);\n    const real = Math.cos(x);\n    const imag = Math.sin(x);\n    return { real, imag };\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation, numTensors) {\n    equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n    const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) /\n        ARROW.length;\n    if (numArrows < 1) {\n        throw new Error('Equations without an arrow are not supported.');\n    }\n    else if (numArrows > 1) {\n        throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n    }\n    const [inputString, outputString] = equation.split(ARROW);\n    assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n    const inputTerms = inputString.split(COMMA);\n    const numInputs = inputTerms.length;\n    if (numTensors !== numInputs) {\n        throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);\n    }\n    if (numInputs > 2) {\n        throw new Error('Support for more than 2 input tensors is not implemented yet.');\n    }\n    const allDims = [];\n    for (let i = 0; i < outputString.length; ++i) {\n        const dimName = outputString[i];\n        if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n            throw new Error(`Output subscripts contain the label ${dimName} ` +\n                `not present in the input subscripts.`);\n        }\n        if (allDims.indexOf(dimName) === -1) {\n            allDims.push(dimName);\n        }\n    }\n    for (let i = 0; i < inputString.length; ++i) {\n        const dimName = inputString[i];\n        if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n            allDims.push(dimName);\n        }\n    }\n    const idDims = new Array(inputTerms.length);\n    for (let i = 0; i < numInputs; ++i) {\n        if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n            throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` +\n                `Support for duplicate axes in input is not implemented yet.`);\n        }\n        idDims[i] = [];\n        for (let j = 0; j < inputTerms[i].length; ++j) {\n            idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n        }\n    }\n    const numDims = allDims.length; // Number of unique dimensions.\n    const numOutDims = outputString.length; // Number of output dimensions.\n    const summedDims = []; // Dimensions being summed over.\n    for (let i = numOutDims; i < numDims; ++i) {\n        summedDims.push(i);\n    }\n    return { allDims, summedDims, idDims };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims, idDims) {\n    let permutationIndices = new Array(nDims);\n    permutationIndices.fill(-1);\n    for (let i = 0; i < idDims.length; ++i) {\n        permutationIndices[idDims[i]] = i;\n    }\n    const expandDims = [];\n    for (let i = 0; i < nDims; ++i) {\n        if (permutationIndices[i] === -1) {\n            expandDims.push(i);\n        }\n    }\n    permutationIndices = permutationIndices.filter(d => d !== -1);\n    return { permutationIndices, expandDims };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n    const dimSizes = new Array(nDims);\n    for (let i = 0; i < tensors.length; ++i) {\n        const shape = tensors[i].shape;\n        for (let j = 0; j < idDims[i].length; ++j) {\n            if (dimSizes[idDims[i][j]] === undefined) {\n                dimSizes[idDims[i][j]] = shape[j];\n            }\n            else {\n                assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                    `of input shaped ${JSON.stringify(shape)}, ` +\n                    `but got dimension ${shape[j]}`);\n            }\n        }\n    }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims, idDims) {\n    const path = summedDims;\n    const steps = [];\n    let nSteps = 0;\n    if (summedDims.length === 0) {\n        // Einsum that involes no summing: e.g., transpose and outer product.\n        path.push(-1);\n    }\n    nSteps = summedDims.length + 1;\n    for (let i = 0; i < nSteps; ++i) {\n        steps.push([]);\n    }\n    const computedTermIndices = [];\n    for (let i = 0; i < path.length; ++i) {\n        const summedDim = path[i];\n        const termIndices = findTermsWithDim(idDims, summedDim);\n        for (const termIndex of termIndices) {\n            if (computedTermIndices.indexOf(termIndex) === -1) {\n                steps[i].push(termIndex);\n                computedTermIndices.push(termIndex);\n            }\n        }\n    }\n    return { path, steps };\n}\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm) {\n    return perm.every((dim, index) => dim === index);\n}\nfunction findTermsWithDim(idDims, dim) {\n    const termIndices = [];\n    for (let i = 0; i < idDims.length; ++i) {\n        if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n            termIndices.push(i);\n        }\n    }\n    return termIndices;\n}\n","import { assert } from '../util';\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(x, numOrSizeSplits, axis = 0) {\n    let splitSizes = [];\n    if (typeof (numOrSizeSplits) === 'number') {\n        assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\n        splitSizes =\n            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n    }\n    else {\n        const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n            if (value === -1) {\n                count += 1;\n            }\n            return count;\n        }, 0);\n        assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\n        const negIndex = numOrSizeSplits.indexOf(-1);\n        // Allow the number of split array to be -1, which indicates the rest\n        // of dimension is allocated to that split.\n        if (negIndex !== -1) {\n            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n            numOrSizeSplits[negIndex] = x.shape[axis] - total;\n        }\n        assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\n        splitSizes = numOrSizeSplits;\n    }\n    return splitSizes;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Generates sparse fill empty rows indices, dense shape mismatch error message.\n *\n * @param indicesLength The first dimension of indices.\n */\nexport function getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesLength) {\n    return `Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${indicesLength}`;\n}\n/**\n * Generates sparse fill empty rows negative index error message.\n *\n * @param index The index with a negative value.\n * @param value The negative value.\n */\nexport function getSparseFillEmptyRowsNegativeIndexErrorMessage(index, value) {\n    return `indices(${index}, 0) is invalid: ${value} < 0`;\n}\n/**\n * Generates sparse fill empty rows out of range index error message.\n *\n * @param index The index with an out of range value.\n * @param value The out of range value.\n * @param limit The upper limit for indices.\n */\nexport function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(index, value, limit) {\n    return `indices(${index}, 0) is invalid: ${value} >= ${limit}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { sizeFromShape } from '../../util';\n/**\n * Generates sparse reshape multiple negative 1 output dimension error message.\n *\n * @param dim1 The first dimension with a negative 1 value.\n * @param dim2 The second dimension with a negative 1 value.\n */\nexport function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(dim1, dim2) {\n    return `only one output dimension may be -1, not both ${dim1} and ${dim2}`;\n}\n/**\n * Generates sparse reshape negative output dimension error message.\n *\n * @param dim The dimension with a negative value.\n * @param value The negative value.\n */\nexport function getSparseReshapeNegativeOutputDimErrorMessage(dim, value) {\n    return `size ${dim} must be non-negative, not ${value}`;\n}\n/**\n * Generates sparse reshape empty tensor zero output dimension error message.\n *\n */\nexport function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage() {\n    return 'reshape cannot infer the missing input size for an empty tensor ' +\n        'unless all specified input sizes are non-zero';\n}\n/**\n * Generates sparse reshape input output multiple mismatch error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape) {\n    const inputSize = sizeFromShape(inputShape);\n    const outputSize = sizeFromShape(outputShape);\n    return `Input to reshape is a SparseTensor with ${inputSize}\n  dense values, but the requested shape requires a multiple of ${outputSize}. inputShape=${inputShape} outputShape= ${outputShape}`;\n}\n/**\n * Generates sparse reshape input output inequality error message.\n *\n * @param inputShape the input shape.\n * @param outputShape the requested output shape.\n */\nexport function getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape) {\n    const inputSize = sizeFromShape(inputShape);\n    const outputSize = sizeFromShape(outputShape);\n    return `Input to reshape is a tensor with ${inputSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Generates sparse segment reduction negative segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNegativeSegmentIdsErrorMessage() {\n    return `segment ids must be >= 0`;\n}\n/**\n * Generates sparse segment reduction non increasing segment ids error message.\n *\n */\nexport function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage() {\n    return `segment ids are not increasing`;\n}\n/**\n * Generates sparse segment reduction segment id out of range error message.\n *\n * @param segmentId The segment id index that is out of range.\n * @param outputRows Upper bound of valid segment id values.\n */\nexport function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(segmentId, outputRows) {\n    return `Segment id ${segmentId} out of range [0, ${outputRows}), possibly because segmentIds input is not sorted.`;\n}\n/**\n * Generates sparse segment reduction input indice out of range error message.\n *\n * @param index The index that holds the out of range value.\n * @param indexValue The value that is out of range.\n * @param inputRows Upper bound of valid index values.\n */\nexport function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(index, indexValue, inputRows) {\n    return `Bad: indices[${index}] == ${indexValue} out of range [0, ${inputRows})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n    let done = false;\n    let res;\n    if (inSize <= PARALLELIZE_THRESHOLD) {\n        res = inSize;\n        done = true;\n    }\n    else {\n        res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n    }\n    while (!done) {\n        if (res > numSegments || res === inSize) {\n            done = true;\n        }\n        else {\n            res = nearestDivisor(inSize, res + 1);\n        }\n    }\n    return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n    const outShape = [];\n    const rank = aShape.length;\n    for (let dim = 0; dim < rank; dim++) {\n        if (dim !== axis) {\n            outShape.push(aShape[dim]);\n        }\n        else {\n            outShape.push(numSegments);\n        }\n    }\n    return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n    const indicesRank = indices.shape.length;\n    const xRank = x.shape.length;\n    if (batchDims !== 0) {\n        if (batchDims < -indicesRank || batchDims > indicesRank) {\n            throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n        }\n    }\n    if (batchDims < 0) {\n        batchDims += indicesRank;\n    }\n    if (batchDims > xRank) {\n        throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n    }\n    if (axis < batchDims) {\n        throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n    }\n    for (let i = 0; i < batchDims; ++i) {\n        if (x.shape[i] !== indices.shape[i]) {\n            throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n        }\n    }\n    const dimSize = x.shape[axis];\n    const outputShape = [];\n    let batchSize = 1;\n    let outerSize = 1;\n    let sliceSize = 1;\n    for (let i = 0; i < batchDims; ++i) {\n        outputShape.push(x.shape[i]);\n        batchSize *= x.shape[i];\n    }\n    for (let i = batchDims; i < axis; i++) {\n        outputShape.push(x.shape[i]);\n        outerSize *= x.shape[i];\n    }\n    for (let i = batchDims; i < indicesRank; i++) {\n        outputShape.push(indices.shape[i]);\n    }\n    for (let i = axis + 1; i < xRank; i++) {\n        outputShape.push(x.shape[i]);\n        sliceSize *= x.shape[i];\n    }\n    return { batchSize, sliceSize, outerSize, dimSize, outputShape };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { decodeString, encodeString } from '../util';\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/ragged_to_dense_util';\nexport * from '../ops/reduce_util';\nimport * as slice_util from '../ops/slice_util';\nexport { slice_util };\nexport { upcastType } from '../types';\nexport * from '../ops/rotate_util';\nexport * from '../ops/array_ops_util';\nexport * from '../ops/gather_nd_util';\nexport * from '../ops/scatter_nd_util';\nexport * from '../ops/selu_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/erf_util';\nexport * from '../log';\nexport * from '../backends/complex_util';\nexport * from '../backends/einsum_util';\nexport * from '../ops/split_util';\nexport * from '../ops/sparse/sparse_fill_empty_rows_util';\nexport * from '../ops/sparse/sparse_reshape_util';\nexport * from '../ops/sparse/sparse_segment_reduction_util';\nimport * as segment_util from '../ops/segment_util';\nexport { segment_util };\nexport function fromUint8ToStringArray(vals) {\n    try {\n        // Decode the bytes into string.\n        return vals.map(val => decodeString(val));\n    }\n    catch (err) {\n        throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);\n    }\n}\nexport function fromStringArrayToUint8(strings) {\n    return strings.map(s => encodeString(s));\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the Where kernel shared between cpu and webgl */\nimport { buffer } from '../ops/buffer';\nexport function whereImpl(condShape, condVals) {\n    const indices = [];\n    for (let i = 0; i < condVals.length; i++) {\n        if (condVals[i]) {\n            indices.push(i);\n        }\n    }\n    const inBuffer = buffer(condShape, 'int32');\n    const out = buffer([indices.length, condShape.length], 'int32');\n    for (let i = 0; i < indices.length; i++) {\n        const loc = inBuffer.indexToLoc(indices[i]);\n        const offset = i * condShape.length;\n        out.values.set(loc, offset);\n    }\n    return out.toTensor();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport { nonMaxSuppressionV3Impl, nonMaxSuppressionV4Impl, nonMaxSuppressionV5Impl } from './non_max_suppression_impl';\nexport { whereImpl } from './where_impl';\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// base.ts is tfjs-core without auto registration of things like flags,\n// gradients, chained ops or the opHandler. See base_side_effects.ts for parts\n// tfjs core that are required side effects.\n/**\n * @fileoverview\n * @suppress {partialAlias} Optimization disabled due to passing the module\n * object into a function below:\n *\n *   import * as ops from './ops/ops';\n *   setOpHandler(ops);\n */\n// Serialization.\nimport * as io from './io/io';\nimport * as math from './math';\nimport * as broadcast_util from './ops/broadcast_util';\nimport * as browser from './ops/browser';\nimport * as gather_util from './ops/gather_nd_util';\nimport * as scatter_util from './ops/scatter_nd_util';\nimport * as slice_util from './ops/slice_util';\nimport * as serialization from './serialization';\nimport * as tensor_util from './tensor_util';\nimport * as test_util from './test_util';\nimport * as util from './util';\nimport { version } from './version';\nexport { AdadeltaOptimizer } from './optimizers/adadelta_optimizer';\nexport { AdagradOptimizer } from './optimizers/adagrad_optimizer';\nexport { AdamOptimizer } from './optimizers/adam_optimizer';\nexport { AdamaxOptimizer } from './optimizers/adamax_optimizer';\nexport { MomentumOptimizer } from './optimizers/momentum_optimizer';\nexport { Optimizer } from './optimizers/optimizer';\n// Optimizers.\nexport { OptimizerConstructors } from './optimizers/optimizer_constructors';\nexport { RMSPropOptimizer } from './optimizers/rmsprop_optimizer';\nexport { SGDOptimizer } from './optimizers/sgd_optimizer';\nexport { Tensor, TensorBuffer, Variable } from './tensor';\nexport { Rank, sumOutType, upcastType } from './types';\nexport * from './ops/ops';\nexport { Reduction } from './ops/loss_ops_utils';\nexport * from './train';\nexport * from './globals';\nexport * from './kernel_registry';\nexport { customGrad, grad, grads, valueAndGrad, valueAndGrads, variableGrads } from './gradients';\nexport { Environment, env, ENV } from './environment';\nexport { version as version_core };\n// Top-level method exports.\nexport { nextFrame } from './browser_util';\n// Second level exports.\nimport * as backend_util from './backends/backend_util';\nimport * as device_util from './device_util';\nexport { browser, io, math, serialization, test_util, util, backend_util, broadcast_util, tensor_util, slice_util, gather_util, scatter_util, device_util };\nimport * as kernel_impls from './backends/kernel_impls';\nexport { kernel_impls };\n// Backend specific.\nexport { KernelBackend, DataStorage } from './backends/backend';\n// Export all kernel names / info.\nexport * from './kernel_names';\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code.\nimport './base_side_effects';\n// All exports from this package should be in base.\nexport * from './base';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n    alpha: false,\n    antialias: false,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: false,\n    depth: false,\n    stencil: false,\n    failIfMajorPerformanceCaveat: true\n};\nexport function clearWebGLContext(webGLVersion) {\n    delete contexts[webGLVersion];\n}\nexport function setWebGLContext(webGLVersion, gl) {\n    contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion, customCanvas) {\n    if (!(webGLVersion in contexts) || customCanvas != null) {\n        const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n        if (newCtx !== null) {\n            contexts[webGLVersion] = newCtx;\n        }\n        else {\n            console.log('Could not get context for WebGL version', webGLVersion);\n            return null;\n        }\n    }\n    const gl = contexts[webGLVersion];\n    if (gl == null || gl.isContextLost()) {\n        delete contexts[webGLVersion];\n        return getWebGLContext(webGLVersion);\n    }\n    gl.disable(gl.DEPTH_TEST);\n    gl.disable(gl.STENCIL_TEST);\n    gl.disable(gl.BLEND);\n    gl.disable(gl.DITHER);\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    gl.disable(gl.SAMPLE_COVERAGE);\n    gl.enable(gl.SCISSOR_TEST);\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n    if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n        return new OffscreenCanvas(300, 150);\n    }\n    else if (typeof document !== 'undefined') {\n        return document.createElement('canvas');\n    }\n    else {\n        throw new Error('Cannot create a canvas in this context');\n    }\n}\nfunction getWebGLRenderingContext(webGLVersion, customCanvas) {\n    if (webGLVersion !== 1 && webGLVersion !== 2) {\n        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n    }\n    const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n    canvas.addEventListener('webglcontextlost', (ev) => {\n        ev.preventDefault();\n        delete contexts[webGLVersion];\n    }, false);\n    if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n        WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n    }\n    if (webGLVersion === 1) {\n        return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n    }\n    return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nexport var TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nexport var PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape) {\n    const size = util.sizeFromShape(shape);\n    const texelsNeeded = Math.ceil(size / 4);\n    return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` +\n            `${channelsPerTexture}`);\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    const requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n    }\n    let dst = 0;\n    for (let src = 0; src < unpackedArray.length; src += 4) {\n        for (let c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return w * h * 4;\n}\nexport function getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    let internalFormatFloat;\n    let internalFormatHalfFloat;\n    let internalFormatPackedHalfFloat;\n    let internalFormatPackedFloat;\n    let textureFormatFloat;\n    let downloadTextureFormat;\n    let downloadUnpackNumChannels;\n    let defaultNumChannels;\n    let textureTypeHalfFloat;\n    let textureTypeFloat;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n        downloadTextureFormat = glany.RGBA8;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n        downloadTextureFormat = gl.RGBA;\n    }\n    return {\n        internalFormatFloat,\n        internalFormatHalfFloat,\n        internalFormatPackedHalfFloat,\n        internalFormatPackedFloat,\n        textureFormatFloat,\n        downloadTextureFormat,\n        downloadUnpackNumChannels,\n        defaultNumChannels,\n        textureTypeHalfFloat,\n        textureTypeFloat\n    };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { getTextureConfig } from './tex_util';\nexport function callAndCheck(gl, func) {\n    const returnValue = func();\n    if (env().getBool('DEBUG')) {\n        checkWebGLError(gl);\n    }\n    return returnValue;\n}\nfunction checkWebGLError(gl) {\n    const error = gl.getError();\n    if (error !== gl.NO_ERROR) {\n        throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n    }\n}\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\nexport function canBeRepresented(num) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n        (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n        return true;\n    }\n    return false;\n}\nexport function getWebGLErrorMessage(gl, status) {\n    switch (status) {\n        case gl.NO_ERROR:\n            return 'NO_ERROR';\n        case gl.INVALID_ENUM:\n            return 'INVALID_ENUM';\n        case gl.INVALID_VALUE:\n            return 'INVALID_VALUE';\n        case gl.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n        case gl.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n        case gl.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n        default:\n            return `Unknown error code ${status}`;\n    }\n}\nexport function getExtensionOrThrow(gl, extensionName) {\n    return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nexport function createVertexShader(gl, vertexShaderSource) {\n    const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n    callAndCheck(gl, () => gl.compileShader(vertexShader));\n    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n        console.log(gl.getShaderInfoLog(vertexShader));\n        throw new Error('Failed to compile vertex shader.');\n    }\n    return vertexShader;\n}\nexport function createFragmentShader(gl, fragmentShaderSource) {\n    const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');\n    callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n    callAndCheck(gl, () => gl.compileShader(fragmentShader));\n    if (env().get('ENGINE_COMPILE_ONLY')) {\n        return fragmentShader;\n    }\n    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n    }\n    return fragmentShader;\n}\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n    const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n    if (lineNumberRegexResult == null) {\n        console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n        console.log(shaderSource);\n        return;\n    }\n    const lineNumber = +lineNumberRegexResult[1];\n    const shaderLines = shaderSource.split('\\n');\n    const pad = shaderLines.length.toString().length + 2;\n    const linesWithLineNumbers = shaderLines.map((line, lineNumber) => util.rightPad((lineNumber + 1).toString(), pad) + line);\n    let maxLineLength = 0;\n    for (let i = 0; i < linesWithLineNumbers.length; i++) {\n        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n    }\n    const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n    const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n    const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n    console.log(beforeErrorLines.join('\\n'));\n    console.log(shaderInfoLog.split('\\n')[0]);\n    console.log(`%c ${util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n    console.log(afterErrorLines.join('\\n'));\n}\nexport function createProgram(gl) {\n    return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\nexport function linkProgram(gl, program) {\n    callAndCheck(gl, () => gl.linkProgram(program));\n    if (env().get('ENGINE_COMPILE_ONLY')) {\n        return;\n    }\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Failed to link vertex and fragment shaders.');\n    }\n}\nexport function validateProgram(gl, program) {\n    callAndCheck(gl, () => gl.validateProgram(program));\n    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Shader program validation failed.');\n    }\n}\nexport function createStaticVertexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function createStaticIndexBuffer(gl, data) {\n    const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n    callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n    return buffer;\n}\nexport function getNumChannels() {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        return 1;\n    }\n    return 4;\n}\nexport function createTexture(gl) {\n    return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\nexport function validateTextureSize(width, height) {\n    const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    if ((width <= 0) || (height <= 0)) {\n        const requested = `[${width}x${height}]`;\n        throw new Error('Requested texture size ' + requested + ' is invalid.');\n    }\n    if ((width > maxTextureSize) || (height > maxTextureSize)) {\n        const requested = `[${width}x${height}]`;\n        const max = `[${maxTextureSize}x${maxTextureSize}]`;\n        throw new Error('Requested texture size ' + requested +\n            ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n    }\n}\nexport function createFramebuffer(gl) {\n    return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\nexport function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n    const loc = gl.getAttribLocation(program, attribute);\n    if (loc === -1) {\n        // The GPU compiler decided to strip out this attribute because it's unused,\n        // thus no need to bind.\n        return false;\n    }\n    callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n    callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));\n    callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n    return true;\n}\nexport function bindTextureUnit(gl, texture, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\nexport function unbindTextureUnit(gl, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n    callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function getProgramUniformLocationOrThrow(gl, program, uniformName) {\n    return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform \"' + uniformName + '\" not present in program.');\n}\nexport function getProgramUniformLocation(gl, program, uniformName) {\n    return gl.getUniformLocation(program, uniformName);\n}\nexport function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {\n    callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n    callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\nexport function bindCanvasToFramebuffer(gl) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n    callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\nexport function bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\nexport function unbindColorTextureFromFramebuffer(gl, framebuffer) {\n    callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n    callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\nexport function validateFramebuffer(gl) {\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n    }\n}\nexport function getFramebufferErrorMessage(gl, status) {\n    switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n            return 'FRAMEBUFFER_UNSUPPORTED';\n        default:\n            return `unknown error ${status}`;\n    }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n    const tOrNull = callAndCheck(gl, () => returnTOrNull());\n    if (tOrNull == null) {\n        throw new Error(failureMessage);\n    }\n    return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n    const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n    const glTextureUnit = textureUnit + gl.TEXTURE0;\n    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n        const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n        throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n    }\n}\nexport function getBatchDim(shape, dimsToSkip = 2) {\n    return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\nexport function getRowsCols(shape) {\n    if (shape.length === 0) {\n        throw Error('Cannot get rows and columns of an empty shape array.');\n    }\n    return [\n        shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n    ];\n}\nexport function getShapeAs3D(shape) {\n    let shapeAs3D = [1, 1, 1];\n    const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n    if (!isScalar) {\n        shapeAs3D =\n            [getBatchDim(shape), ...getRowsCols(shape)];\n    }\n    return shapeAs3D;\n}\nexport function getTextureShapeFromLogicalShape(logShape, isPacked = false) {\n    let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    let maxSizeForNarrowTex = env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n    if (maxSizeForNarrowTex === Infinity &&\n        env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n        maxSizeForNarrowTex = maxTexSize / 2;\n    }\n    if (isPacked) {\n        maxTexSize = maxTexSize * 2;\n        maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n        // This logic ensures we accurately count the number of packed texels needed\n        // to accommodate the tensor. We can only pack values in the same texel if\n        // they are from adjacent pairs of rows/cols within the same batch. So if a\n        // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n        // fact that the texels containing the third row are half empty.\n        logShape = logShape.map((d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n        // Packed texture height is at least 2 (the channel height of a single\n        // texel).\n        if (logShape.length === 1) {\n            logShape = [2, logShape[0]];\n        }\n    }\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n        const squeezeResult = util.squeezeShape(logShape);\n        logShape = squeezeResult.newShape;\n    }\n    let size = util.sizeFromShape(logShape);\n    let textureShape = null;\n    if (logShape.length <= 1 && size <= maxTexSize) {\n        textureShape = [1, size];\n    }\n    else if (logShape.length === 2 && logShape[0] <= maxTexSize &&\n        logShape[1] <= maxTexSize) {\n        textureShape = logShape;\n    }\n    else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n        logShape[2] <= maxTexSize) {\n        textureShape = [logShape[0] * logShape[1], logShape[2]];\n    }\n    else if (logShape.length === 3 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] <= maxTexSize) {\n        textureShape = [logShape[0], logShape[1] * logShape[2]];\n    }\n    else if (logShape.length === 4 &&\n        logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n        logShape[3] <= maxTexSize) {\n        textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    }\n    else if (logShape.length === 4 && logShape[0] <= maxTexSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n        textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    }\n    // true if one edge length is 1 (1 or 2, if packed), while another edge\n    // length exceeds maxSizeForNarrowTex.\n    const isLongNarrowTex = textureShape != null &&\n        Math.max(...textureShape) > maxSizeForNarrowTex &&\n        Math.min(...textureShape) <= (isPacked ? 2 : 1) &&\n        Math.min(...textureShape) > 0;\n    if (textureShape == null || isLongNarrowTex) {\n        if (isPacked) {\n            // For packed textures size equals the number of channels required to\n            // accommodate the texture data. However in order to squarify such that\n            // inner dimensions stay even, we rewrite size to equal the number of\n            // texels. Then in the return statement we rehydrate the squarified\n            // dimensions to channel units.\n            const batchDim = getBatchDim(logShape);\n            let rows = 2, cols = 2;\n            if (logShape.length) {\n                [rows, cols] = getRowsCols(logShape);\n            }\n            size = batchDim * (rows / 2) * (cols / 2);\n            textureShape =\n                util.sizeToSquarishShape(size).map(d => d * 2);\n        }\n        else {\n            textureShape = util.sizeToSquarishShape(size);\n        }\n    }\n    return textureShape;\n}\nfunction isEven(n) {\n    return n % 2 === 0;\n}\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1, shape2) {\n    shape1 = shape1.slice(-2);\n    shape2 = shape2.slice(-2);\n    if (util.arraysEqual(shape1, shape2)) {\n        return true;\n    }\n    if (!shape1.length || !shape2.length) { // One of the shapes is a scalar.\n        return true;\n    }\n    if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n        shape2[1] === 0) {\n        return true;\n    }\n    if (shape1.length !== shape2.length) { // One of the shapes is a vector.\n        const shape1Cols = shape1.slice(-1)[0];\n        const shape2Cols = shape2.slice(-1)[0];\n        if (shape1Cols === shape2Cols) {\n            return true;\n        }\n        if (isEven(shape1Cols) && isEven(shape2Cols) &&\n            (shape1[0] === 1 || shape2[0] === 1)) {\n            return true;\n        }\n    }\n    return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE;\nlet MAX_TEXTURES_IN_SHADER;\nexport function getWebGLMaxTextureSize(webGLVersion) {\n    if (MAX_TEXTURE_SIZE == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    }\n    return MAX_TEXTURE_SIZE;\n}\nexport function resetMaxTextureSize() {\n    MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n    MAX_TEXTURES_IN_SHADER = null;\n}\nexport function getMaxTexturesInShader(webGLVersion) {\n    if (MAX_TEXTURES_IN_SHADER == null) {\n        const gl = getWebGLContext(webGLVersion);\n        MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    }\n    // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n    return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion) {\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    let queryTimerVersion;\n    const gl = getWebGLContext(webGLVersion);\n    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n        webGLVersion === 2) {\n        queryTimerVersion = 2;\n    }\n    else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n        queryTimerVersion = 1;\n    }\n    else {\n        queryTimerVersion = 0;\n    }\n    return queryTimerVersion;\n}\nexport function hasExtension(gl, extensionName) {\n    const ext = gl.getExtension(extensionName);\n    return ext != null;\n}\nexport function isWebGLVersionEnabled(webGLVersion) {\n    try {\n        const gl = getWebGLContext(webGLVersion);\n        if (gl != null) {\n            return true;\n        }\n    }\n    catch (e) {\n        console.log('Error when getting WebGL context: ', e);\n        return false;\n    }\n    return false;\n}\nexport function isCapableOfRenderingToFloatTexture(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n    }\n    else {\n        if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n            return false;\n        }\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n        if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n            return false;\n        }\n    }\n    else {\n        if (hasExtension(gl, 'EXT_color_buffer_float')) {\n            return createFloatTextureAndBindToFramebuffer(gl);\n        }\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n            const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);\n        }\n        return false;\n    }\n    const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n    return isFrameBufferComplete;\n}\nfunction createFloatTextureAndBindToFramebuffer(gl) {\n    const texConfig = getTextureConfig(gl);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nfunction createHalfFloatTextureAndBindToFramebuffer(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const width = 1;\n    const height = 1;\n    gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isFrameBufferComplete;\n}\nexport function isWebGLFenceEnabled(webGLVersion) {\n    if (webGLVersion !== 2) {\n        return false;\n    }\n    const gl = getWebGLContext(webGLVersion);\n    // tslint:disable-next-line:no-any\n    const isEnabled = gl.fenceSync != null;\n    return isEnabled;\n}\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` +\n                'in the WebGL backend.');\n        }\n    });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n    if (isWebGLVersionEnabled(2)) {\n        return 2;\n    }\n    else if (isWebGLVersionEnabled(1)) {\n        return 1;\n    }\n    return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n    const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n    !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n    return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n        false :\n        ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n    // Use uniform uploads only when 32bit floats are supported. In\n    // 16bit\n    // environments there are problems with comparing a 16bit texture value\n    // with a 32bit uniform value.\n    const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n    return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n    return -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n    }\n});\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {\n    return device_util.isMobile() ? 1 : -1;\n}, threshold => {\n    if (threshold < 0 && threshold !== -1) {\n        throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n    }\n});\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport function getGlslDifferences() {\n    let version;\n    let attribute;\n    let varyingVs;\n    let varyingFs;\n    let texture2D;\n    let output;\n    let defineOutput;\n    let defineSpecialNaN;\n    let defineSpecialInf;\n    let defineRound;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        version = '#version 300 es';\n        attribute = 'in';\n        varyingVs = 'out';\n        varyingFs = 'in';\n        texture2D = 'texture';\n        output = 'outputColor';\n        defineOutput = 'out vec4 outputColor;';\n        // Use custom isnan definition to work across differences between\n        // implementations on various platforms. While this should happen in ANGLE\n        // we still see differences between android and windows (on chrome) when\n        // using isnan directly. Since WebGL2 supports uint type and\n        // floatBitsToUinT built-in function, we could implment isnan following\n        // IEEE 754 rules.\n        // NaN defination in IEEE 754-1985 is :\n        //   - sign = either 0 or 1.\n        //   - biased exponent = all 1 bits.\n        //   - fraction = anything except all 0 bits (since all 0 bits represents\n        //   infinity).\n        // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n        defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n            '';\n        // In webgl 2 we do not need to specify a custom isinf so there is no\n        // need for a special INFINITY constant.\n        defineSpecialInf = ``;\n        defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    else {\n        version = '';\n        attribute = 'attribute';\n        varyingVs = 'varying';\n        varyingFs = 'varying';\n        texture2D = 'texture2D';\n        output = 'gl_FragColor';\n        defineOutput = '';\n        // WebGL1 has no built in isnan so we define one here.\n        defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n        defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n        defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    return {\n        version,\n        attribute,\n        varyingVs,\n        varyingFs,\n        texture2D,\n        output,\n        defineOutput,\n        defineSpecialNaN,\n        defineSpecialInf,\n        defineRound\n    };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {\n    const strides = util.computeStrides(shape);\n    return strides\n        .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape, index = 'index') {\n    const strides = util.computeStrides(shape);\n    return strides\n        .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(indicesArr, variableName) {\n    const numCoords = indicesArr.length;\n    const shape = indicesArr.map(d => `${variableName}[${d}]`);\n    const strides = new Array(numCoords - 1);\n    strides[numCoords - 2] = shape[numCoords - 1];\n    for (let i = numCoords - 3; i >= 0; --i) {\n        strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n    }\n    return strides;\n}\nexport function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName, index = 'index') {\n    const indicesArray = coords.map((_, i) => i);\n    const strides = symbolicallyComputeStrides(indicesArray, variableName);\n    return strides\n        .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n    })\n        .join('');\n}\nfunction buildVec(x) {\n    if (x.length === 1) {\n        return `${x[0]}`;\n    }\n    return `vec${x.length}(${x.join(',')})`;\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x, y) {\n    if (x.length !== y.length) {\n        throw new Error(`Vectors to be dotted must be of the same length -` +\n            `got ${x.length} and ${y.length}`);\n    }\n    const slices = [];\n    const nearestVec4 = Math.floor(x.length / 4);\n    const nearestVec4Remainder = x.length % 4;\n    for (let i = 0; i < nearestVec4; i++) {\n        const xSlice = x.slice(i * 4, i * 4 + 4);\n        const ySlice = y.slice(i * 4, i * 4 + 4);\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    if (nearestVec4Remainder !== 0) {\n        let xSlice = x.slice(nearestVec4 * 4);\n        let ySlice = y.slice(nearestVec4 * 4);\n        if (xSlice.length === 1) {\n            xSlice = xSlice.map(d => `float(${d})`);\n            ySlice = ySlice.map(d => `float(${d})`);\n        }\n        slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n    }\n    return slices.map((d, i) => `dot(${d})`).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape) {\n    const strides = util.computeStrides(shape).map(d => d.toString());\n    return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nexport function getFlatIndexFrom3DOutput() {\n    return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst { getBroadcastDims } = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n    const prefixSnippets = [];\n    inputsInfo.forEach(x => {\n        const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n        // Snippet when we decided to upload the values as uniform.\n        if (x.shapeInfo.isUniform) {\n            prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n        }\n        else {\n            prefixSnippets.push(`uniform sampler2D ${x.name};`);\n            prefixSnippets.push(`uniform int offset${x.name};`);\n        }\n        if (program.enableShapeUniforms) {\n            const { uniformShape } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n            switch (uniformShape.length) {\n                case 1:\n                    prefixSnippets.push(`uniform int ${x.name}Shape;`);\n                    break;\n                case 2:\n                    prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n                    break;\n                case 3:\n                    prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n                    break;\n                case 4:\n                    prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n                    break;\n                default:\n                    break;\n            }\n            prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n        }\n    });\n    if (program.enableShapeUniforms) {\n        switch (outputShape.logicalShape.length) {\n            case 1:\n                prefixSnippets.push(`uniform int outShape;`);\n                break;\n            case 2:\n                prefixSnippets.push(`uniform ivec2 outShape;`);\n                prefixSnippets.push(`uniform int outShapeStrides;`);\n                break;\n            case 3:\n                prefixSnippets.push(`uniform ivec3 outShape;`);\n                prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n                break;\n            case 4:\n                prefixSnippets.push(`uniform ivec4 outShape;`);\n                prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n                break;\n            default:\n                break;\n        }\n        prefixSnippets.push(`uniform ivec2 outTexShape;`);\n    }\n    if (program.customUniforms) {\n        program.customUniforms.forEach((d) => {\n            prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n        });\n    }\n    const inputPrefixSnippet = prefixSnippets.join('\\n');\n    const inputSamplingSnippet = inputsInfo\n        .map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms))\n        .join('\\n');\n    const outTexShape = outputShape.texShape;\n    const glsl = getGlslDifferences();\n    const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n    let outputSamplingSnippet;\n    let floatTextureSetOutputSnippet;\n    let shaderPrefix = getShaderPrefix(glsl);\n    if (outputShape.isPacked) {\n        outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n        floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n    }\n    else {\n        outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n        floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n    }\n    if (program.packedInputs) {\n        shaderPrefix += SHADER_PACKED_PREFIX;\n    }\n    const source = [\n        shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n        inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n        program.userCode\n    ].join('\\n');\n    return source;\n}\nfunction getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo, enableShapeUniforms);\n        case 1:\n            return getSampler1D(inInfo, enableShapeUniforms);\n        case 2:\n            return getSampler2D(inInfo, enableShapeUniforms);\n        case 3:\n            return getSampler3D(inInfo, enableShapeUniforms);\n        case 4:\n            return getSampler4D(inInfo, enableShapeUniforms);\n        case 5:\n            return getSampler5D(inInfo);\n        case 6:\n            return getSampler6D(inInfo);\n        default:\n            throw new Error(`${shape.length}-D input sampling` +\n                ` is not yet supported`);\n    }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n    const shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getPackedSamplerScalar(inInfo);\n        case 1:\n            return getPackedSampler1D(inInfo, enableShapeUniforms);\n        case 2:\n            return getPackedSampler2D(inInfo, enableShapeUniforms);\n        case 3:\n            return getPackedSampler3D(inInfo, enableShapeUniforms);\n        default:\n            return getPackedSamplerND(inInfo, enableShapeUniforms);\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {\n    let res = '';\n    if (usesPackedTextures) {\n        res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n    }\n    else {\n        res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n    }\n    const inShape = inInfo.shapeInfo.logicalShape;\n    const outShape = outShapeInfo.logicalShape;\n    if (inShape.length <= outShape.length) {\n        if (usesPackedTextures) {\n            res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n        else {\n            res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n        }\n    }\n    return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 2:\n            return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 3:\n            return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n        default:\n            return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n    }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n        case 5:\n            return getOutput5DCoords(outShape, outTexShape);\n        case 6:\n            return getOutput6DCoords(outShape, outTexShape);\n        default:\n            throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n    }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n    return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n    return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n    return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n    const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n    return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n    return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (packedTexShape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n    }\n    if (packedTexShape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n    if (texShape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n    }\n    if (texShape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n        }\n        return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n    }\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n        return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n    }\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        // TODO: support 5d and 6d\n        return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = ``;\n    let coords = 'b, r, c';\n    for (let b = 2; b < shape.length - 1; b++) {\n        texelsInBatchN *= shape[shape.length - b - 1];\n        batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n        coords = `b${b}, ` + coords;\n    }\n    return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n    if (enableShapeUniforms) {\n        const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n        return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n    }\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n    return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n    const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n    return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n    }\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    if (enableShapeUniforms) {\n        return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n    if (util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n    }\n    if (shape[1] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    if (shape[0] === 1) {\n        if (enableShapeUniforms) {\n            return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n        }\n        return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n    }\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n    return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        return `float ${funcName}() {return ${texName};}`;\n    }\n    const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n    if (texNumR === 1 && texNumC === 1) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const tNumR = texShape[0];\n    const tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (tNumC === 1) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (tNumR === 1) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const glsl = getGlslDifferences();\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    if (texShape != null && util.arraysEqual(shape, texShape)) {\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        const texNumR = texShape[0];\n        const texNumC = texShape[1];\n        return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const offset = getFlatOffsetUniformName(texName);\n    if (texNumC === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (texNumR === 1) {\n        // index is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    if (enableShapeUniforms) {\n        return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    if (shape[0] === 1) {\n        const squeezedShape = shape.slice(1);\n        const keptDims = [1, 2];\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['b', 'row', 'col'];\n        return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        const params = ['row', 'col', 'depth'];\n        return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n    }\n    if (texNumC === stride1 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const glsl = getGlslDifferences();\n    if (enableShapeUniforms) {\n        // TODO: support 5d and 6d\n        return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n    }\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const rank = shape.length;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = `int b, int row, int col`;\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n        params = `int b${b}, ` + params;\n        texelsInBatch *= shape[rank - b - 1];\n        index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    const stride2Str = `int stride2 = ${texName}Shape[3];`;\n    const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n    const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride2 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        if (enableShapeUniforms) {\n            return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n        }\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    if (enableShapeUniforms) {\n        return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride3 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n    const shape = inputInfo.shapeInfo.logicalShape;\n    const texName = inputInfo.name;\n    const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    if (newShape.length < shape.length) {\n        const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n        return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n    }\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n    if (inputInfo.shapeInfo.isUniform) {\n        // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n    }\n    const flatOffset = inputInfo.shapeInfo.flatOffset;\n    const texShape = inputInfo.shapeInfo.texShape;\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    if (texNumC === stride0 && flatOffset == null) {\n        // texC is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    if (texNumC === stride4 && flatOffset == null) {\n        // texR is used directly as physical (no risk of float16 overflow).\n        return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const offset = getFlatOffsetUniformName(texName);\n    return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n    const texName = inputInfo.name;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    if (inSize < 2) {\n        return `return ${texName};`;\n    }\n    return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    let output = `return outputValue;`;\n    const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n    const isInputScalar = inSize === 1;\n    const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n    const isOutputScalar = outSize === 1;\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n        output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n    }\n    else if (isInputScalar && !isOutputScalar) {\n        if (outRank === 1) {\n            output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n        }\n        else {\n            output = `\n        return vec4(outputValue.x);\n      `;\n        }\n    }\n    else if (broadcastDims.length) {\n        const rows = inRank - 2;\n        const cols = inRank - 1;\n        if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.x);`;\n        }\n        else if (broadcastDims.indexOf(rows) > -1) {\n            output = `return vec4(outputValue.x, outputValue.y, ` +\n                `outputValue.x, outputValue.y);`;\n        }\n        else if (broadcastDims.indexOf(cols) > -1) {\n            output = `return vec4(outputValue.xx, outputValue.zz);`;\n        }\n    }\n    return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n    const texName = inputInfo.name;\n    const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    const outTexShape = outShapeInfo.texShape;\n    const inTexShape = inputInfo.shapeInfo.texShape;\n    const inRank = inputInfo.shapeInfo.logicalShape.length;\n    const outRank = outShapeInfo.logicalShape.length;\n    if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n        inputInfo.shapeInfo.flatOffset == null &&\n        util.arraysEqual(inTexShape, outTexShape)) {\n        return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n    }\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet;\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n    if (inRank === 0) {\n        coordsSnippet = '';\n    }\n    else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    }\n    else {\n        coordsSnippet =\n            broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n                .join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    }\n    else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n            .map((s, i) => `coords.${fields[i + rankDiff]}`)\n            .join(', ');\n    }\n    return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    }\n    else if (rank === 2) {\n        return 'ivec2';\n    }\n    else if (rank === 3) {\n        return 'ivec3';\n    }\n    else if (rank === 4) {\n        return 'ivec4';\n    }\n    else if (rank === 5) {\n        return 'ivec5';\n    }\n    else if (rank === 6) {\n        return 'ivec6';\n    }\n    else {\n        throw Error(`GPU for rank ${rank} is not yet supported`);\n    }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n    const { newShape, keptDims } = util.squeezeShape(shape);\n    const rank = shape.length;\n    const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n    const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n    const useSqueezeShape = (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n        newShape.length < rank) ||\n        useSqueezePackedShape;\n    const uniformShape = useSqueezeShape ? squeezeShape : shape;\n    return { useSqueezeShape, uniformShape, keptDims };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n    // Deep copy.\n    const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nimport { createFragmentShader } from './webgl_util';\nexport function compileProgram(gpgpu, program, inputs, output) {\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n    const fragmentShader = createFragmentShader(gpgpu.gl, source);\n    const webGLProgram = gpgpu.createProgram(fragmentShader);\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n        return Object.assign({ program,\n            fragmentShader,\n            source,\n            webGLProgram,\n            inShapeInfos,\n            outShapeInfo }, getUniformLocations(gpgpu, program, webGLProgram));\n    }\n    else {\n        return {\n            program,\n            fragmentShader,\n            source,\n            webGLProgram,\n            inShapeInfos,\n            outShapeInfo,\n            uniformLocations: null,\n            customUniformLocations: null,\n            infLoc: null,\n            nanLoc: null,\n            inShapesLocations: null,\n            inTexShapesLocations: null,\n            outShapeLocation: null,\n            outShapeStridesLocation: null,\n            outTexShapeLocation: null\n        };\n    }\n}\nexport function getUniformLocations(gpgpu, program, webGLProgram) {\n    const uniformLocations = {};\n    const inShapesLocations = {};\n    const inTexShapesLocations = {};\n    const customUniformLocations = [];\n    let outShapeLocation;\n    let outTexShapeLocation;\n    let outShapeStridesLocation;\n    let infLoc = null;\n    let nanLoc = null;\n    // Add special uniforms (NAN, INFINITY)\n    nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const shouldThrow = false;\n    for (let i = 0; i < program.variableNames.length; i++) {\n        const varName = program.variableNames[i];\n        uniformLocations[varName] =\n            gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n        uniformLocations[`offset${varName}`] =\n            gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n        if (program.enableShapeUniforms) {\n            inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n            inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n        }\n    }\n    if (program.enableShapeUniforms) {\n        outShapeLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n        outShapeStridesLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n        outTexShapeLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n    }\n    if (program.customUniforms) {\n        program.customUniforms.forEach((d, i) => {\n            customUniformLocations[i] =\n                gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n        });\n    }\n    return {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n    if (!binary.program.enableShapeUniforms) {\n        validateBinaryAndProgram(binary.inShapeInfos, inputs);\n        validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    }\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    // Set special uniforms (NAN, INFINITY)\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    inputs.forEach((input, i) => {\n        const varName = binary.program.variableNames[i];\n        const varLoc = binary.uniformLocations[varName];\n        const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n        const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n        const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n        if (varShapeLoc) {\n            const { uniformShape } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);\n            switch (uniformShape.length) {\n                case 1:\n                    gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 2:\n                    gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 3:\n                    gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 4:\n                    gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (varTexShapeLoc) {\n            gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n        }\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            return;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            return;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n    });\n    const outShapeLoc = binary.outShapeLocation;\n    if (outShapeLoc) {\n        switch (output.shape.length) {\n            case 1:\n                gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 2:\n                gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 3:\n                gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 4:\n                gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            default:\n                break;\n        }\n    }\n    if (binary.outShapeStridesLocation) {\n        const strides = util.computeStrides(output.shape);\n        switch (output.shape.length) {\n            case 2:\n                gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            case 3:\n                gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            case 4:\n                gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            default:\n                break;\n        }\n    }\n    if (binary.outTexShapeLocation) {\n        gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n    }\n    if (binary.program.customUniforms && customUniformValues) {\n        binary.program.customUniforms.forEach((d, i) => {\n            const customLoc = binary.customUniformLocations[i];\n            const customValue = customUniformValues[i];\n            if (d.type === 'float') {\n                gpgpu.gl.uniform1fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec2') {\n                gpgpu.gl.uniform2fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec3') {\n                gpgpu.gl.uniform3fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec4') {\n                gpgpu.gl.uniform4fv(customLoc, customValue);\n            }\n            else if (d.type === 'int') {\n                gpgpu.gl.uniform1iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec2') {\n                gpgpu.gl.uniform2iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec3') {\n                gpgpu.gl.uniform3iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec4') {\n                gpgpu.gl.uniform4iv(customLoc, customValue);\n            }\n            else {\n                throw Error(`uniform type ${d.type} is not supported yet.`);\n            }\n        });\n    }\n    gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        // TODO: Remove the condition of !x.isUniform.\n        if (program.enableShapeUniforms && !x.isUniform) {\n            const xTexShape = x.texData.texShape;\n            const { useSqueezeShape, uniformShape, keptDims } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n            let rank1 = '', rank2 = '', rank34 = '';\n            if (uniformShape.length === 1 && program.packedInputs) {\n                const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n                rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n            }\n            else if (uniformShape.length === 2 && !program.packedInputs) {\n                rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n            }\n            else if (uniformShape.length > 2 && !program.packedInputs) {\n                const strides = util.computeStrides(uniformShape);\n                rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n            }\n            const xRank = x.shape.length;\n            const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n            const isScalar = util.sizeFromShape(x.shape) === 1;\n            const broadcastDims = backend_util.getBroadcastDims(x.shape, output.shape);\n            const isInOutTexShapeEqual = !program.packedInputs &&\n                xRank === output.shape.length &&\n                util.arraysEqual(xTexShape, output.texData.texShape);\n            const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ?\n                '' :\n                `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n            // These key components are needed due to shader_compiler is embedding\n            // them in the shader.\n            // |xRank| is used to determine the coords length. See\n            // get[Packed]SamplerAtOutputCoords.\n            // |isInOutTexShapeEqual| is used to determine whether going to an\n            // optimization path in getSamplerAtOutputCoords.\n            // |useSqueezeShape| is extracted from squeezeInputInfo of\n            // getSampler[2|3|4]D/getPackedSampler3D.\n            // |isScalar| is extracted from isInputScalar/isOutputScalar in\n            // getPackedSamplerAtOutputCoords.\n            // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n            // |isLogicalShapTexShapeEqual| is used in\n            // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n            // |rank1| is used in getOutputPacked1DCoords.\n            // |rank2| is used in getOutput2DCoords.\n            // |rank34| is used in getSampler3D/getSampler4D.\n            // |isTexShapeGreaterThanOne| are used in\n            // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n            keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n        }\n        else {\n            const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n            keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n        }\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode +\n        `${env().getNumber('WEBGL_VERSION')}`;\n    return key;\n}\nexport function useShapeUniforms(rank) {\n    // TODO: Remove the limitaion of rank <= 4.\n    return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport { PackingScheme } from './tex_util';\nexport class DecodeMatrixProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport { PackingScheme } from './tex_util';\nexport class DecodeMatrixPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outPackingScheme = PackingScheme.DENSE;\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outTexUsage = TextureUsage.DOWNLOAD;\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class EncodeMatrixProgram {\n    constructor(outputShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        let output = `result`;\n        if (inputIsUnsignedByte) {\n            output = `floor(result * 255. + 0.5)`;\n        }\n        this.userCode = `\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n            shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nexport class EncodeMatrixPackedProgram {\n    constructor(outputShape, inputIsUnsignedByte = false) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        this.customUniforms = [{ name: 'texShape', type: 'ivec2' }];\n        const glsl = getGlslDifferences();\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        let mainLoop = '';\n        let output = 'result';\n        if (inputIsUnsignedByte) {\n            output = 'floor(result * 255. + 0.5)';\n        }\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                const channel = row * 2 + col;\n                mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n            }\n        }\n        this.userCode = `\n        ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n            shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n    const glsl = getGlslDifferences();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(width, height);\n    const texture = webgl_util.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl\n            .texStorage2D(tex2d, 1, internalFormat, width, height));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return { texture, texShape: [height, width] };\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n    }\n    else {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.vertexAttrsAreBound = false;\n        this.itemsToPoll = [];\n        const glVersion = env().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            setWebGLContext(glVersion, gl);\n        }\n        else {\n            this.gl = getWebGLContext(glVersion);\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        this.parallelCompilationExtension =\n            this.gl.getExtension('KHR_parallel_shader_compile');\n        if (env().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return env().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        webgl_util.callAndCheck(gl, () => gl.finish());\n        webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShader) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        if (this.vertexShader == null) {\n            this.vertexShader = gpgpu_util.createVertexShader(gl);\n        }\n        const program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        webgl_util.linkProgram(gl, program);\n        if (this.debug) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (!this.vertexAttrsAreBound) {\n            this.setProgram(program);\n            this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if ((this.program != null) && this.debug) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        let scheduleFn = undefined;\n        if ('setTimeoutCustom' in env().platform) {\n            scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n        }\n        util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        }, () => 0, null, scheduleFn);\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);\n        }\n    });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const realVals = backend.data.get(real.dataId).values;\n    const imagVals = backend.data.get(imag.dataId).values;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.data.get(complexInfo.dataId);\n    // The complex tensor owns the underlying real and imag tensorInfos, only the\n    // complex tensor tracks refCount, when complexData is disposed the\n    // underlying tensorData will be disposed.\n    complex.complexTensorInfos = {\n        real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n        imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n    };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'cpu',\n    kernelFunc: complex\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(backend, shape, dtype = 'float32') {\n    if (dtype === 'complex64') {\n        const real = zeros(backend, shape, 'float32');\n        const imag = zeros(backend, shape, 'float32');\n        return complex({ inputs: { real, imag }, backend });\n    }\n    const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n    return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nexport const identityConfig = {\n    kernelName: Identity,\n    backendName: 'cpu',\n    kernelFunc: identity\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nexport function real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const real = backend.data.get(input.dataId).complexTensorInfos.real;\n    const realVal = backend.data.get(real.dataId).values;\n    // When complex tensor is disposed, its underlying parts will be disposed too.\n    // Make new tensor out of the real value of the complex. This makes sure the\n    // value is still accessible even if complex tensor is disposed.\n    return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nexport const realConfig = {\n    kernelName: Real,\n    backendName: 'cpu',\n    kernelFunc: real\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function castImpl(values, shape, inputType, dtype) {\n    if (dtype === 'int32') {\n        const resultValues = Int32Array.from(values);\n        return [shape, 'int32', resultValues];\n    }\n    if (dtype === 'bool') {\n        // This is essentially the result of notEqual(x, 0). We avoid using\n        // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n        // cast -> notEqual -> binary_utils.\n        const zero = util.toTypedArray([0], inputType);\n        const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n        return [resultShape, 'bool', resultData];\n    }\n    throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensorInfo }, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    const values = backend.data.get(x.dataId).values;\n    const [resultShape, resultType, resultData] = castImpl(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'cpu',\n    kernelFunc: cast\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n    if (complexImpl == null) {\n        return ({ inputs, backend }) => {\n            const { a, b } = inputs;\n            const cpuBackend = backend;\n            assertNotComplex([a, b], name);\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const decodedAVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(aVals) :\n                aVals;\n            const decodedBVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(bVals) :\n                bVals;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        };\n    }\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const cpuBackend = backend;\n        if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n            const $aComplex = cast({ inputs: { x: a }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n            const aReal = $aComplexVals.complexTensorInfos.real;\n            const aImag = $aComplexVals.complexTensorInfos.imag;\n            const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n            const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n            const $bComplex = cast({ inputs: { x: b }, backend: cpuBackend, attrs: { dtype: 'complex64' } });\n            const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n            const bReal = $bComplexVals.complexTensorInfos.real;\n            const bImag = $bComplexVals.complexTensorInfos.imag;\n            const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n            const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n            const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n            const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n            const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n            const result = complex({ inputs: { real: resultReal, imag: resultImag }, backend: cpuBackend });\n            cpuBackend.disposeIntermediateTensorInfo($aComplex);\n            cpuBackend.disposeIntermediateTensorInfo($bComplex);\n            cpuBackend.disposeIntermediateTensorInfo(resultReal);\n            cpuBackend.disposeIntermediateTensorInfo(resultImag);\n            return result;\n        }\n        else {\n            const aVals = cpuBackend.data.get(a.dataId).values;\n            const bVals = cpuBackend.data.get(b.dataId).values;\n            const $dtype = dtype || a.dtype;\n            const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n            return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n        }\n    };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op) {\n    return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n        const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultSize = util.sizeFromShape(resultShape);\n        const resultRank = resultShape.length;\n        const resultStrides = util.computeStrides(resultShape);\n        const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n        const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n        const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n        const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n        const aRank = aShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bRank = bShape.length;\n        const bStrides = util.computeStrides(bShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const aIdx = i % aVals.length;\n                const bIdx = i % bVals.length;\n                const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n                resultRealVals[i] = result.real;\n                resultImagVals[i] = result.imag;\n            }\n        }\n        else {\n            for (let i = 0; i < resultRealVals.length; i++) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n                resultRealVals[i] = opResult.real;\n                resultImagVals[i] = opResult.imag;\n            }\n        }\n        return [resultRealVals, resultImagVals, resultShape];\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(name, op, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const xSize = util.sizeFromShape(x.shape);\n        const $dtype = dtype || x.dtype;\n        const newValues = util.getArrayFromDType($dtype, xSize);\n        for (let i = 0; i < xSize; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n    return ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        assertNotComplex(x, name);\n        if (x.dtype === 'string' || dtype === 'string') {\n            throw new Error('unaryKernelFunc does not support string input/output');\n        }\n        const cpuBackend = backend;\n        const values = cpuBackend.data.get(x.dataId).values;\n        const $dtype = dtype || x.dtype;\n        const newValues = unaryImpl(values, $dtype, attrs);\n        return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'cpu',\n    kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n    const outBuf = buffer([numSlices, sliceSize], dtype);\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n        }\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n            outBuf.values[i] = xBuf.values[originalIndex];\n        } // Else, index is out of bounds, so leave the default zero val in outBuf.\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'cpu',\n    kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'cpu',\n    kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (Number.isNaN(value) ||\n                value > max) { // comparison with NaN always return false\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, attrs, backend } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    assertNotComplex(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    const values = backend.data.get(x.dataId).values;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n    const dataId = backend.write(result, newShape, x.dtype);\n    return { dataId, shape: newShape, dtype: x.dtype };\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'cpu',\n    kernelFunc: transpose\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction validateIndices(indices, indicesShape, numParams) {\n    indices.forEach((index, i) => {\n        if (index < 0 || index >= numParams) {\n            const locString = util.indexToLoc(i, indicesShape.length, util.computeStrides(indicesShape))\n                .join(',');\n            throw new Error(`indices[${locString}] = ${index} is not in [0, ${numParams})`);\n        }\n    });\n}\nfunction validateSplits(paramsNestedSplits, numParamsDenseValues) {\n    // Validate\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n        const splits = paramsNestedSplits[dim];\n        const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n            numParamsDenseValues :\n            paramsNestedSplits[dim + 1].length;\n        if (splits.length === 0) {\n            throw new Error('Ragged splits may not be empty');\n        }\n        if (splits[0] < 0) {\n            throw new Error('Ragged splits must be non-negative');\n        }\n        if (splits[splits.length - 1] > lastSplit) {\n            throw new Error('Ragged splits must not point past values');\n        }\n        for (let i = 1; i < splits.length; ++i) {\n            if (splits[i - 1] > splits[i]) {\n                throw new Error('Ragged splits must be sorted in ascending order');\n            }\n        }\n    }\n}\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(indices, indicesShape, paramsNestedSplits, numParamsDenseValues) {\n    const valueSlices = [];\n    let numValues = 0;\n    const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n    const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n    validateSplits(paramsNestedSplits, numParamsDenseValues);\n    // Add `splits` that come from all but the last dimension of the dense\n    // Tensor `indices`.  In particular, for each dimension D, we add a\n    // splits tensor whose values are:\n    //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n    // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n    //   [0, 3, 6]                    # length=2+1, stride=3\n    //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n    let nrows = 1;\n    for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n        nrows *= indicesShape[dim];\n        const rowLength = indicesShape[dim + 1];\n        for (let i = 1; i < nrows + 1; ++i) {\n            outSplits[dim].push(i * rowLength);\n        }\n    }\n    // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n    // outermost ragged dimension (i.e., the first `splits` tensor), we work\n    // our way in, finding the range of values that should be copied.  As we\n    // go, we update the output `splits` for each dimension with the appropriate\n    // values.  In particular, the *lengths* of the slices from `param_splits`\n    // should be copied to generate corresponding slice lengths in the output\n    // splits.  E.g., if we are copying a ragged row with length 4, then we\n    // should add a new split point to outSplits that is 4 greater than the\n    // previous split point in outSplits.\n    for (let i = 0; i < indices.length; ++i) {\n        let start = indices[i];\n        let limit = indices[i] + 1;\n        // Copy splits.\n        for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n            const splits = paramsNestedSplits[dim];\n            const outDim = dim + indicesShape.length - 1;\n            if (outDim >= 0) {\n                const outSplitsOutDim = outSplits[outDim];\n                const delta = outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n                for (let j = start; j < limit; ++j) {\n                    outSplits[outDim].push(splits[j + 1] + delta);\n                }\n            }\n            start = splits[start];\n            limit = splits[limit];\n        }\n        if (limit !== start) {\n            valueSlices.push([start, limit]);\n            numValues += limit - start;\n        }\n    }\n    return { outSplits, valueSlices, numValues };\n}\nfunction getSplits(outSplits) {\n    const splitsOut = [];\n    for (let i = 0; i < outSplits.length; ++i) {\n        const numSplits = outSplits[i].length;\n        const splits = util.getArrayFromDType('int32', numSplits);\n        splitsOut.push(splits);\n        outSplits[i].forEach((value, j) => splits[j] = value);\n    }\n    return splitsOut;\n}\nfunction computeFlatOuterDims(orig, numOutDims) {\n    const outDims = orig.slice(0, numOutDims);\n    while (outDims.length < numOutDims) {\n        outDims.push(1);\n    }\n    for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n        outDims[numOutDims - 1] *= orig[inDim];\n    }\n    return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize, values, valuesShape) {\n    const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n    const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n    let outPos = 0;\n    for (const slice of valueSlices) {\n        for (let i = slice[0]; i < slice[1]; ++i) {\n            for (let j = 0; j < valueSize; ++j) {\n                values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n            }\n            ++outPos;\n        }\n    }\n}\nfunction getValues(paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, valueSlices, numValues) {\n    const valuesShape = paramsDenseValuesShape.slice();\n    valuesShape[0] = numValues;\n    const valuesOut = util.getArrayFromDType(paramsDenseValuesDType, util.sizeFromShape(valuesShape));\n    const numElements = paramsDenseValues.length;\n    const valueSize = numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n    writeValueSlices(paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize, valuesOut, valuesShape);\n    return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(paramsNestedSplits, paramsNestedSplitsShapes, paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, indices, indicesShape, outputRaggedRank) {\n    if (paramsNestedSplits.length === 0) {\n        throw new Error('paramsNestedSplits must be non empty');\n    }\n    if (paramsNestedSplitsShapes[0].length === 0) {\n        throw new Error('Split tensors must not be scalars');\n    }\n    const numParams = paramsNestedSplitsShapes[0][0] - 1;\n    validateIndices(indices, indicesShape, numParams);\n    if (paramsDenseValuesShape.length === 0) {\n        throw new Error('params.rank must be nonzero');\n    }\n    const numParamsDenseValues = paramsDenseValuesShape[0];\n    // Calculate the `splits`, and store the value slices that we need to\n    // copy in `valueSlices`.\n    const { outSplits, valueSlices, numValues } = makeSplits(indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n    // Write the output tensors.\n    const outputNestedSplits = getSplits(outSplits);\n    const outputDenseValues = getValues(paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, valueSlices, numValues);\n    return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, broadcastTo, reshape, tidy, util } from '@tensorflow/tfjs-core';\nvar RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n    constructor(shape, shapeShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypeStrings) {\n        this.shape = shape;\n        this.shapeShape = shapeShape;\n        this.values = values;\n        this.valuesShape = valuesShape;\n        this.valuesDType = valuesDType;\n        this.defaultValue = defaultValue;\n        this.defaultValueShape = defaultValueShape;\n        this.rowPartitionValues = rowPartitionValues;\n        this.rowPartitionValuesShapes = rowPartitionValuesShapes;\n        this.rowPartitionTypes =\n            backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n        this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n    }\n    getRowPartitionTypeByDimension(dimension) {\n        if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n            return this.rowPartitionTypes[dimension + 1];\n        }\n        else {\n            return this.rowPartitionTypes[dimension];\n        }\n    }\n    // Returns the relationship between dimension and dimension + 1.\n    getRowPartitionTensor(dimension) {\n        if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n            return this.rowPartitionValues[dimension + 1];\n        }\n        else {\n            return this.rowPartitionValues[dimension];\n        }\n    }\n    getMaxWidth(dimension) {\n        const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n        switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n            case RowPartitionType.VALUE_ROWIDS:\n                return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n            case RowPartitionType.ROW_SPLITS:\n                return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n            default:\n                throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(dimension - 1)]}`);\n        }\n    }\n    static getMaxWidthRowSplit(rowSplit) {\n        const tensorLength = rowSplit.length;\n        if (tensorLength === 0 || tensorLength === 1) {\n            return 0;\n        }\n        let maxWidth = 0;\n        for (let i = 0; i < tensorLength - 1; ++i) {\n            const currentWidth = rowSplit[i + 1] - rowSplit[i];\n            if (currentWidth > maxWidth) {\n                maxWidth = currentWidth;\n            }\n        }\n        return maxWidth;\n    }\n    static getMaxWidthValueRowID(valueRowIds) {\n        const indexLength = valueRowIds.length;\n        if (indexLength === 0) {\n            return 0;\n        }\n        let firstEqualIndex = 0;\n        let firstEqualIndexValue = valueRowIds[0];\n        let maxWidth = 0;\n        for (let i = 1; i < indexLength; ++i) {\n            const value = valueRowIds[i];\n            if (value !== firstEqualIndexValue) {\n                firstEqualIndexValue = value;\n                maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n                firstEqualIndex = i;\n            }\n        }\n        return Math.max(indexLength - firstEqualIndex, maxWidth);\n    }\n    tensorShapeFromTensor(t, tShape, isPartial = true) {\n        if (tShape.length === 0) {\n            if (t[0] === -1) {\n                return [];\n            }\n            throw new Error(`The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n        }\n        // MakePartialShape/MakeShapeHelper.\n        return makeShape(t, isPartial);\n    }\n    calculateOutputSize(firstDim) {\n        const valueShape = this.valuesShape;\n        const defaultValueShape = this.defaultValueShape;\n        backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n        const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n        const outputShape = backend_util.combineRaggedTensorToTensorShapes(this.raggedRank, shape, valueShape);\n        const result = outputShape;\n        if (result[0] < 0) {\n            result[0] = firstDim;\n        }\n        for (let i = 1; i <= this.raggedRank; ++i) {\n            if (result[i] < 0) {\n                result[i] = this.getMaxWidth(i);\n            }\n        }\n        return result;\n    }\n    /**\n     * The outputIndex represents the index in the output tensor\n     * where the first element of a particular dimension would be written.\n     * If it is -1, it indicates that the index is out of scope.\n     * Example, given firstDimension = 10, firstDimensionOutput = 6,\n     * and outputIndexMultiplier = 100:\n     * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n     * If firstDimensionOutput = 11 instead, then:\n     * result = [0 100 200 300 400 500 600 700 800 900]\n     */\n    calculateFirstParentOutputIndex(firstDimension, outputIndexMultiplier, firstDimensionOutput) {\n        const minDimension = Math.min(firstDimension, firstDimensionOutput);\n        const result = [];\n        let currentOutputIndex = 0;\n        for (let i = 0; i < minDimension; ++i, currentOutputIndex += outputIndexMultiplier) {\n            result.push(currentOutputIndex);\n        }\n        for (let i = minDimension; i < firstDimension; ++i) {\n            result.push(-1);\n        }\n        util.assert(result.length === firstDimension, () => 'Final length of result must be equal to firstDimension.');\n        return result;\n    }\n    calculateOutputIndexRowSplit(rowSplit, parentOutputIndex, outputIndexMultiplier, outputSize) {\n        const rowSplitSize = rowSplit.length;\n        const result = [];\n        for (let i = 0; i < rowSplitSize - 1; ++i) {\n            const rowLength = rowSplit[i + 1] - rowSplit[i];\n            let realLength = Math.min(outputSize, rowLength);\n            let parentOutputIndexCurrent = parentOutputIndex[i];\n            if (parentOutputIndexCurrent === -1) {\n                realLength = 0;\n            }\n            for (let j = 0; j < realLength; ++j) {\n                result.push(parentOutputIndexCurrent);\n                parentOutputIndexCurrent += outputIndexMultiplier;\n            }\n            for (let j = 0; j < rowLength - realLength; ++j) {\n                result.push(-1);\n            }\n        }\n        if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n            throw new Error('Invalid row split size.');\n        }\n        return result;\n    }\n    // Calculate the output index of the first element of a list.\n    // The parentOutputIndex is the same computation for the previous list.\n    // -1 indicates an element or list that is out of range.\n    // The outputIndexMultiplier is the number of output indices one moves\n    // forward for each column.\n    // E.g., given:\n    // valueRowIds:[0 1 2 2 2 3 5 5 6]\n    // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n    // outputIndexMultiplier: 10\n    // outputSize: 2\n    // You get:\n    // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n    // result[0] = parentOutputIndex[valueRowIds[0]]\n    // result[1] = parentOutputIndex[valueRowIds[1]]\n    // result[2] = parentOutputIndex[valueRowIds[2]]\n    // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n    // result[4] = -1 because it is the third element the size is 2.\n    // result[5] = parentOutputIndex[valueRowIds[3]]\n    // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n    // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n    // result[8] = parentOutputIndex[valueRowIds[7]]\n    calculateOutputIndexValueRowID(valueRowIds, parentOutputIndex, outputIndexMultiplier, outputSize) {\n        const indexSize = valueRowIds.length;\n        const result = [];\n        if (indexSize === 0) {\n            return [];\n        }\n        let currentOutputColumn = 0;\n        let currentValueRowId = valueRowIds[0];\n        if (currentValueRowId >= parentOutputIndex.length) {\n            throw new Error(`Got currentValueRowId=${currentValueRowId}, which is not less than ${parentOutputIndex.length}`);\n        }\n        let currentOutputIndex = parentOutputIndex[currentValueRowId];\n        result.push(currentOutputIndex);\n        for (let i = 1; i < indexSize; ++i) {\n            const nextValueRowId = valueRowIds[i];\n            if (nextValueRowId === currentValueRowId) {\n                if (currentOutputIndex >= 0) {\n                    ++currentOutputColumn;\n                    if (currentOutputColumn < outputSize) {\n                        currentOutputIndex += outputIndexMultiplier;\n                    }\n                    else {\n                        currentOutputIndex = -1;\n                    }\n                }\n            }\n            else {\n                currentOutputColumn = 0;\n                currentValueRowId = nextValueRowId;\n                if (nextValueRowId >= parentOutputIndex.length) {\n                    throw new Error(`Got nextValueRowId=${nextValueRowId} which is not less than ${parentOutputIndex.length}`);\n                }\n                currentOutputIndex = parentOutputIndex[nextValueRowId];\n            }\n            result.push(currentOutputIndex);\n        }\n        if (result.length !== valueRowIds.length) {\n            throw new Error('Invalid row ids.');\n        }\n        return result;\n    }\n    calculateOutputIndex(dimension, parentOutputIndex, outputIndexMultiplier, outputSize) {\n        const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n        const partitionType = this.getRowPartitionTypeByDimension(dimension);\n        switch (partitionType) {\n            case RowPartitionType.VALUE_ROWIDS:\n                return this.calculateOutputIndexValueRowID(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);\n            case RowPartitionType.ROW_SPLITS:\n                if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n                    throw new Error(`Row partition size is greater than output size: ${rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n                }\n                return this.calculateOutputIndexRowSplit(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);\n            default:\n                throw new Error(`Unsupported partition type: ${RowPartitionType[partitionType]}`);\n        }\n    }\n    getFirstDimensionSize() {\n        const firstPartitionTensor = this.rowPartitionValues[0];\n        if (this.rowPartitionTypes.length === 0) {\n            throw new Error('No row_partition_types given.');\n        }\n        const firstPartitionType = this.rowPartitionTypes[0];\n        switch (firstPartitionType) {\n            case RowPartitionType.FIRST_DIM_SIZE:\n                return firstPartitionTensor[0];\n            case RowPartitionType.VALUE_ROWIDS:\n                throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n            case RowPartitionType.ROW_SPLITS:\n                return this.rowPartitionValuesShapes[0][0] - 1;\n            default:\n                throw new Error(`Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n        }\n    }\n    compute() {\n        const firstPartitionTensor = this.rowPartitionValues[0];\n        if (firstPartitionTensor.length <= 0) {\n            throw new Error('Invalid first partition input. ' +\n                'Tensor requires at least one element.');\n        }\n        const firstDimension = this.getFirstDimensionSize();\n        const outputSize = this.calculateOutputSize(firstDimension);\n        const multiplier = new Array(this.raggedRank + 1);\n        multiplier[multiplier.length - 1] = 1;\n        for (let i = multiplier.length - 2; i >= 0; --i) {\n            multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n        }\n        // Full size of the tensor.\n        const outputShape = makeShape(outputSize, false);\n        const outputTensor = util.getArrayFromDType(this.valuesDType, util.sizeFromShape(outputShape));\n        const fullSize = multiplier[0] * outputSize[0];\n        if (fullSize > 0) {\n            let outputIndex = this.calculateFirstParentOutputIndex(firstDimension, multiplier[0], outputSize[0]);\n            for (let i = 1; i <= this.raggedRank; ++i) {\n                const newOutputIndex = this.calculateOutputIndex(i - 1, outputIndex, multiplier[i], outputSize[i]);\n                outputIndex = newOutputIndex;\n            }\n            this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n        }\n        return [outputShape, outputTensor];\n    }\n    setOutput(raggedRank, outputIndex, outputTensor, outputShape) {\n        if (outputTensor.length === 0) {\n            return;\n        }\n        const valuesBase = this.values;\n        const outputBase = outputTensor;\n        let elementShape = outputShape.slice();\n        elementShape = elementShape.slice(raggedRank + 1);\n        const valueElementSize = util.sizeFromShape(elementShape);\n        const outputIndexSize = outputIndex.length;\n        // Broadcast the default value to value_element_size.  (We can skip this\n        // if defaultValueTensor.size == 1, since we use fill when that's true.)\n        let defaultValue = this.defaultValue;\n        if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n            const srcShape = this.defaultValueShape;\n            tidy(() => {\n                const defaultValueTensor = reshape(defaultValue, srcShape);\n                const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n                defaultValue = bCastDefault.dataSync();\n            });\n        }\n        // Loop through the outputIndex array, finding contiguous regions that\n        // should be copied.  Once we find the end of a contiguous region, copy it\n        // and add any necessary padding (with defaultValue).\n        let srcStart = 0; // Start of contiguous region (in values)\n        let dstStart = 0; // Destination for contiguous region (in output)\n        let dstEnd = 0; // Destination for contiguous region (in output)\n        for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n            // dstI is the destination where the value at srcI should be copied.\n            let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n            // If we're still in a contiguous region, then update dstEnd go to the\n            // next srcI.\n            if (dstI === dstEnd) {\n                ++dstEnd;\n                continue;\n            }\n            // We found the end of contiguous region.  This can be because we found\n            // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n            // because it's out-of-bounds (dstI == -1), or the end of the tensor\n            // (dstI === -1).\n            if (dstStart < dstEnd) {\n                // Copy the contiguous region.\n                const src = valuesBase.subarray(srcStart * valueElementSize);\n                const dst = outputBase.subarray(dstStart * valueElementSize);\n                const nVals = (dstEnd - dstStart) * valueElementSize;\n                copyArray(dst, src, nVals);\n            }\n            // Add any necessary padding (w/ defaultValue).\n            if (srcI >= outputIndexSize) {\n                // We reached the end of values: pad to the end of output.\n                const outputSize = outputTensor.length;\n                dstI = Math.floor(outputSize / valueElementSize);\n            }\n            if (dstI > dstEnd) {\n                if (this.defaultValue.length === 1) {\n                    outputBase\n                        .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n                        .fill(this.defaultValue[0]);\n                    dstEnd = dstI;\n                }\n                else {\n                    while (dstI > dstEnd) {\n                        const dst = outputBase.slice(dstEnd * valueElementSize);\n                        copyArray(dst, defaultValue, valueElementSize);\n                        ++dstEnd;\n                    }\n                }\n            }\n            // Update indices.\n            if (dstI < 0) {\n                // srcI should be skipped -- leave it out of the contiguous region.\n                srcStart = srcI + 1;\n                dstStart = dstEnd;\n            }\n            else {\n                // srcI should be copied -- include it in the contiguous region.\n                srcStart = srcI;\n                dstStart = dstEnd;\n                dstEnd = dstStart + 1;\n            }\n        }\n    }\n}\nfunction copyArray(dst, src, size) {\n    for (let i = 0; i < size; i++) {\n        dst[i] = src[i];\n    }\n}\nfunction makeShape(shape, isPartial) {\n    const out = [];\n    for (let dim of shape) {\n        if (dim < 0) {\n            if (!isPartial) {\n                throw new Error(`Dimension ${dim} must be >= 0`);\n            }\n            if (dim < -1) {\n                throw new Error(`Dimension ${dim} must be >= -1`);\n            }\n            dim = -1;\n        }\n        out.push(dim);\n    }\n    return out;\n}\nexport function raggedTensorToTensorImpl(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes) {\n    return new RaggedTensorToTensorOp(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes)\n        .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const indicesData = indices.values;\n    const updatesData = updates.values;\n    if (outputSize === 0) {\n        return buffer(shape, updates.dtype);\n    }\n    const outBuf = buffer(flattenShape, updates.dtype);\n    if (typeof defaultValue === 'string') {\n        outBuf.values.fill(defaultValue);\n    }\n    else if (typeof defaultValue === 'number') {\n        outBuf.values.fill(defaultValue);\n    }\n    else if (typeof defaultValue === 'boolean') {\n        outBuf.values.fill(+defaultValue);\n    }\n    for (let i = 0; i < numUpdates; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            index.push(dim);\n            flattenIndex += dim * strides[j];\n        }\n        if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            if (sumDupeIndices) {\n                outBuf.values[flattenIndex * sliceSize + k] +=\n                    updatesData[i * sliceSize + k];\n            }\n            else {\n                outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                    updatesData[0] :\n                    updatesData[i * sliceSize + k];\n            }\n        }\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sigmoidImpl = createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid = unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoidConfig = {\n    kernelName: Sigmoid,\n    backendName: 'cpu',\n    kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n    const indicesCount = indicesShape[0];\n    const denseRows = denseShape[0];\n    const emptyRowIndicator = new Array(denseRows);\n    const reverseIndexMap = new Array(indicesCount);\n    const rank = indicesShape[1];\n    if (denseRows === 0) {\n        if (indicesCount !== 0) {\n            throw new Error(backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));\n        }\n        const outputIndices = util.getArrayFromDType(indicesDType, 0);\n        const outputValues = util.getArrayFromDType(valuesDType, 0);\n        return [\n            outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n        ];\n    }\n    let rowsAreOrdered = true;\n    let lastIndicesRow = 0;\n    const csrOffset = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n        // indices is a 2d tensor with shape of [N, rank]\n        const row = indices[i * rank];\n        if (row < 0) {\n            throw new Error(backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n        }\n        if (row >= denseRows) {\n            throw new Error(backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));\n        }\n        ++csrOffset[row];\n        rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n        lastIndicesRow = row;\n    }\n    let allRowsFull = true;\n    for (let row = 0; row < denseRows; ++row) {\n        // csrOffset here describes the number of elements in this dense row\n        const rowEmpty = (csrOffset[row] === 0);\n        emptyRowIndicator[row] = rowEmpty;\n        allRowsFull = allRowsFull && !rowEmpty;\n        // In filled version, each row has at least one element.\n        csrOffset[row] = Math.max(csrOffset[row], 1);\n        // Update csrOffset to represent the number of elements up to and\n        // including denseRows + 1:\n        //  csrOffset[0] == #{elements of row 0}\n        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n        //  ..\n        //  csrOffset[i] == starting index for elements in row i + 1.\n        if (row > 0) {\n            csrOffset[row] += csrOffset[row - 1];\n        }\n    }\n    if (allRowsFull && rowsAreOrdered) {\n        const outputIndices = indices;\n        const outputValues = values;\n        for (let i = 0; i < indicesCount; ++i) {\n            reverseIndexMap[i] = i;\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n    else {\n        const fullIndicesCount = csrOffset[denseRows - 1];\n        const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n        const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n        const filledCount = new Array(denseRows).fill(0);\n        // Fill in values for rows that are not missing\n        for (let i = 0; i < indicesCount; ++i) {\n            // indices is a 2d tensor with shape of [N, rank]\n            const row = indices[i * rank];\n            const offset = filledCount[row];\n            const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n            filledCount[row]++; // Increment the filled count for this row.\n            for (let j = 0; j < rank; ++j) {\n                // indices and outputIndices are 2d tensors with shape of [N, rank]\n                outputIndices[outputI * rank + j] = indices[i * rank + j];\n            }\n            outputValues[outputI] = values[i];\n            // We'll need this reverse index map to backprop correctly.\n            reverseIndexMap[i] = outputI;\n        }\n        // Fill in values for rows that are missing\n        for (let row = 0; row < denseRows; ++row) {\n            const rowCount = filledCount[row];\n            if (rowCount === 0) { // We haven't filled this row\n                const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n                // Remaining index values were set to zero already.\n                // Just need to set the row index in the right location.\n                // outputIndices is a 2d tensor with shape of [N, rank]\n                outputIndices[startingIndex * rank + 0] = row;\n                for (let col = 1; col < rank; ++col) {\n                    outputIndices[startingIndex * rank + col] = 0;\n                }\n                outputValues[startingIndex] = defaultValue;\n            }\n        }\n        return [\n            outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(backend_util\n                    .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(backend_util.getSparseReshapeNegativeOutputDimErrorMessage(d, size));\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error(backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(backend_util.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(backend_util.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {\n    const numIndices = indices.length;\n    // Flatten the array to two dimensions\n    const inputFlat = [inputShape[0], input.length / inputShape[0]];\n    const numCol = inputFlat[1];\n    // Note that the current implementation assumes that segmentIds values are\n    // sorted.\n    const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n    const outputRows = lastSegmentIdPlusOne;\n    if (outputRows < 0) {\n        throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n    }\n    const outputShape = inputShape.slice();\n    outputShape[0] = outputRows;\n    const outputLength = outputShape.reduce((product, value) => product * value, 1);\n    // Output array is initialized with the value 0 by default.\n    const output = util.getArrayFromDType(inputDType, outputLength);\n    // Note that we do not initialize the output buffer with a default value, so\n    // we need to explicitly set missing indices to the default value.\n    if (numIndices === 0) {\n        if (outputRows > 0) {\n            output.fill(defaultValue);\n        }\n        return [output, outputShape];\n    }\n    if (outputRows <= 0) {\n        throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n    }\n    let start = 0, end = 1;\n    // Index from which the output is not initialized.\n    let uninitializedIndex = 0;\n    let outIndex = segmentIds[start];\n    while (true) {\n        // We initialize nextIndex to 0 to avoid may be uninitialized warning\n        let nextIndex = 0;\n        if (end < numIndices) {\n            nextIndex = segmentIds[end];\n            if (outIndex === nextIndex) {\n                ++end;\n                continue;\n            }\n            // We have a new segment here.  Verify that the segment ids are growing.\n            if (outIndex >= nextIndex) {\n                throw new Error(backend_util\n                    .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n            }\n        }\n        if (outIndex < 0 || outIndex >= outputRows) {\n            throw new Error(backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(outIndex, outputRows));\n        }\n        // If there is a gap between two indices, we need to set that gap to the\n        // default value.\n        if (outIndex > uninitializedIndex) {\n            output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n        }\n        for (let i = start; i < end; ++i) {\n            const index = indices[i];\n            if (index < 0 || index >= inputFlat[0]) {\n                throw new Error(backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i, indices[i], inputFlat[0]));\n            }\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] += input[index * numCol + j];\n            }\n        }\n        if (isMean) {\n            for (let j = 0; j < numCol; j++) {\n                output[outIndex * numCol + j] /= end - start;\n            }\n        }\n        start = end;\n        ++end;\n        uninitializedIndex = outIndex + 1;\n        outIndex = nextIndex;\n        if (end > numIndices) {\n            break;\n        }\n    }\n    // Fill the gap at the end with the default value.\n    if (uninitializedIndex < outputRows) {\n        output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n    }\n    return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\nexport const sqrtConfig = {\n    kernelName: Sqrt,\n    backendName: 'cpu',\n    kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n    constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n        this.separator = util.encodeString(separator);\n        this.nGramWidths = nGramWidths;\n        this.leftPad = util.encodeString(leftPad);\n        this.rightPad = util.encodeString(rightPad);\n        this.padWidth = padWidth;\n        this.preserveShort = preserveShortSequences;\n    }\n    getPadWidth(nGramWidth) {\n        // Ngrams can be padded with either a fixed pad width or a dynamic pad\n        // width depending on the 'padWidth' arg, but in no case should the padding\n        // ever be wider than 'nGramWidth' - 1.\n        return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n    }\n    getNumNGrams(length, nGramWidth) {\n        const padWidth = this.getPadWidth(nGramWidth);\n        return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n    }\n    createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n        for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n            const padWidth = this.getPadWidth(nGramWidth);\n            const leftPadding = Math.max(0, padWidth - nGramIndex);\n            const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n            const numTokens = nGramWidth - (leftPadding + rightPadding);\n            const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n            // Calculate the total expected size of the nGram so we can reserve the\n            // correct amount of space in the string.\n            let nGramSize = 0;\n            // Size of the left padding.\n            nGramSize += leftPadding * this.leftPad.length;\n            // Size of the tokens.\n            for (let n = 0; n < numTokens; ++n) {\n                nGramSize += data[dataStartIndex + n].length;\n            }\n            // Size of the right padding.\n            nGramSize += rightPadding * this.rightPad.length;\n            // Size of the separators.\n            const numSeparators = leftPadding + rightPadding + numTokens - 1;\n            nGramSize += numSeparators * this.separator.length;\n            // Build the nGram.\n            output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n            const nGram = output[outputStartIndex + nGramIndex];\n            let nextNGramIndex = 0;\n            const appendToNGram = (str) => str.forEach((value) => nGram[nextNGramIndex++] = value);\n            for (let n = 0; n < leftPadding; ++n) {\n                appendToNGram(this.leftPad);\n                appendToNGram(this.separator);\n            }\n            // Only output first numTokens - 1 pairs of data and separator\n            for (let n = 0; n < numTokens - 1; ++n) {\n                appendToNGram(data[dataStartIndex + n]);\n                appendToNGram(this.separator);\n            }\n            // Handle case when there are no tokens or no right padding as these\n            // can result in consecutive separators.\n            if (numTokens > 0) {\n                // If we have tokens, then output last and then pair each separator\n                // with the right padding that follows, to ensure nGram ends either with\n                // the token or with the right pad.\n                appendToNGram(data[dataStartIndex + numTokens - 1]);\n                for (let n = 0; n < rightPadding; ++n) {\n                    appendToNGram(this.separator);\n                    appendToNGram(this.rightPad);\n                }\n            }\n            else {\n                // If we don't have tokens, then the last item inserted into the nGram\n                // has been the separator from the left padding loop above. Hence,\n                // output right pad and separator and make sure to finish with a\n                // padding, not a separator.\n                for (let n = 0; n < rightPadding - 1; ++n) {\n                    appendToNGram(this.rightPad);\n                    appendToNGram(this.separator);\n                }\n                appendToNGram(this.rightPad);\n            }\n        }\n    }\n    // Data and splits together form the definition of the ragged tensor,\n    // where data is 1 dimensional and contains the values of the tensor\n    // and splits denotes the indices at which each row starts.\n    compute(data, splits) {\n        // Validate that the splits are valid indices into data, only if there are\n        // splits specified.\n        const inputDataSize = data.length;\n        const splitsSize = splits.length;\n        if (splitsSize > 0) {\n            let prevSplit = splits[0];\n            if (prevSplit !== 0) {\n                throw new Error(`First split value must be 0, got ${prevSplit}`);\n            }\n            for (let i = 1; i < splitsSize; ++i) {\n                let validSplits = splits[i] >= prevSplit;\n                validSplits = validSplits && (splits[i] <= inputDataSize);\n                if (!validSplits) {\n                    throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n                }\n                prevSplit = splits[i];\n            }\n            if (prevSplit !== inputDataSize) {\n                throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n            }\n        }\n        const numBatchItems = splitsSize - 1;\n        const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n        // If there is no data or size, return an empty ragged tensor.\n        if (inputDataSize === 0 || splitsSize === 0) {\n            const empty = new Array(inputDataSize);\n            for (let i = 0; i <= numBatchItems; ++i) {\n                nGramsSplits[i] = 0;\n            }\n            return [empty, nGramsSplits];\n        }\n        nGramsSplits[0] = 0;\n        for (let i = 1; i <= numBatchItems; ++i) {\n            const length = splits[i] - splits[i - 1];\n            let numNGrams = 0;\n            this.nGramWidths.forEach((nGramWidth) => {\n                numNGrams += this.getNumNGrams(length, nGramWidth);\n            });\n            if (this.preserveShort && length > 0 && numNGrams === 0) {\n                numNGrams = 1;\n            }\n            nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n        }\n        const nGrams = new Array(nGramsSplits[numBatchItems]);\n        for (let i = 0; i < numBatchItems; ++i) {\n            const splitIndex = splits[i];\n            let outputStartIdx = nGramsSplits[i];\n            this.nGramWidths.forEach((nGramWidth) => {\n                const length = splits[i + 1] - splits[i];\n                const numNGrams = this.getNumNGrams(length, nGramWidth);\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n                outputStartIdx += numNGrams;\n            });\n            // If we're preserving short sequences, check to see if no sequence was\n            // generated by comparing the current output start idx to the original\n            // one (nGramSplitsdata). If no ngrams were generated, then they will\n            // be equal (since we increment outputStartIdx by numNGrams every\n            // time we create a set of ngrams.)\n            if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n                const dataLength = splits[i + 1] - splits[i];\n                // One legitimate reason to not have any ngrams when this.preserveShort\n                // is true is if the sequence itself is empty. In that case, move on.\n                if (dataLength === 0) {\n                    continue;\n                }\n                // We don't have to worry about dynamic padding sizes here: if padding\n                // was dynamic, every sequence would have had sufficient padding to\n                // generate at least one nGram.\n                const nGramWidth = dataLength + 2 * this.padWidth;\n                const numNGrams = 1;\n                this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n            }\n        }\n        return [nGrams, nGramsSplits];\n    }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences)\n        .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty, result) {\n    if (!str.length) {\n        return;\n    }\n    // When the delimiter is empty, the input is split into individual characters.\n    if (delimiters.length === 0) {\n        for (let i = 0; i < str.length; ++i) {\n            result.push(str.subarray(i, i + 1));\n        }\n        return;\n    }\n    // When there is one delimiter, the input is split only at that delimiter.\n    if (delimiters.length === 1) {\n        const delimiter = delimiters[0];\n        let f = str.indexOf(delimiter);\n        while (f !== -1) {\n            const token = str.subarray(0, f);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            str = str.subarray(f + 1);\n            f = str.indexOf(delimiter);\n        }\n        if (!skipEmpty || str.length !== 0) {\n            result.push(str);\n        }\n        return;\n    }\n    // When there are multiple delimiters, the input is split at every instance\n    // one of the delimiters appears.\n    let tokenStart = 0;\n    for (let i = 0; i < str.length + 1; i++) {\n        if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n            const token = str.subarray(tokenStart, i);\n            if (!skipEmpty || token.length !== 0) {\n                result.push(token);\n            }\n            tokenStart = i + 1;\n        }\n    }\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n    const batchSize = input.length;\n    // Empty delimiter means split the input character by character.\n    const tokens = [];\n    let outputSize = 0;\n    let maxNumEntries = 0;\n    const numIndices = new Array(batchSize);\n    for (let i = 0; i < batchSize; ++i) {\n        const prevTokensLength = tokens.length;\n        split(input[i], delimiter, skipEmpty, tokens);\n        const nEntries = tokens.length - prevTokensLength;\n        numIndices[i] = nEntries;\n        outputSize += nEntries;\n        maxNumEntries = Math.max(maxNumEntries, nEntries);\n    }\n    const indices = util.getArrayFromDType('int32', outputSize * 2);\n    const values = new Array(outputSize);\n    const shape = [batchSize, maxNumEntries];\n    let c = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        for (let j = 0; j < numIndices[i]; ++j) {\n            // indices is a 2d tensor with shape of [outputSize, 2]\n            indices[c * 2] = i;\n            indices[c * 2 + 1] = j;\n            values[c] = tokens[c];\n            ++c;\n        }\n    }\n    return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function stringToHashBucketFastImpl(input, numBuckets) {\n    const output = util.getArrayFromDType('int32', input.length);\n    for (let i = 0; i < input.length; ++i) {\n        output[i] =\n            util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n    }\n    return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nconst comparePair = (a, b) => {\n    const valueDiff = b.value - a.value;\n    return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array, k, left = 0, right = array.length - 1) {\n    while (right > left) {\n        // Use select recursively to sample a smaller set of size s\n        // the arbitrary constants 600 and 0.5 are used in the original\n        // version to minimize execution time.\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const i = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n            const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n            select(array, k, newLeft, newRight);\n        }\n        // partition the elements between left and right around t\n        const t = array[k];\n        let i = left;\n        let j = right;\n        util.swap(array, left, k);\n        if (comparePair(array[right], t) > 0) {\n            util.swap(array, left, right);\n        }\n        while (i < j) {\n            util.swap(array, i, j);\n            i++;\n            j--;\n            while (comparePair(array[i], t) < 0) {\n                i = i + 1;\n            }\n            while (comparePair(array[j], t) > 0) {\n                j = j - 1;\n            }\n        }\n        if (comparePair(array[left], t) === 0) {\n            util.swap(array, left, j);\n        }\n        else {\n            j = j + 1;\n            util.swap(array, j, right);\n        }\n        // Adjust left and right towards the boundaries of the subset\n        // containing the (k - left + 1)th smallest element.\n        if (j <= k) {\n            left = j + 1;\n        }\n        if (k <= j) {\n            right = j - 1;\n        }\n    }\n}\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        let valAndInd = new Array(vals.length);\n        vals.forEach((value, index) => valAndInd[index] = { value, index });\n        if (k < valAndInd.length) {\n            select(valAndInd, k);\n            valAndInd = valAndInd.slice(0, k);\n        }\n        if (sorted) {\n            valAndInd.sort(comparePair);\n        }\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Shared functionality among backends.\nexport { simpleAbsImpl } from './kernels/Abs';\nexport { addImpl } from './kernels/Add';\nexport { bincountImpl, bincountReduceImpl } from './kernels/Bincount_impl';\nexport { castImpl } from './kernels/Cast';\nexport { ceilImpl } from './kernels/Ceil';\nexport { concatImpl } from './kernels/Concat_impl';\nexport { equalImpl } from './kernels/Equal';\nexport { expImpl } from './kernels/Exp';\nexport { expm1Impl } from './kernels/Expm1';\nexport { floorImpl } from './kernels/Floor';\nexport { gatherNdImpl } from './kernels/GatherNd_Impl';\nexport { gatherV2Impl } from './kernels/GatherV2_impl';\nexport { greaterImpl } from './kernels/Greater';\nexport { greaterEqualImpl } from './kernels/GreaterEqual';\nexport { lessImpl } from './kernels/Less';\nexport { lessEqualImpl } from './kernels/LessEqual';\nexport { linSpaceImpl } from './kernels/LinSpace_impl';\nexport { logImpl } from './kernels/Log';\nexport { maxImpl } from './kernels/Max_impl';\nexport { maximumImpl } from './kernels/Maximum';\nexport { minimumImpl } from './kernels/Minimum';\nexport { multiplyImpl } from './kernels/Multiply';\nexport { negImpl } from './kernels/Neg';\nexport { notEqualImpl } from './kernels/NotEqual';\nexport { prodImpl } from './kernels/Prod';\nexport { raggedGatherImpl } from './kernels/RaggedGather_impl';\nexport { raggedTensorToTensorImpl } from './kernels/RaggedTensorToTensor_impl';\nexport { rangeImpl } from './kernels/Range_impl';\nexport { rsqrtImpl } from './kernels/Rsqrt';\nexport { scatterImpl } from './kernels/Scatter_impl';\nexport { sigmoidImpl } from './kernels/Sigmoid';\nexport { sliceImpl } from './kernels/Slice';\nexport { sparseFillEmptyRowsImpl } from './kernels/SparseFillEmptyRows_impl';\nexport { sparseReshapeImpl } from './kernels/SparseReshape_impl';\nexport { sparseSegmentReductionImpl } from './kernels/SparseSegmentReduction_impl';\nexport { sqrtImpl } from './kernels/Sqrt';\nexport { squaredDifferenceImpl } from './kernels/SquaredDifference';\nexport { stridedSliceImpl } from './kernels/StridedSlice_impl';\nexport { stringNGramsImpl } from './kernels/StringNGrams_impl';\nexport { stringSplitImpl } from './kernels/StringSplit_impl';\nexport { stringToHashBucketFastImpl } from './kernels/StringToHashBucketFast_impl';\nexport { subImpl } from './kernels/Sub';\nexport { tileImpl } from './kernels/Tile_impl';\nexport { topKImpl } from './kernels/TopK_impl';\nexport { transposeImpl } from './kernels/Transpose_impl';\nexport { uniqueImpl } from './kernels/Unique_impl';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, castImpl: castImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, equalImpl: equalImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherNdImpl: gatherNdImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, greaterEqualImpl: greaterEqualImplCPU, lessImpl: lessImplCPU, lessEqualImpl: lessEqualImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, notEqualImpl: notEqualImplCPU, prodImpl: prodImplCPU, raggedGatherImpl: raggedGatherImplCPU, raggedTensorToTensorImpl: raggedTensorToTensorImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, scatterImpl: scatterImplCPU, sigmoidImpl: sigmoidImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU, sparseReshapeImpl: sparseReshapeImplCPU, sparseSegmentReductionImpl: sparseSegmentReductionImplCPU, sqrtImpl: sqrtImplCPU, stridedSliceImpl: stridedSliceImplCPU, stringNGramsImpl: stringNGramsImplCPU, stringSplitImpl: stringSplitImplCPU, stringToHashBucketFastImpl: stringToHashBucketFastImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU, } = shared;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, castImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, raggedGatherImplCPU, raggedTensorToTensorImplCPU, scatterImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU, };\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport function getVecChannels(name, rank) {\n    return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\nexport function getChannels(name, rank) {\n    if (rank === 1) {\n        return [name];\n    }\n    return getVecChannels(name, rank);\n}\nexport function getSourceCoords(rank, dims) {\n    if (rank === 1) {\n        return 'rc';\n    }\n    let coords = '';\n    for (let i = 0; i < rank; i++) {\n        coords += dims[i];\n        if (i < rank - 1) {\n            coords += ',';\n        }\n    }\n    return coords;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        // Only input / output 3D tensors.\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        if (this.rank === 0) {\n            this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n        }\n        else {\n            const channels = getChannels('rc', this.rank);\n            const dtype = getCoordsDataType(this.rank);\n            const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n            const setup = this.getSetup(channels);\n            const output = this.getOutput(channels);\n            this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n        }\n    }\n    getSourceCoordsArr(dims) {\n        const coords = [];\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n                for (let d = 2; d < this.rank; d++) {\n                    coord = `${dims[dims.length - 1 - d]},` + coord;\n                }\n                coords.push(coord);\n            }\n        }\n        return coords;\n    }\n    getOutOfBoundsCondition(dims) {\n        if (this.rank === 1) {\n            return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n        }\n        let cond = '';\n        for (let i = this.rank - 2; i < this.rank; i++) {\n            cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n            if (i < this.rank - 1) {\n                cond += '||';\n            }\n        }\n        return cond;\n    }\n    getSetup(dims) {\n        if (this.rank === 1) {\n            return '';\n        }\n        const innerDims = dims.slice(-2);\n        const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n            this.outputShape[this.rank - 1];\n        const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n            this.outputShape[this.rank - 2];\n        return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n    }\n    getOutput(dims) {\n        const sourceCoords = this.getSourceCoordsArr(dims);\n        if (this.rank === 1) {\n            const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n            return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n        }\n        return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n    constructor(outputShape, inputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [{ name: 'inputShape', type: 'ivec3' }];\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        let mainLoop = ``;\n        for (let i = 0; i < 4; i++) {\n            let thisRC = `thisRC = rc;`;\n            if (i % 2 === 1) {\n                thisRC += `thisRC.z += 1;`;\n            }\n            if (i > 1) {\n                thisRC += `thisRC.y += 1;`;\n            }\n            mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n        }\n        this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n            shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n    const coordsFromIndexSnippet = enableShapeUniforms ?\n        shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') :\n        shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n    return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture } from './gpgpu_util';\nimport { getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureUsage } from './tex_util';\nexport class TextureManager {\n    constructor(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0; // How many bytes that have been allocated\n        // are available for reuse.\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.usedTextures = {};\n    }\n    acquireTexture(shapeRC, usage, isPacked) {\n        const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n        const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextures)) {\n            this.usedTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this._numBytesFree -= texBytes;\n            this.log();\n            const newTexture = this.freeTextures[shapeKey].shift();\n            this.usedTextures[shapeKey].push(newTexture);\n            return newTexture;\n        }\n        let newTexture;\n        if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n            newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n            newTexture =\n                this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n            newTexture =\n                this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n            newTexture =\n                this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n        }\n        this.usedTextures[shapeKey].push(newTexture);\n        this.numUsedTextures++;\n        this._numBytesAllocated += texBytes;\n        this.log();\n        return newTexture;\n    }\n    releaseTexture(texture, shape, logicalTexType, isPacked) {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n        const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n        const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n        if (deleteTexThreshold !== -1 &&\n            this._numBytesAllocated > deleteTexThreshold) {\n            this.gpgpu.deleteMatrixTexture(texture.texture);\n            this._numBytesAllocated -= texBytes;\n        }\n        else {\n            this.freeTextures[shapeKey].push(texture);\n            this.numFreeTextures++;\n            this._numBytesFree += texBytes;\n        }\n        this.numUsedTextures--;\n        const texList = this.usedTextures[shapeKey];\n        const texIndex = texList.indexOf(texture);\n        if (texIndex < 0) {\n            throw new Error('Cannot release a texture that was never provided by this ' +\n                'texture manager');\n        }\n        texList.splice(texIndex, 1);\n        this.log();\n    }\n    log() {\n        if (!this.logEnabled) {\n            return;\n        }\n        const total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);\n        const freeRatio = this._numBytesFree / this._numBytesAllocated;\n        console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n        console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);\n    }\n    get numBytesAllocated() {\n        return this._numBytesAllocated;\n    }\n    get numBytesFree() {\n        return this._numBytesFree;\n    }\n    getNumUsedTextures() {\n        return this.numUsedTextures;\n    }\n    getNumFreeTextures() {\n        return this.numFreeTextures;\n    }\n    dispose() {\n        if (this.freeTextures == null) {\n            // Already disposed.\n            return;\n        }\n        for (const texShape in this.freeTextures) {\n            this.freeTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex.texture);\n            });\n        }\n        for (const texShape in this.usedTextures) {\n            this.usedTextures[texShape].forEach(tex => {\n                this.gpgpu.deleteMatrixTexture(tex.texture);\n            });\n        }\n        this.freeTextures = null;\n        this.usedTextures = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this._numBytesAllocated = 0;\n        this._numBytesFree = 0;\n    }\n}\nfunction numBytesForInternalFormat(gl, internalFormat) {\n    // tslint:disable-next-line:no-any\n    const glany = gl;\n    if (internalFormat === glany.R32F) {\n        return 4;\n    }\n    else if (internalFormat === glany.R16F) {\n        return 2;\n    }\n    else if (internalFormat === glany.RGBA32F) {\n        return 16;\n    }\n    else if (internalFormat === gl.RGBA) {\n        return 16;\n    }\n    else if (internalFormat === glany.RGBA16F) {\n        return 8;\n    }\n    else if (internalFormat === glany.RGBA8) {\n        return 4;\n    }\n    throw new Error(`Unknown internal format ${internalFormat}`);\n}\nexport function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n    // It is not possible to infer packed status from the texture type because\n    // depending on the textureConfig, different  texture types may resolve to the\n    // same internal format (e.g. in WebGL1, the internal format for\n    // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n    // explicitly.\n    const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n    let numElements;\n    if (isPacked) {\n        const [packedWidth, packedHeight] = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = packedWidth * packedHeight;\n    }\n    else {\n        const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n        numElements = width * height;\n    }\n    const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n    return numElements * bytesPerElement;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n    switch (physicalTexType) {\n        case PhysicalTextureType.PACKED_2X2_FLOAT32:\n            return getInternalFormatForPackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_2X2_FLOAT16:\n            return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT32:\n            return getInternalFormatForFloat32MatrixTexture(textureConfig);\n        case PhysicalTextureType.UNPACKED_FLOAT16:\n            return getInternalFormatForFloat16MatrixTexture(textureConfig);\n        case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n            return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n        default:\n            throw new Error(`Unknown physical texture type ${physicalTexType}`);\n    }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n    if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n        if (isPacked) {\n            return PhysicalTextureType.PACKED_2X2_FLOAT32;\n        }\n        return PhysicalTextureType.UNPACKED_FLOAT32;\n    }\n    if (isPacked) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT16;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n    if (logicalTexType === TextureUsage.UPLOAD) {\n        return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n        return getPhysicalTextureForRendering(isPacked);\n    }\n    else if (logicalTexType === TextureUsage.DOWNLOAD ||\n        logicalTexType === TextureUsage.PIXELS) {\n        return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n    }\n    throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n    return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class UnaryOpProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nexport const LINEAR = `return x;`;\nexport const ABS = `return abs(x);`;\nexport function STEP(alpha = 0.0) {\n    return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nexport const CLONE = 'return x;';\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport const LINEAR = `return x;`;\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\nexport class UnaryOpPackedProgram {\n    constructor(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = aShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class UnpackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = false;\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const rank = outputShape.length;\n        const channels = getChannels('rc', rank);\n        const dtype = getCoordsDataType(rank);\n        const sourceCoords = getSourceCoords(rank, channels);\n        const innerDims = channels.slice(-2);\n        const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n        this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpuResource) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        // record the last manual GL Flush time.\n        this.lastGlFlushTime = 0;\n        this.warnedAboutMemory = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        let newGPGPU;\n        if (gpuResource != null) {\n            if (gpuResource instanceof GPGPUContext) {\n                newGPGPU = gpuResource;\n            }\n            else {\n                const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n                newGPGPU = new GPGPUContext(gl);\n            }\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n        }\n        else {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            newGPGPU = new GPGPUContext(gl);\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpuCreatedLocally = true;\n        }\n        this.gpgpu = newGPGPU;\n        this.canvas = this.gpgpu.gl.canvas;\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendWebGL.nextDataId++;\n    }\n    numDataIds() {\n        return this.texData.numDataIds() - this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = { id: this.nextDataId() };\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n        return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.texData.has(dataId)) {\n            const tensorData = this.texData.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (env().getBool('DEBUG')) {\n            // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n            // For performance reason, only check it for debugging. In production,\n            // it doesn't handle this use case anyway, so behavior is not changed.\n            if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n                env().getNumber('WEBGL_VERSION') === 2) {\n                throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                    `WEBGL_VERSION=2 not yet supported.`);\n            }\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        if (buffer != null) {\n            const gl = this.gpgpu.gl;\n            webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            if (this.disposeData(dataId)) {\n                engine().removeDataId(dataId, this);\n            }\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    /**\n     * Read tensor to a new texture that is densely packed for ease of use.\n     * @param dataId The source tensor.\n     * @param options\n     *     customTexShape: Optional. If set, will use the user defined texture\n     *     shape to create the texture.\n     */\n    readToGPU(dataId, options = {}) {\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, isPacked, texture } = texData;\n        if (dtype === 'complex64') {\n            throw new Error('Does not support reading texture for complex64 dtype.');\n        }\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const gpuResouorce = this.readToGPU(res, options);\n            this.disposeIntermediateTensorInfo(res);\n            return gpuResouorce;\n        }\n        if (texture == null) {\n            if (values != null) {\n                throw new Error('Data is not on GPU but on CPU.');\n            }\n            else {\n                throw new Error('There is no data on GPU or CPU.');\n            }\n        }\n        // Decode the texture so that it is stored densely (using four channels).\n        const tmpTarget = this.decode(dataId, options.customTexShape);\n        // Make engine track this tensor, so that we can dispose it later.\n        const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n        const tmpData = this.texData.get(tmpTarget.dataId);\n        return Object.assign({ tensorRef }, tmpData.texture);\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                const strings = data.map(d => util.decodeString(d));\n                return buffer(t.shape, t.dtype, strings);\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, data);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    timerAvailable() {\n        return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n    time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        return (async () => {\n            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n                0) {\n                const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n                res['kernelMs'] = util.sum(kernelMs);\n                res['getExtraProfileInfo'] = () => kernelMs\n                    .map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                    .map(d => `${d.name}: ${d.ms}`)\n                    .join(', ');\n            }\n            else {\n                res['kernelMs'] = {\n                    error: 'WebGL query timers are not supported in this environment.'\n                };\n            }\n            this.uploadWaitMs = 0;\n            this.downloadWaitMs = 0;\n            return res;\n        })();\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.pendingDisposal.has(dataId)) {\n            return false;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return true;\n        }\n        // if force flag is set, change refCount to 0, this would ensure disposal\n        // when added to the pendingDisposal queue. Memory may or may not be\n        // released, which also depends on dataRefCount, see `releaseGPU`.\n        if (force) {\n            this.texData.get(dataId).refCount = 0;\n        }\n        else {\n            this.texData.get(dataId).refCount--;\n        }\n        if (!force && this.texData.get(dataId).refCount > 0) {\n            return false;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return false;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.disposeData(complexTensorInfos.real.dataId, force);\n            this.disposeData(complexTensorInfos.imag.dataId, force);\n        }\n        this.texData.delete(dataId);\n        return true;\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture.texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        return env().getBool('WEBGL_CPU_FORWARD') &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        const outInfo = this.compileAndRun(program, [x], dtype);\n        return engine().makeTensorFromTensorInfo(outInfo);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        const outInfo = this.compileAndRun(program, [x]);\n        return engine().makeTensorFromTensorInfo(outInfo);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [input3DShape];\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId, customTexShape) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        if (customTexShape != null) {\n            const size = util.sizeFromShape(shape);\n            const texSize = customTexShape[0] * customTexShape[1] * 4;\n            util.assert(size <= texSize, () => 'customTexShape is too small. ' +\n                'Row * Column * 4 should be equal or larger than the ' +\n                'size of the tensor data.');\n        }\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [customTexShape != null ? customTexShape :\n                tex_util.getDenseTexShape(shapeAs3D)];\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = customTexShape != null ?\n                customTexShape :\n                tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            this.uploadToGPU(input.dataId);\n            if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        if (!env().get('ENGINE_COMPILE_ONLY')) {\n            gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n        }\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n        // Manually GL flush requested\n        if (glFlushThreshold > 0) {\n            const time = util.now();\n            if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n                this.gpgpu.gl.flush();\n                this.lastGlFlushTime = time;\n            }\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n        return outInfo;\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            // This texShape may not be the final texture shape. For packed or dense\n            // textures, the texShape will be changed when textures are created.\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n            // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n            // need to make sure the upload uses the same packed size\n            if (isPacked || !isByteArray) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n            }\n            if (isPacked) {\n                program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n            }\n            else {\n                program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n            }\n            // TexShape for float array needs to be the original shape, which byte\n            // array needs to be packed size. This allow the data upload shape to be\n            // matched with texture creation logic.\n            const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n            const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n            const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n            if (isByteArray) {\n                tempDenseInputTexData.usage = TextureUsage.PIXELS;\n            }\n            else {\n                tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n            }\n            tempDenseInputTexData.texShape = tempDenseInputTexShape;\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            const customValues = [[height, width]];\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            if (!env().get('ENGINE_COMPILE_ONLY')) {\n                texData.texture = outputTexData.texture;\n                // Once uploaded, don't store the values on cpu.\n                texData.values = null;\n                this.texData.delete(encodedOutputTarget.dataId);\n            }\n            else {\n                this.disposeData(encodedOutputTarget.dataId);\n            }\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n    checkCompileCompletion() {\n        for (const [, binary] of Object.entries(this.binaryCache)) {\n            this.checkCompletion_(binary);\n        }\n    }\n    async checkCompileCompletionAsync() {\n        const ps = [];\n        if (this.gpgpu.parallelCompilationExtension) {\n            for (const [, binary] of Object.entries(this.binaryCache)) {\n                ps.push(this.checkCompletionAsync_(binary));\n            }\n            return Promise.all(ps);\n        }\n        else {\n            for (const [, binary] of Object.entries(this.binaryCache)) {\n                const p = new Promise((resolve) => {\n                    try {\n                        this.checkCompletion_(binary);\n                        resolve(true);\n                    }\n                    catch (error) {\n                        throw error;\n                    }\n                });\n                ps.push(p);\n            }\n            return Promise.all(ps);\n        }\n    }\n    async checkCompletionAsync_(binary) {\n        if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n            return this.checkCompletion_(binary);\n        }\n        else {\n            await nextFrame();\n            return this.checkCompletionAsync_(binary);\n        }\n    }\n    checkCompletion_(binary) {\n        if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n            console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n            if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n                webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n                throw new Error('Failed to compile fragment shader.');\n            }\n            throw new Error('Failed to link vertex and fragment shaders.');\n        }\n        return true;\n    }\n    getUniformLocations() {\n        for (const [, binary] of Object.entries(this.binaryCache)) {\n            const { uniformLocations, customUniformLocations, infLoc, nanLoc, inShapesLocations, inTexShapesLocations, outShapeLocation, outShapeStridesLocation, outTexShapeLocation } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n            binary.uniformLocations = uniformLocations;\n            binary.customUniformLocations = customUniformLocations;\n            binary.infLoc = infLoc;\n            binary.nanLoc = nanLoc;\n            binary.inShapesLocations = inShapesLocations;\n            binary.inTexShapesLocations = inTexShapesLocations;\n            binary.outShapeLocation = outShapeLocation;\n            binary.outShapeStridesLocation = outShapeStridesLocation;\n            binary.outTexShapeLocation = outTexShapeLocation;\n        }\n    }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\nexport { MathBackendWebGL } from './backend_webgl';\nexport { setWebGLContext } from './canvas_util';\nexport { GPGPUContext } from './gpgpu_context';\n// WebGL specific utils.\nexport { gpgpu_util, webgl_util };\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat() {\n    env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// base.ts is the webgl backend without auto kernel registration.\nimport { device_util, registerBackend } from '@tensorflow/tfjs-core';\nimport { MathBackendWebGL } from './backend_webgl';\nexport { version as version_webgl } from './version';\nif (device_util.isBrowser()) {\n    registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n// Export webgl utilities\nexport * from './webgl';\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport { forceHalfFloat } from './webgl';\nexport const webgl = { forceHalfFloat };\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nexport class BinaryOpPackedProgram {\n    constructor(op, aShape, bShape, checkOutOfBounds = false) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const rank = this.outputShape.length;\n        this.enableShapeUniforms = useShapeUniforms(rank);\n        let checkOutOfBoundsString = '';\n        if (checkOutOfBounds) {\n            if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n                checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n            }\n            else {\n                const dtype = getCoordsDataType(rank);\n                checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n                if (rank === 1) {\n                    if (this.enableShapeUniforms) {\n                        checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                    }\n                    else {\n                        checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n                    }\n                }\n                else {\n                    const channels = getChannels('coords', rank);\n                    if (this.enableShapeUniforms) {\n                        checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                    }\n                    else {\n                        checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n                    }\n                }\n            }\n        }\n        this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nexport const identityConfig = {\n    kernelName: Identity,\n    backendName: 'webgl',\n    kernelFunc: identity\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.texData.get(complexInfo.dataId);\n    const realTensorInfo = identity({ inputs: { x: real }, backend });\n    const imagTensorInfo = identity({ inputs: { x: imag }, backend });\n    complex.complexTensorInfos = { real: realTensorInfo, imag: imagTensorInfo };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'webgl',\n    kernelFunc: complex\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function leakyRelu(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { alpha } = attrs;\n    const $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n        new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n    const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n    backend.disposeIntermediateTensorInfo($alpha);\n    return result;\n}\nexport const leakyReluConfig = {\n    kernelName: LeakyRelu,\n    backendName: 'webgl',\n    kernelFunc: leakyRelu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Prelu } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function prelu(args) {\n    const { inputs, backend } = args;\n    const { x, alpha } = inputs;\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n        new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n    return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\nexport const preluConfig = {\n    kernelName: Prelu,\n    backendName: 'webgl',\n    kernelFunc: prelu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const $dtype = dtype || x.dtype;\n        if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n            const xData = webglBackend.texData.get(x.dataId);\n            const outValues = cpuKernelImpl(xData.values, $dtype);\n            return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, opSnippet);\n        }\n        return webglBackend.runWebGLProgram(program, [x], $dtype);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        if (supportsComplex && a.dtype === 'complex64') {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [real, imag] = [\n                [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n                [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n            ].map(complexParts => {\n                const [aPart, bPart] = complexParts;\n                const aHandle = {\n                    dataId: aPart.dataId,\n                    dtype: aPart.dtype,\n                    shape: a.shape\n                };\n                const bHandle = {\n                    dataId: bPart.dataId,\n                    dtype: bPart.dtype,\n                    shape: b.shape\n                };\n                const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n                return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n            });\n            const complexOutput = complex({ inputs: { real, imag }, backend: webglBackend });\n            webglBackend.disposeIntermediateTensorInfo(real);\n            webglBackend.disposeIntermediateTensorInfo(imag);\n            // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n            return complexOutput;\n        }\n        const $dtype = dtype || upcastType(a.dtype, b.dtype);\n        if ((a.dtype === 'string' || b.dtype === 'string' ||\n            webglBackend.shouldExecuteOnCPU([a, b])) &&\n            cpuKernelImpl != null) {\n            const aVals = webglBackend.texData.get(a.dataId).values;\n            const bVals = webglBackend.texData.get(b.dataId).values;\n            const decodedAVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(aVals) :\n                aVals;\n            const decodedBVals = a.dtype === 'string' ?\n                // tslint:disable-next-line: no-any\n                backend_util.fromUint8ToStringArray(bVals) :\n                bVals;\n            const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n            const out = webglBackend.makeTensorInfo(outShape, $dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n            return out;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n            packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n        }\n        else {\n            program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        }\n        return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return PRELU_PACKED;\n        }\n        return PRELU;\n    }\n    else if (activation === 'leakyrelu') {\n        if (packed) {\n            return LEAKYRELU_PACKED;\n        }\n        return LEAKYRELU;\n    }\n    else if (activation === 'sigmoid') {\n        if (packed) {\n            return unary_packed_op.SIGMOID;\n        }\n        return unary_op.SIGMOID;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class MatMulPackedProgram {\n    constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {\n        this.variableNames = ['matrixA', 'matrixB'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const sharedDim = transposeA ? aShape[1] : aShape[2];\n        const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n        const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n        const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n        const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n        const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluActivation) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        let batchASnippet = 'rc.x';\n        let batchBSnippet = 'rc.x';\n        if (aShape[0] < bShape[0]) {\n            batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n        }\n        else if (bShape[0] < aShape[0]) {\n            batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n        }\n        this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n    REAL: 'return areal * breal - aimag * bimag;',\n    IMAG: 'return areal * bimag + aimag * breal;'\n};\nexport class BinaryOpComplexProgram {\n    constructor(op, aShape, bShape) {\n        this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n        this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n    const { inputs, backend } = args;\n    const { a, b } = inputs;\n    const dtype = backend_util.upcastType(a.dtype, b.dtype);\n    if (a.dtype === 'complex64') {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n        const inputs = [\n            {\n                dataId: aData.complexTensorInfos.real.dataId,\n                dtype: aData.complexTensorInfos.real.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: aData.complexTensorInfos.imag.dataId,\n                dtype: aData.complexTensorInfos.imag.dtype,\n                shape: a.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.real.dataId,\n                dtype: bData.complexTensorInfos.real.dtype,\n                shape: b.shape\n            },\n            {\n                dataId: bData.complexTensorInfos.imag.dataId,\n                dtype: bData.complexTensorInfos.imag.dtype,\n                shape: b.shape\n            }\n        ];\n        const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n        const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n        const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        // TODO(annxingyuan): CPU forwarding for complex inputs.\n        return complexOutput;\n    }\n    if (backend.shouldExecuteOnCPU([a, b])) {\n        const aData = backend.texData.get(a.dataId);\n        const bData = backend.texData.get(b.dataId);\n        const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n        const out = backend.makeTensorInfo(outShape, dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n        return out;\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n        program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n    }\n    else {\n        program = new BinaryOpProgram(MUL, a.shape, b.shape);\n    }\n    return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'webgl',\n    kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ReshapePackedProgram } from '../reshape_packed_gpu';\nimport { getBatchDim, getRowsCols } from '../webgl_util';\nexport function packedReshape(input, afterShape, backend) {\n    const input3DShape = [getBatchDim(input.shape),\n        ...getRowsCols(input.shape)];\n    const input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n    };\n    const afterShapeAs3D = [getBatchDim(afterShape),\n        ...getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = backend.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nimport { packedReshape } from '../kernel_utils/reshape';\nimport { isReshapeFree } from '../webgl_util';\nexport function reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    const webglBackend = backend;\n    const xSize = util.sizeFromShape(x.shape);\n    const $shape = util.inferFromImplicitShape(shape, xSize);\n    const $xSize = util.sizeFromShape($shape);\n    util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n        `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n        `shape must have the same number of elements.`);\n    const xTexData = webglBackend.texData.get(x.dataId);\n    if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n        !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n        return packedReshape(x, $shape, webglBackend);\n    }\n    webglBackend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nexport const reshapeConfig = {\n    kernelName: Reshape,\n    backendName: 'webgl',\n    kernelFunc: reshape\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class MeanProgram {\n    constructor(reduceInfo, divisor) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `sumValue += dot(values, ones);`;\n        if (divisor != null) {\n            const denominator = 1 / divisor;\n            updateSnippet = `sumValue += dot(values * ${util.isInt(denominator) ? denominator.toPrecision(2) :\n                denominator}, ones);`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n    constructor(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        const { windowSize, batchSize, inSize, outSize } = reduceInfo;\n        this.outputShape = [batchSize, outSize];\n        let initializationValue = '0.0';\n        let compareOp = ``;\n        if (reduceType === 'prod') {\n            initializationValue = '1.0';\n        }\n        else if (reduceType === 'min') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '1.0 / 1e-20';\n            compareOp = `min`;\n        }\n        else if (reduceType === 'max') {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n            compareOp = `max`;\n        }\n        let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = `sumValue`;\n        }\n        else if (reduceType === 'prod') {\n            returnValue = `prodValue`;\n        }\n        else if (reduceType === 'all') {\n            returnValue = `allValue`;\n        }\n        else if (reduceType === 'any') {\n            returnValue = `anyValue`;\n        }\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n        let vecType = `vec4`;\n        if (reduceType === 'all') {\n            initializationValue = '1.0';\n            updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        else if (reduceType === 'any') {\n            initializationValue = '0.0';\n            updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n            vecType = `bvec4`;\n        }\n        let checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n    const stages = [];\n    while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n        const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(outSize);\n        stages.push({\n            inSize: outSize,\n            windowSize,\n            outSize: Math.ceil(outSize / windowSize)\n        });\n    }\n    return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n    const reductionStages = getReductionStages(x.shape);\n    let result = x;\n    for (let i = 0; i < reductionStages.length; i++) {\n        const { inSize, windowSize, outSize } = reductionStages[i];\n        let program;\n        let previousResult;\n        if (reductionType === 'mean') {\n            program = i === 0 ?\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, inSize) :\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize });\n        }\n        else {\n            program = new ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);\n        }\n        previousResult = result;\n        result = backend.runWebGLProgram(program, [result], dtype);\n        if (previousResult.dataId !== x.dataId) {\n            backend.disposeIntermediateTensorInfo(previousResult);\n        }\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposeProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const switched = getSwitchedCoords(newDim);\n        this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n    }\n}\nfunction getSwitchedCoords(newDim) {\n    const rank = newDim.length;\n    if (rank > 6) {\n        throw Error(`Transpose for rank ${rank} is not yet supported`);\n    }\n    const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n    const switchedCoords = new Array(rank);\n    for (let i = 0; i < newDim.length; i++) {\n        switchedCoords[newDim[i]] = originalOrder[i];\n    }\n    return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n    constructor(aShape, newDim) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        if (this.rank > 6) {\n            throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n        }\n        const dtype = getCoordsDataType(this.rank);\n        const outputOrder = getVecChannels('rc', this.rank);\n        const switchedOrder = new Array(this.rank);\n        for (let i = 0; i < newDim.length; i++) {\n            switchedOrder[newDim[i]] = outputOrder[i];\n        }\n        const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n        const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n        const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n        this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { transposeImplCPU } from '../kernel_utils/shared';\nimport { TransposeProgram } from '../transpose_gpu';\nimport { TransposePackedProgram } from '../transpose_packed_gpu';\nexport function transposeImpl(x, perm, backend) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new TransposePackedProgram(x.shape, perm) :\n        new TransposeProgram(x.shape, perm);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport { transposeImplCPU };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transposeImpl } from './Transpose_impl';\nexport function sumImpl(x, axis, keepDims, backend) {\n    const reductionIndices = axis;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const sumInputIsTransposed = permutedAxes != null;\n    let sumInput = x;\n    if (sumInputIsTransposed) {\n        sumInput = transposeImpl(x, permutedAxes, backend);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [sumOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n    let outShape = sumOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n    }\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x: sumInput }, attrs: { shape: [batchSize, inSize] }, backend });\n    const outType = sumOutType(x.dtype);\n    const reduced = reduce(reshapedInput, outType, 'sum', backend);\n    const out = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (sumInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(sumInput);\n    }\n    return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sum } from '@tensorflow/tfjs-core';\nimport { sumImpl } from './Sum_impl';\nexport function sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    return sumImpl(x, axis, keepDims, backend);\n}\nexport const sumConfig = {\n    kernelName: Sum,\n    backendName: 'webgl',\n    kernelFunc: sum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    let out;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n        const xTexData = webglBackend.texData.get(x.dataId);\n        const values = xTexData.values;\n        const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n        out = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const outData = webglBackend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = transposeImpl(x, perm, webglBackend);\n    }\n    return out;\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'webgl',\n    kernelFunc: transpose\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { broadcast_util, upcastType, util } from '@tensorflow/tfjs-core';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport function batchMatMulImpl({ a, b, transposeA, transposeB, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ?\n        [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ?\n        [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const intermediates = [a3d, b3d];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation != null ?\n        mapActivationToShaderProgram(activation, true) :\n        null;\n    const containsFusedOps = hasBias || hasPreluActivationWeights ||\n        hasLeakyreluAlpha || fusedActivation != null;\n    let out;\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n        let aVec = a3d;\n        let bVec = b3d;\n        if (transposeA) {\n            aVec = transpose({ inputs: { x: a3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(aVec);\n        }\n        if (transposeB) {\n            bVec = transpose({ inputs: { x: b3d }, backend, attrs: { perm: [0, 2, 1] } });\n            intermediates.push(bVec);\n        }\n        const shouldReshapeA = outerShapeB !== 1;\n        const shouldReshapeB = outerShapeB === 1;\n        let aVec3d = aVec;\n        if (shouldReshapeA) {\n            aVec3d = reshape({\n                inputs: { x: aVec },\n                backend,\n                attrs: { shape: [batchDim, sharedDim, 1] }\n            });\n            intermediates.push(aVec3d);\n        }\n        const axis = outerShapeB === 1 ? 2 : 1;\n        let bVec3d = bVec;\n        if (shouldReshapeB) {\n            bVec3d = reshape({\n                inputs: { x: bVec },\n                backend,\n                attrs: { shape: [batchDim, 1, sharedDim] }\n            });\n            intermediates.push(bVec3d);\n        }\n        const product = multiply({ inputs: { a: aVec3d, b: bVec3d }, backend });\n        out = sum({ inputs: { x: product }, backend, attrs: { axis, keepDims: true } });\n        intermediates.push(product);\n    }\n    else {\n        const dtype = upcastType(a.dtype, b.dtype);\n        const program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = [a3d, b3d];\n        if (bias != null) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        out = backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: outShape } });\n    intermediates.push(out);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    return batchMatMulImpl({\n        a,\n        b,\n        transposeA,\n        transposeB,\n        backend,\n        bias,\n        preluActivationWeights,\n        leakyreluAlpha,\n        activation\n    });\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'webgl',\n    kernelFunc: _fusedMatMul,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    // TODO: handle cases when x is complex. Once the cpu implementation\n    // can handle complex values, refactor to use unaryKernelFunc.\n    if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n        const xData = backend.texData.get(x.dataId);\n        const outValues = simpleAbsImplCPU(xData.values);\n        return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new UnaryOpPackedProgram(x.shape, ABS);\n    }\n    else {\n        program = new UnaryOpProgram(x.shape, ABS);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'webgl',\n    kernelFunc: abs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\nexport const acos = unaryKernelFunc({ opSnippet: ACOS });\nexport const acosConfig = {\n    kernelName: Acos,\n    backendName: 'webgl',\n    kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\nexport const acosh = unaryKernelFunc({ opSnippet: ACOSH });\nexport const acoshConfig = {\n    kernelName: Acosh,\n    backendName: 'webgl',\n    kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { addImplCPU as cpuAdd } from '../kernel_utils/shared';\nconst ADD = 'return a + b;';\nexport const addKernelFunc = binaryKernelFunc({\n    opSnippet: ADD,\n    packedOpSnippet: ADD,\n    supportsComplex: true,\n    cpuKernelImpl: cpuAdd\n});\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'webgl',\n    kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNPackedProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    if (tensors.length === 1) {\n        return identity({ inputs: { x: tensors[0] }, backend });\n    }\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n        const midIndex = Math.floor(tensors.length / 2);\n        const leftSide = addN({ inputs: tensors.slice(0, midIndex), backend });\n        const rightSide = addN({ inputs: tensors.slice(midIndex), backend });\n        return addN({ inputs: [leftSide, rightSide], backend });\n    }\n    const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'webgl',\n    kernelFunc: addN\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { All, backend_util, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function all(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n    let res;\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nexport const allConfig = {\n    kernelName: All,\n    backendName: 'webgl',\n    kernelFunc: all\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function any(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n    let res;\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nexport const anyConfig = {\n    kernelName: Any,\n    backendName: 'webgl',\n    kernelFunc: any\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n    constructor(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        const { windowSize, batchSize, outSize } = reduceInfo;\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        const compOp = (op === 'max') ? '>' : '<';\n        const indexSnippet = firstPass ?\n            'inOffset + i;' :\n            'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n    const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n    }\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n        return output;\n    }\n    const result = argReduce(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    if (output.shape.length === x.shape.length) {\n        const result = argReducePacked(backend, x, reduceType, output);\n        backend.disposeIntermediateTensorInfo(output);\n        return result;\n    }\n    return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n        const intermediateTensorInfos = [];\n        // Eagerly unpack x input since it is passed in to all the shaders which\n        // require unpacked inputs.\n        const xtexData = backend.texData.get(x.dataId);\n        const xIsPacked = xtexData !== null && xtexData.isPacked;\n        let xUnPacked = x;\n        if (xIsPacked) {\n            xUnPacked = backend.unpackTensor(x);\n            intermediateTensorInfos.push(xUnPacked);\n        }\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x: xUnPacked }, backend, attrs: { shape: [-1, inSize] } });\n        intermediateTensorInfos.push(a2D);\n        const reduced = argReduce(backend, a2D, reduceType);\n        intermediateTensorInfos.push(reduced);\n        const reshaped = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return reshaped;\n    }\n    return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n    const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return out;\n}\nexport const argMaxConfig = {\n    kernelName: ArgMax,\n    backendName: 'webgl',\n    kernelFunc: argMax\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n    const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return out;\n}\nexport const argMinConfig = {\n    kernelName: ArgMin,\n    backendName: 'webgl',\n    kernelFunc: argMin\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\nexport const asin = unaryKernelFunc({ opSnippet: ASIN });\nexport const asinConfig = {\n    kernelName: Asin,\n    backendName: 'webgl',\n    kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\nexport const asinh = unaryKernelFunc({ opSnippet: ASINH });\nexport const asinhConfig = {\n    kernelName: Asinh,\n    backendName: 'webgl',\n    kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\nexport const atan = unaryKernelFunc({ opSnippet: ATAN });\nexport const atanConfig = {\n    kernelName: Atan,\n    backendName: 'webgl',\n    kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const atan2 = binaryKernelFunc({ opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED });\nexport const atan2Config = {\n    kernelName: Atan2,\n    backendName: 'webgl',\n    kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\nexport const atanh = unaryKernelFunc({ opSnippet: ATANH });\nexport const atanhConfig = {\n    kernelName: Atanh,\n    backendName: 'webgl',\n    kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Pool2DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                flattenPositionStr) :\n                `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\nexport class Pool3DProgram {\n    constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        const isAvgPool = poolType === 'avg';\n        let initializationValue = '0.0';\n        if (!isAvgPool) {\n            // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n            initializationValue = '-1.0 / 1e-20';\n        }\n        if (computePositions) {\n            const compareOp = '>=';\n            this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ?\n                (includeBatchInIndex ?\n                    `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` :\n                    `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n                `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n            return;\n        }\n        const compareOp = 'max';\n        let returnValue = `${poolType}(${poolType}(${poolType}(` +\n            'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = `avgValue / count`;\n        }\n        const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        const filterWidthVec4Remainder = filterWidth % 4;\n        const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n        this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function avgPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'avgPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        return identity({ inputs: { x }, backend });\n    }\n    const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n    return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nexport const avgPoolConfig = {\n    kernelName: AvgPool,\n    backendName: 'webgl',\n    kernelFunc: avgPool\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function avgPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n    return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nexport const avgPool3DConfig = {\n    kernelName: AvgPool3D,\n    backendName: 'webgl',\n    kernelFunc: avgPool3D\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class AvgPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool3DBackpropProgram } from '../avg_pool_backprop_gpu';\nexport function avgPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nexport const avgPool3DGradConfig = {\n    kernelName: AvgPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: avgPool3DGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool2DBackpropProgram } from '../avg_pool_backprop_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function avgPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    assertNotComplex([dy, input], 'avgPoolGrad');\n    const { filterSize, strides, pad } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nexport const avgPoolGradConfig = {\n    kernelName: AvgPoolGrad,\n    backendName: 'webgl',\n    kernelFunc: avgPoolGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function batchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b } = inputs;\n    const { transposeA, transposeB } = attrs;\n    return batchMatMulImpl({ a, b, transposeA, transposeB, backend });\n}\nexport const batchMatMulConfig = {\n    kernelName: BatchMatMul,\n    backendName: 'webgl',\n    kernelFunc: batchMatMul,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormPackedProgram {\n    constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.variableNames = ['x', 'mean', 'variance'];\n        backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n        backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        let offsetSnippet = 'vec4(0.0)';\n        if (offsetShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        let scaleSnippet = 'vec4(1.0)';\n        if (scaleShape != null) {\n            backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({ inputs, backend, attrs }) => {\n    const { x, mean, variance, offset, scale } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const finalInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n        offsetShape = offset.shape;\n        finalInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n        scaleShape = scale.shape;\n        finalInputs.push(scale);\n    }\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :\n        new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n    return output;\n};\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'webgl',\n    kernelFunc: batchNorm,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        const dtype = getCoordsDataType(this.rank);\n        this.customUniforms = [{ name: 'start', arrayIndex: this.rank, type: 'int' }];\n        const sourceCoords = getCoords(this.rank);\n        let body;\n        const coordSum = destSize.map((_, i) => {\n            return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n        });\n        body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n        this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n    }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    }\n    else if (rank <= 6) {\n        return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n    }\n    else {\n        throw Error(`Slicing for rank ${rank} is not yet supported`);\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class SlicePackedProgram {\n    constructor(destSize) {\n        this.variableNames = ['source'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        this.customUniforms = [{ name: 'start', arrayIndex: this.rank, type: 'int' }];\n        const dtype = getCoordsDataType(this.rank);\n        const coords = getChannels('coords', this.rank);\n        const sourceLoc = getChannels('sourceLoc', this.rank);\n        const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n        const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n        const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n        const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n        const sourceLocSetup = this.rank <= 4 ?\n            `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n            destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n                .join('\\n');\n        this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { sliceImplCPU } from '../kernel_utils/shared';\nimport { SliceProgram } from '../slice_gpu';\nimport { SlicePackedProgram } from '../slice_packed_gpu';\nfunction shallowSlice(x, begin, size, backend) {\n    const xTexData = backend.texData.get(x.dataId);\n    const t = backend.makeTensorInfo(size, x.dtype);\n    const newTexData = backend.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.refCount = 1;\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n    if (xTexData.slice) {\n        // We are slicing an already sliced tensor, so we have to accumulate\n        // the offset.\n        flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n        flatOffset,\n        // Point to the original dataId, which is used to do ref counting.\n        origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n    // Increase the ref count for that data bucket.\n    const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n    return t;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    if (util.sizeFromShape($size) === 0) {\n        return backend.makeTensorInfo($size, x.dtype, []);\n    }\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n        const xTexData = backend.texData.get(x.dataId);\n        const outValues = sliceImplCPU(xTexData.values, $begin, $size, x.shape, x.dtype);\n        return backend.makeTensorInfo($size, x.dtype, outValues);\n    }\n    const { isPacked } = backend.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n    if (isPacked || !isContinous) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new SlicePackedProgram($size) :\n            new SliceProgram($size);\n        const customValues = [$begin];\n        return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n    }\n    backend.uploadToGPU(x.dataId);\n    return shallowSlice(x, $begin, $size, backend);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'webgl',\n    kernelFunc: slice\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport const batchToSpaceND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const toDispose = [];\n    const reshapedIntermediate = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const transposedIntermediate = transpose({ inputs: { x: reshapedIntermediate }, backend, attrs: { perm: permuted } });\n    const reshapedIntermediate2 = reshape({\n        inputs: { x: transposedIntermediate },\n        backend,\n        attrs: { shape: reshapedPermuted }\n    });\n    const sliced = slice({\n        inputs: { x: reshapedIntermediate2 },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    toDispose.push(reshapedIntermediate);\n    toDispose.push(transposedIntermediate);\n    toDispose.push(reshapedIntermediate2);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return sliced;\n};\nexport const batchToSpaceNDConfig = {\n    kernelName: BatchToSpaceND,\n    backendName: 'webgl',\n    kernelFunc: batchToSpaceND\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU } from '../kernel_utils/shared';\nexport function bincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size } = attrs;\n    const xVals = backend.readSync(x.dataId);\n    const weightsVals = backend.readSync(weights.dataId);\n    const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\nexport const bincountConfig = {\n    kernelName: Bincount,\n    backendName: 'webgl',\n    kernelFunc: bincount\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BroadcastArgs } from '@tensorflow/tfjs-core';\nexport function broadcastArgs(args) {\n    const { inputs, backend } = args;\n    const { s0, s1 } = inputs;\n    const s0Vals = backend.readSync(s0.dataId);\n    const s1Vals = backend.readSync(s1.dataId);\n    const broadcastShape = backend_util.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));\n    return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\nexport const broadcastArgsConfig = {\n    kernelName: BroadcastArgs,\n    backendName: 'webgl',\n    kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { notEqualImplCPU } from '../kernel_utils/shared';\nconst NOT_EQUAL = `return float(a != b);`;\nexport const notEqual = binaryKernelFunc({ opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool' });\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'webgl',\n    kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputData = backend.texData.get(input.dataId);\n    return identity({ inputs: { x: inputData.complexTensorInfos.real }, backend });\n}\nexport const realConfig = {\n    kernelName: Real,\n    backendName: 'webgl',\n    kernelFunc: real\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnaryOpProgram } from '../unaryop_gpu';\nconst TO_INT = `return float(int(x));`;\nexport function int(input, backend) {\n    const program = new UnaryOpProgram(input.shape, TO_INT);\n    const output = backend.runWebGLProgram(program, [input], 'int32');\n    return { dataId: output.dataId, shape: output.shape, dtype: output.dtype };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { castImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        // TODO(annxingyuan): Import kernel function once zeros is modularized.\n        const zerosTensor = tf.zeros(x.shape);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensor }, backend });\n        zerosTensor.dispose();\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (backend.shouldExecuteOnCPU([x])) {\n        const values = backend.texData.get(x.dataId).values;\n        const [resultShape, resultType, resultData] = castImplCPU(values, x.shape, x.dtype, dtype);\n        return backend.makeTensorInfo(resultShape, resultType, resultData);\n    }\n    if (dtype === 'int32') {\n        return int(x, backend);\n    }\n    if (dtype === 'bool') {\n        const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n        const binaryInputs = { a: x, b: zerosTensorInfo };\n        const result = notEqual({ inputs: binaryInputs, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        return result;\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'webgl',\n    kernelFunc: cast\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { ceilImplCPU } from '../kernel_utils/shared';\nconst CEIL = `return ceil(x);`;\nexport const ceil = unaryKernelFunc({ opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU });\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'webgl',\n    kernelFunc: ceil\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.customUniforms = [\n            { name: 'minVal', type: 'float' },\n            { name: 'maxVal', type: 'float' }\n        ];\n        this.outputShape = aShape;\n        this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipPackedProgram {\n    constructor(aShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'minVal', type: 'float' },\n            { name: 'maxVal', type: 'float' }\n        ];\n        this.outputShape = aShape;\n        this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue, env } from '@tensorflow/tfjs-core';\nimport { ClipProgram } from '../clip_gpu';\nimport { ClipPackedProgram } from '../clip_packed_gpu';\nexport function clipByValue(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { clipValueMin, clipValueMax } = attrs;\n    let program;\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n        program = new ClipPackedProgram(x.shape);\n    }\n    else {\n        program = new ClipProgram(x.shape);\n    }\n    const customValues = [[clipValueMin], [clipValueMax]];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\nexport const clipByValueConfig = {\n    kernelName: ClipByValue,\n    backendName: 'webgl',\n    kernelFunc: clipByValue\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ComplexAbsProgram {\n    constructor(shape) {\n        this.variableNames = ['real', 'imag'];\n        this.outputShape = shape;\n        this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_gpu';\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n    return {\n        dataId: complexPart.dataId,\n        dtype: complexPart.dtype,\n        shape: complexTensor.shape\n    };\n}\nexport function complexAbs(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const xData = backend.texData.get(x.dataId);\n    const program = new ComplexAbsProgram(x.shape);\n    const programInputs = [\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n        makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n    ];\n    return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'webgl',\n    kernelFunc: complexAbs\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n    // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n    constructor(shapes) {\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][1];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][1];\n        }\n        const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            snippets.push(`else if (yC < ${offsets[i]}) ` +\n                `setOutput(getT${i}(yR, yC-${shift}));`);\n        }\n        const lastIndex = offsets.length;\n        const lastShift = offsets[offsets.length - 1];\n        snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n    constructor(shapes, axis) {\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        this.outputShape = backend_util.computeOutShape(shapes, axis);\n        const shape = this.outputShape;\n        const rank = shape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const offsets = new Array(shapes.length - 1);\n        offsets[0] = shapes[0][axis];\n        for (let i = 1; i < offsets.length; i++) {\n            offsets[i] = offsets[i - 1] + shapes[i][axis];\n        }\n        const channel = channels[axis];\n        const lastChannels = channels.slice(-2);\n        const allChannels = channels.join();\n        let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n        for (let i = 1; i < offsets.length; i++) {\n            const shift = offsets[i - 1];\n            // Note: the >= comparison below may seem unnecessary given the check\n            // above but is needed to workaround branch execution issues on some\n            // devices. It makes all the conditions exclusive without relying on\n            // execution order.\n            getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n        }\n        const lastIndex = offsets.length;\n        const shift = offsets[offsets.length - 1];\n        getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n        this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n    }\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels, channel, shift) {\n    const channelIdx = channels.indexOf(channel);\n    const res = channels.map((c, idx) => {\n        if (idx === channelIdx) {\n            return `${c} - ${shift}`;\n        }\n        else {\n            return c;\n        }\n    });\n    return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Imag } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function imag(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputData = backend.texData.get(input.dataId);\n    return identity({ inputs: { x: inputData.complexTensorInfos.imag }, backend });\n}\nexport const imagConfig = {\n    kernelName: Imag,\n    backendName: 'webgl',\n    kernelFunc: imag\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n    const dtype = inputs[0].dtype;\n    if (dtype === 'complex64') {\n        const reals = inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concatImpl(reals, axis, backend);\n        const imagConcated = concatImpl(imags, axis, backend);\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n    // Run on cpu if dtype is string. For string, the backend represents it\n    // as Uint8Array[], where each Uint8Array is a character. Given that the\n    // computation is only on the outer array, uploading the whole data onto\n    // gpu is wasteful. Also, currently webgl doesn't have a design to\n    // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n    // just run the kernel on cpu if dtype is string.\n    if (dtype === 'string') {\n        runOnCpu = true;\n    }\n    if (runOnCpu) {\n        // Any concat of n-dimensional tensors across any axis can be reduced to\n        // a concatenation of two-dimensional tensors across the axis 1 by first\n        // partitioning the axes of the original tensors into those less than the\n        // axis to be concatenated and the rest. Then reshape the tensors\n        // into a two-dimensional tensor by collapsing these two sets of axes and\n        // concatenate the resulting matrices across the axis 1, finally reshaping\n        // the result to have the proper shape.\n        const tensors2D = inputs.map(t => {\n            const innerSize = util.sizeFromShape(t.shape.slice(axis));\n            const shape = [-1, innerSize];\n            return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n        });\n        const inputsValShapes = tensors2D.map(t => {\n            return { vals: backend.readSync(t.dataId), shape: t.shape };\n        });\n        // Concats 2d tensors along axis=1.\n        const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n        const simplyConcat = tensors2D[0].shape[0] === 1;\n        const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n        const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n        const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n        tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return outInfo;\n    }\n    const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n    if (inputs.length > maxTexturesInShader) {\n        const reducedInputs = [];\n        for (let i = 0; i < inputs.length; i += maxTexturesInShader) {\n            const subArray = inputs.slice(i, i + maxTexturesInShader);\n            reducedInputs.push(concatImpl(subArray, axis, backend));\n        }\n        const result = concatImpl(reducedInputs, axis, backend);\n        for (const i of reducedInputs) {\n            backend.disposeIntermediateTensorInfo(i);\n        }\n        return result;\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n        inputs[0].shape.length > 1) {\n        const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n        return backend.runWebGLProgram(program, inputs, dtype);\n    }\n    const { tensors2D, outShape } = computeTensors2D(inputs, axis, backend);\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const result = backend.runWebGLProgram(program, tensors2D, dtype);\n    tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    const reshapedResult = reshape({ inputs: { x: result }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const tensors2D = inputs.map(x => reshape({\n        inputs: { x },\n        attrs: { shape: [-1, util.sizeFromShape(x.shape.slice(axis))] },\n        backend\n    }));\n    return { tensors2D, outShape };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    const shapes = inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'webgl',\n    kernelFunc: concat\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivationWeights) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyreluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivationWeights) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyreluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\nexport class Conv3DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        const inputDepthVec4Remainder = convInfo.inChannels % 4;\n        this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Conv2DPackedProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'pads', type: 'ivec2' },\n            { name: 'strides', type: 'ivec2' },\n            { name: 'dilations', type: 'ivec2' },\n            { name: 'inDims', type: 'ivec2' },\n        ];\n        this.outputShape = convInfo.outShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const padLeft = convInfo.padInfo.left;\n        const strideWidth = convInfo.strideWidth;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n        }\n        mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n        for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n            const colIndex = texelC * 2;\n            mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n            if (strideWidth === 1) {\n                if (colIndex < filterWidth) {\n                    // If padding is odd, the outer texels have to be composed.\n                    if (padLeft % 2 === 1) {\n                        // TODO: Ensure vec4 previous does not result in redundant sample,\n                        // and avoid setting xTexelRC's that exceed the boundary in the\n                        // first place rather than resetting them to vec4(0)).\n                        // To compute xCOffset:\n                        // - If padding is odd, we must add 1 to ensure we ask for an\n                        // even-numbered row.\n                        // - We subtract 2 to access the previous texel.\n                        mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n                        // This texel has been read in previous iteration if the dilation\n                        // is 1.\n                        if (dilationWidth === 1 && colIndex > 0) {\n                            mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                 `;\n                        }\n                        else {\n                            mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n                        }\n                    }\n                    else {\n                        // Padding is even, so xRC corresponds to a single texel.\n                        mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n                    }\n                    if (colIndex + 1 < filterWidth) {\n                        // If dilation is even, the second entry should match the first\n                        // (either both are composed or both are single samples). But if\n                        // dilation is odd, then the second entry should be the opposite\n                        // of the first (if the first is composed, the second is a single\n                        // sample, and vice versa.)\n                        const nextTexelOffset = padLeft % 2 === 0 ?\n                            util.nearestLargerEven(dilationWidth) :\n                            dilationWidth;\n                        if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                            (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                            mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n                            // If dilation > 1 then the xRC's will not be able to share any\n                            // values, so each xRC will require two unique calls to getX.\n                            if (dilationWidth > 1) {\n                                mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);\n                     }\n                     `;\n                            }\n                            else {\n                                mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                     `;\n                            }\n                        }\n                        else {\n                            // If dilation is 1 and padding is odd, we have already read the\n                            // texel when constructing the previous x value. Here we can\n                            // simply skip the texture read.\n                            if (nextTexelOffset === 1) {\n                                mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n                            }\n                            else {\n                                mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n                            }\n                        }\n                    }\n                }\n            }\n            else { // stride === 2\n                if (colIndex < filterWidth) {\n                    // Depending on whether padLeft is even or odd, we want either the\n                    // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n                    // even, xC${colIndex +1} is simply the zw channels of texels we've\n                    // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n                    // need to come from the xy channels of a new texel, hence the `\n                    // vec4\n                    // final` initialized below.\n                    if (padLeft % 2 === 1) {\n                        mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n               `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n                        }\n                    }\n                    else {\n                        mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                 `;\n                        }\n                    }\n                }\n            }\n            // localize the dotProd accumulation within the loop, the theory is for\n            // GPU with limited cache, accumulate sum across large amount of\n            // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n            // 50 variables)\n            if (colIndex < filterWidth) {\n                mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n                if (colIndex + 1 < filterWidth) {\n                    mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n                }\n            }\n        }\n        mainLoop += `\n     }\n   `;\n        mainLoop += `\n     }\n   `;\n        mainLoop += `\n     }\n   `;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Im2ColPackedProgram {\n    constructor(outputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'inputShape', type: 'ivec4' },\n            { name: 'pad', type: 'ivec2' },\n            { name: 'stride', type: 'ivec2' },\n            { name: 'dilation', type: 'ivec2' },\n            { name: 'inChannels', type: 'int' },\n            { name: 'itemsPerBlockRow', type: 'int' },\n            { name: 'outWidth', type: 'int' },\n        ];\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const { dataFormat } = convInfo;\n        const glsl = getGlslDifferences();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const boundsCheckingSnippet = this.enableShapeUniforms ?\n            'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n            `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Im2ColPackedProgram } from '../im2col_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\nimport { batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD } from './BatchMatMul_impl';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(shape, isChannelsLast) {\n    const length = shape.length;\n    if (length >= 3) {\n        return isChannelsLast ?\n            [\n                ...shape.slice(0, -3) /* batch */,\n                shape[length - 3] * shape[length - 2] /* height * width */,\n                shape[length - 1] /* channel */\n            ] :\n            [\n                ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n                shape[length - 2] * shape[length - 1] /* height * width */\n            ];\n    }\n    else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n        return [shape[0], 1];\n    }\n    else {\n        return null;\n    }\n}\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = backend.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n    let out;\n    const intermediates = [];\n    if (preluActivationWeights != null) {\n        const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n        if (targetShape != null) {\n            preluActivationWeights = reshape({\n                inputs: { x: preluActivationWeights },\n                backend,\n                attrs: { shape: targetShape }\n            });\n            intermediates.push(preluActivationWeights);\n        }\n    }\n    if (bias != null) {\n        const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n        if (targetShape != null) {\n            bias = reshape({ inputs: { x: bias }, backend, attrs: { shape: targetShape } });\n            intermediates.push(bias);\n        }\n    }\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    // The algorithm in the if condition assumes (1) the output will be packed,\n    // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n    // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n    // for xTexData.shape and xShape.\n    const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n        isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n        util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n    if (canOptimize) {\n        // We avoid expensive packed 2x2 reshape by padding col count to next,\n        // even number. When col is odd, the result of packed batchMatMul is\n        // the same (has the same texture layout and and values in the texture) as\n        // it is for next even col. We make the odd-cols tensor to look like\n        // even-cols tensor before the operation and, after the batchMatMul,\n        // fix the even-cols result to have odd number of cols.\n        const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n        const xReshaped = {\n            dataId: x.dataId,\n            shape: [1, targetShape, convInfo.inChannels],\n            dtype: x.dtype\n        };\n        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n        // Decrementing col count, after batchMatMul->...->compileProgram leads to\n        // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n        // in compileProgram method, but that would affect compilation of all\n        // programs - instead, provide a copy here, with even col count, before\n        // calling batchMatMul->...->compileProgram and after that, the original\n        // xTexData.shape is restored.\n        const originalXTexDataShape = xTexData.shape;\n        xTexData.shape = xTexData.shape.slice();\n        xTexData.shape[xTexData.shape.length - 2]++;\n        util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n        const filterReshaped = reshape({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        intermediates.push(filterReshaped);\n        const pointwiseConv = batchMatMulImpl({\n            a: xReshaped,\n            b: filterReshaped,\n            backend,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n        util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n        // Restore the input shape to original.\n        xTexData.shape = originalXTexDataShape;\n        // Set the output shape - there is no need for expensive reshape as data\n        // layout is already correct.\n        pointwiseConvTexData.shape = convInfo.outShape;\n        out = identity({ inputs: { x: pointwiseConv }, backend });\n        out.shape = convInfo.outShape;\n        intermediates.push(pointwiseConv);\n    }\n    else {\n        const numCols = convInfo.outHeight * convInfo.outWidth;\n        const xReshaped = reshape({\n            inputs: { x },\n            backend,\n            attrs: {\n                shape: isChannelsLast ?\n                    [convInfo.batchSize, numCols, convInfo.inChannels] :\n                    [convInfo.batchSize, convInfo.inChannels, numCols]\n            }\n        });\n        const filterReshaped = reshape({\n            inputs: { x: filter },\n            backend,\n            attrs: { shape: [1, convInfo.inChannels, convInfo.outChannels] }\n        });\n        const result = batchMatMulImpl({\n            a: isChannelsLast ? xReshaped : filterReshaped,\n            b: isChannelsLast ? filterReshaped : xReshaped,\n            transposeA: !isChannelsLast,\n            transposeB,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n        out = reshape({ inputs: { x: result }, backend, attrs: { shape: convInfo.outShape } });\n        intermediates.push(xReshaped);\n        intermediates.push(filterReshaped);\n        intermediates.push(result);\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({ x, filter, convInfo, backend, bias = null, preluActivationWeights = null, leakyreluAlpha = 0, activation = null }) {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n    const intermediates = [];\n    if (preluActivationWeights != null) {\n        const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n        if (targetShape != null) {\n            preluActivationWeights = reshape({\n                inputs: { x: preluActivationWeights },\n                backend,\n                attrs: { shape: targetShape }\n            });\n            intermediates.push(preluActivationWeights);\n        }\n    }\n    if (bias != null) {\n        const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n        if (targetShape != null) {\n            bias = reshape({ inputs: { x: bias }, backend, attrs: { shape: targetShape } });\n            intermediates.push(bias);\n        }\n    }\n    const w2Row = reshape({\n        inputs: { x: filter },\n        backend,\n        attrs: { shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim] }\n    });\n    intermediates.push(w2Row);\n    const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n    const customValues = [\n        x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n        [convInfo.strideHeight, convInfo.strideWidth],\n        [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n        [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n    ];\n    const im2Col = backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n    const im2ColReshaped = reshape({ inputs: { x: im2Col }, backend, attrs: { shape: x2ColShape } });\n    intermediates.push(im2Col);\n    intermediates.push(im2ColReshaped);\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(isChannelsLast ? im2ColReshaped.shape :\n        w2Row.shape, isChannelsLast ? w2Row.shape :\n        im2ColReshaped.shape, isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n        [convInfo.batchSize, convInfo.outChannels, numCols], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n    if (bias) {\n        inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n        inputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n    const out = reshape({ inputs: { x: product }, backend, attrs: { shape: convInfo.outShape } });\n    intermediates.push(product);\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({ x, filter, convInfo, backend });\n    }\n    else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n        && env().getBool('WEBGL_EXP_CONV')) {\n        const program = new Conv2DPackedProgram(convInfo);\n        const customValues = [\n            [convInfo.padInfo.top, convInfo.padInfo.left],\n            [convInfo.strideHeight, convInfo.strideWidth],\n            [convInfo.dilationHeight, convInfo.dilationWidth],\n            [convInfo.inHeight, convInfo.inWidth]\n        ];\n        out =\n            backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL')) {\n        out = conv2dWithIm2Row({ x, filter, convInfo, backend });\n    }\n    else {\n        const program = new Conv2DProgram(convInfo);\n        out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'webgl',\n    kernelFunc: conv2d,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = convInfo.padInfo.front;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class Conv3DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padFront = filterDepth - 1 - convInfo.padInfo.front;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter } from '@tensorflow/tfjs-core';\nimport { Conv2DDerFilterProgram } from '../conv_backprop_gpu';\nexport function conv2DBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const conv2DBackpropFilterConfig = {\n    kernelName: Conv2DBackpropFilter,\n    backendName: 'webgl',\n    kernelFunc: conv2DBackpropFilter,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput } from '@tensorflow/tfjs-core';\nimport { Conv2DDerInputProgram } from '../conv_backprop_gpu';\nexport function conv2DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n    const program = new Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const conv2DBackpropInputConfig = {\n    kernelName: Conv2DBackpropInput,\n    backendName: 'webgl',\n    kernelFunc: conv2DBackpropInput,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D } from '@tensorflow/tfjs-core';\nimport { Conv3DProgram } from '../conv_gpu';\nexport function conv3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n    const program = new Conv3DProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport const conv3DConfig = {\n    kernelName: Conv3D,\n    backendName: 'webgl',\n    kernelFunc: conv3D,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerFilterProgram } from '../conv_backprop_gpu';\nexport function conv3DBackpropFilterV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, filterShape } = attrs;\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const conv3DBackpropFilterV2Config = {\n    kernelName: Conv3DBackpropFilterV2,\n    backendName: 'webgl',\n    kernelFunc: conv3DBackpropFilterV2\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerInputProgram } from '../conv_backprop_gpu';\nexport function conv3DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { pad, strides, inputShape } = attrs;\n    const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n    const program = new Conv3DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const conv3DBackpropInputConfig = {\n    kernelName: Conv3DBackpropInputV2,\n    backendName: 'webgl',\n    kernelFunc: conv3DBackpropInput,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\nexport const cos = unaryKernelFunc({ opSnippet: COS });\nexport const cosConfig = {\n    kernelName: Cos,\n    backendName: 'webgl',\n    kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nexport const cosh = unaryKernelFunc({ opSnippet: COSH });\nexport const coshConfig = {\n    kernelName: Cosh,\n    backendName: 'webgl',\n    kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class CropAndResizeProgram {\n    constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {\n        this.variableNames = ['Image', 'Boxes', 'BoxInd'];\n        this.outputShape = [];\n        const [batch, imageHeight, imageWidth, depth] = imageShape;\n        const [numBoxes,] = boxShape;\n        const [cropHeight, cropWidth] = cropSize;\n        this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n        const methodId = method === 'bilinear' ? 1 : 0;\n        const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n        const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n            [\n                `${(imageHeight - 1) / (cropHeight - 1)}`,\n                '(y2-y1) * height_ratio',\n                `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (y1+y2) * ${inputHeightFloat}`,\n            ];\n        const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n            [\n                `${(imageWidth - 1) / (cropWidth - 1)}`,\n                '(x2-x1) * width_ratio',\n                `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n            ] :\n            [\n                '0.0',\n                '0.0',\n                `0.5 * (x1+x2) * ${inputWidthFloat}`,\n            ];\n        // Reference implementation\n        // tslint:disable-next-line:max-line-length\n        // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n        this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { CropAndResizeProgram } from '../crop_and_resize_gpu';\nexport const cropAndResize = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { image, boxes, boxInd } = inputs;\n    const { cropSize, method, extrapolationValue } = attrs;\n    const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'webgl',\n    kernelFunc: cropAndResize\n};\n","import { getCoordsDataType } from './shader_compiler';\nexport var CumOpType;\n(function (CumOpType) {\n    CumOpType[\"Prod\"] = \"*\";\n    CumOpType[\"Sum\"] = \"+\";\n})(CumOpType || (CumOpType = {}));\nexport class CumProgram {\n    constructor(op, outputShape, exclusive, reverse) {\n        this.op = op;\n        this.outputShape = outputShape;\n        this.variableNames = ['x'];\n        this.customUniforms = [{ name: 'index', type: 'float' }];\n        const rank = this.outputShape.length;\n        const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n        const val = exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n        const length = this.outputShape[this.outputShape.length - 1];\n        let condition = '';\n        let idxString = '';\n        // When exclusive is set, the cum op becomes roll op that copies the\n        // value from the previous index based on the direction specified by the\n        // reverse flag.\n        if (exclusive) {\n            condition = reverse ? `end != ${length - 1}` : 'end != 0';\n            idxString = reverse ? 'end + 1' : 'end - 1';\n        }\n        else {\n            condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n            idxString = (reverse ? 'end + pow2' : 'end - pow2');\n        }\n        this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n    }\n}\nfunction getCoords(rank, name, op) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.x, ${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.x, ${name}.y, ${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n    }\n    else {\n        throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n    }\n}\nfunction getFinalCoord(rank, name, op) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.w`;\n    }\n    else {\n        throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n    }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { CumProgram } from '../cum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumImpl(op, x, backend, axis, exclusive, reverse) {\n    const xRank = x.shape.length;\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n    if (permutedAxis !== xRank - 1) {\n        throw new Error(`WebGL cumprod shader expects an inner-most axis=${x.shape.length - 1} ` +\n            `but got axis=${axis}`);\n    }\n    const size = permutedX.shape[permutedAxis];\n    let result = identity({ inputs: { x: permutedX }, backend });\n    // Use cum parallel algorithm, inspired by:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n    // Note: although the algorithm is called sum, it works for any associtative\n    // operator with an identity.\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n        const program = new CumProgram(op, permutedX.shape, false, reverse);\n        const customValues = [[i]];\n        const prevResult = result;\n        result =\n            backend.runWebGLProgram(program, [result], result.dtype, customValues);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    // For exclusive cum, shift the end result in the direction of product or sum\n    // and add 1 for product or 0 for sum to the front index.\n    if (exclusive) {\n        const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n        const prevResult = result;\n        result = backend.runWebGLProgram(program, [result], result.dtype);\n        backend.disposeIntermediateTensorInfo(prevResult);\n    }\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo(permutedX);\n        return reverseTransposedResult;\n    }\n    return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cumprod } from '@tensorflow/tfjs-core';\nimport { CumOpType } from '../cum_gpu';\nimport { cumImpl } from './Cum_impl';\nexport function cumprod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\nexport const cumprodConfig = {\n    kernelName: Cumprod,\n    backendName: 'webgl',\n    kernelFunc: cumprod\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cumsum } from '@tensorflow/tfjs-core';\nimport { CumOpType } from '../cum_gpu';\nimport { cumImpl } from './Cum_impl';\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'webgl',\n    kernelFunc: cumsum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU, bincountReduceImplCPU } from '../kernel_utils/shared';\nexport function denseBincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size, binaryOutput } = attrs;\n    if (x.shape.length === 1) {\n        const xVals = backend.readSync(x.dataId);\n        const weightsVals = backend.readSync(weights.dataId);\n        const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n        return backend.makeTensorInfo([size], weights.dtype, outVals);\n    }\n    else if (x.shape.length === 2) {\n        const xBuf = backend.bufferSync(x);\n        const weightsBuf = backend.bufferSync(weights);\n        const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n    }\n    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +\n        `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n    kernelName: DenseBincount,\n    backendName: 'webgl',\n    kernelFunc: denseBincount\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthToSpaceProgram {\n    constructor(outputShape, blockSize, dataFormat) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.blockSize = blockSize;\n        this.dataFormat = dataFormat;\n        this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n    }\n    getHeightCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[1]`;\n        }\n        else {\n            return `coords[2]`;\n        }\n    }\n    getWidthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[2]`;\n        }\n        else {\n            return `coords[3]`;\n        }\n    }\n    getDepthCoordString() {\n        if (this.dataFormat === 'NHWC') {\n            return `coords[3]`;\n        }\n        else {\n            return `coords[1]`;\n        }\n    }\n    getOutputDepthSize() {\n        if (this.dataFormat === 'NHWC') {\n            return this.outputShape[3];\n        }\n        else {\n            return this.outputShape[1];\n        }\n    }\n    getInputSamplingString() {\n        if (this.dataFormat === 'NHWC') {\n            return `getX(b, in_h, in_w, in_d)`;\n        }\n        else {\n            return `getX(b, in_d, in_h, in_w)`;\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace } from '@tensorflow/tfjs-core';\nimport { DepthToSpaceProgram } from '../depth_to_space_gpu';\nexport function depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'webgl',\n    kernelFunc: depthToSpace\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConv2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.customUniforms = [\n            { name: 'pads', type: 'ivec2' },\n            { name: 'strides', type: 'ivec2' },\n            { name: 'dilations', type: 'ivec2' },\n            { name: 'inDims', type: 'ivec2' },\n        ];\n        this.outputShape = convInfo.outShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConvPacked2DProgram {\n    constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n        this.variableNames = ['x', 'W'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'pads', type: 'ivec2' },\n            { name: 'strides', type: 'ivec2' },\n            { name: 'dilations', type: 'ivec2' },\n            { name: 'inDims', type: 'ivec2' },\n        ];\n        this.outputShape = convInfo.outShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        const padLeft = convInfo.padInfo.left;\n        const strideWidth = convInfo.strideWidth;\n        const dilationWidth = convInfo.dilationWidth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const texelsAcross = filterWidth;\n        let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n        }\n        /**\n         * This vectorized implementation works by gathering the values needed for\n         * each output channel's dot product into vec4's and then multiplying them\n         * all together (this happens in the final double for-loop below). Most of\n         * the main loop consists of constructing these vec4's with the minimum\n         * number of texture2D calls, which means making use of all four returned\n         * values from a texture2D call at once.\n         */\n        mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n        for (let c = 0; c < filterWidth; c++) {\n            mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n        }\n        mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n        for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n            const colIndex = texelC * 2;\n            mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n            if (strideWidth === 1) {\n                if (colIndex < filterWidth) {\n                    // If padding is odd, the outer texels have to be composed.\n                    if (padLeft % 2 === 1) {\n                        // TODO: Ensure vec4 previous does not result in redundant sample,\n                        // and avoid setting xTexelRC's that exceed the boundary in the\n                        // first place rather than resetting them to vec4(0)).\n                        // To compute xCOffset:\n                        // - If padding is odd, we must add 1 to ensure we ask for an\n                        // even-numbered row.\n                        // - We subtract 2 to access the previous texel.\n                        mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n                        // This texel has been read in previous iteration if the dilation\n                        // is 1.\n                        if (dilationWidth === 1 && colIndex > 0) {\n                            mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                `;\n                        }\n                        else {\n                            mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n                        }\n                    }\n                    else {\n                        // Padding is even, so xRC corresponds to a single texel.\n                        mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n                    }\n                    if (colIndex + 1 < filterWidth) {\n                        // If dilation is even, the second entry should match the first\n                        // (either both are composed or both are single samples). But if\n                        // dilation is odd, then the second entry should be the opposite\n                        // of the first (if the first is composed, the second is a single\n                        // sample, and vice versa.)\n                        const nextTexelOffset = padLeft % 2 === 0 ?\n                            util.nearestLargerEven(dilationWidth) :\n                            dilationWidth;\n                        if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                            (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                            mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n                            // If dilation > 1 then the xRC's will not be able to share any\n                            // values, so each xRC will require two unique calls to getX.\n                            if (dilationWidth > 1) {\n                                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);\n                    }\n                    `;\n                            }\n                            else {\n                                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                    `;\n                            }\n                        }\n                        else {\n                            // If dilation is 1 and padding is odd, we have already read the\n                            // texel when constructing the previous x value. Here we can\n                            // simply skip the texture read.\n                            if (nextTexelOffset === 1) {\n                                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n                            }\n                            else {\n                                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n                            }\n                        }\n                    }\n                }\n            }\n            else { // stride === 2\n                if (colIndex < filterWidth) {\n                    // Depending on whether padLeft is even or odd, we want either the\n                    // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n                    // even, xC${colIndex +1} is simply the zw channels of texels we've\n                    // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n                    // need to come from the xy channels of a new texel, hence the `\n                    // vec4\n                    // final` initialized below.\n                    if (padLeft % 2 === 1) {\n                        mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n              `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n                        }\n                    }\n                    else {\n                        mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n                        if (colIndex + 1 < filterWidth) {\n                            mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                `;\n                        }\n                    }\n                }\n            }\n            // localize the dotProd accumulation within the loop, the theory is for\n            // GPU with limited cache, accumulate sum across large amount of\n            // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n            // 50 variables)\n            if (colIndex < filterWidth) {\n                mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n                if (colIndex + 1 < filterWidth) {\n                    mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n                }\n            }\n        }\n        mainLoop += `\n    }\n  `;\n        mainLoop += `\n      }\n    `;\n        let activationSnippet = '', applyActivationSnippet = '';\n        if (activation) {\n            if (hasPreluActivation) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else if (hasLeakyReluAlpha) {\n                activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n            }\n            else {\n                activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n            }\n            applyActivationSnippet = `result = activation(result);`;\n        }\n        const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n        if (addBias) {\n            this.variableNames.push('bias');\n        }\n        if (hasPreluActivation) {\n            this.variableNames.push('preluActivationWeights');\n        }\n        if (hasLeakyReluAlpha) {\n            this.variableNames.push('leakyreluAlpha');\n        }\n        this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    let program;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n        program = new DepthwiseConvPacked2DProgram(convInfo);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo);\n    }\n    const customValues = [\n        [convInfo.padInfo.top, convInfo.padInfo.left],\n        [convInfo.strideHeight, convInfo.strideWidth],\n        [convInfo.dilationHeight, convInfo.dilationWidth],\n        [convInfo.inHeight, convInfo.inWidth]\n    ];\n    return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNative,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DDerFilterProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = convInfo.padInfo.top;\n        const padLeft = convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class DepthwiseConv2DDerInputProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const padTop = filterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        const channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerFilterProgram } from '../conv_backprop_gpu_depthwise';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropFilter,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerInputProgram } from '../conv_backprop_gpu_depthwise';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropInput,\n    backendName: 'webgl',\n    kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DiagProgram {\n    constructor(size) {\n        this.variableNames = ['X'];\n        this.outputShape = [size, size];\n        this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const outShape = [...x.shape, ...x.shape];\n    const xSize = util.sizeFromShape(x.shape);\n    const flat = reshape({ inputs: { x }, backend, attrs: { shape: [xSize] } });\n    const program = new DiagProgram(xSize);\n    const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n    const out = reshape({ inputs: { x: res }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(flat);\n    backend.disposeIntermediateTensorInfo(res);\n    return out;\n}\nexport const diagConfig = {\n    kernelName: Diag,\n    backendName: 'webgl',\n    kernelFunc: diag\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Dilation2DProgram {\n    constructor(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        const { inHeight, inWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth } = convInfo;\n        const { top: padTop, left: padLeft } = padInfo;\n        this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from '../dilation_gpu';\nimport { reshape } from './Reshape';\nexport function dilation2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n    let out;\n    const program = new Dilation2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    backend.disposeIntermediateTensorInfo(out);\n    return outReshaped;\n}\nexport const dilation2DConfig = {\n    kernelName: Dilation2D,\n    backendName: 'webgl',\n    kernelFunc: dilation2D,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { equation } = attrs;\n    const tensors = inputs;\n    const { allDims, summedDims, idDims } = backend_util.decodeEinsumEquation(equation, tensors.length);\n    backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n    const { path, steps } = backend_util.getEinsumComputePath(summedDims, idDims);\n    const nSteps = steps.length;\n    let out = null;\n    let numDimsRemaining = allDims.length;\n    const tensorsToDispose = [];\n    for (let i = 0; i < nSteps; ++i) {\n        for (const idTerm of steps[i]) {\n            const { permutationIndices: perm, expandDims: dimsToExpand } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n            let x;\n            if (backend_util.isIdentityPermutation(perm)) {\n                x = tensors[idTerm];\n            }\n            else {\n                x = transpose({ inputs: { x: tensors[idTerm] }, backend, attrs: { perm } });\n                tensorsToDispose.push(x);\n            }\n            const targetShape = x.shape.slice();\n            for (let k = 0; k < dimsToExpand.length; ++k) {\n                targetShape.splice(dimsToExpand[k], 0, 1);\n            }\n            if (!util.arraysEqual(x.shape, targetShape)) {\n                x = reshape({ inputs: { x }, backend, attrs: { shape: targetShape } });\n                tensorsToDispose.push(x);\n            }\n            if (out === null) {\n                out = x;\n            }\n            else {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                out = multiply({ inputs: { a: x, b: out }, backend });\n                tensorsToDispose.push(out);\n            }\n        }\n        if (i < nSteps - 1) {\n            if (path[i] >= 0) {\n                out = sum({\n                    inputs: { x: out },\n                    backend,\n                    attrs: {\n                        axis: path[i] - (allDims.length - numDimsRemaining),\n                        keepDims: false\n                    }\n                });\n                tensorsToDispose.push(out);\n            }\n            numDimsRemaining--;\n        }\n    }\n    // Clean up intermediate tensors.\n    for (const tensorInfo of tensorsToDispose) {\n        if (tensorInfo === out) {\n            continue;\n        }\n        backend.disposeIntermediateTensorInfo(tensorInfo);\n    }\n    return out;\n}\nexport const einsumConfig = {\n    kernelName: Einsum,\n    backendName: 'webgl',\n    kernelFunc: einsum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Elu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nconst elu = unaryKernelFunc({ opSnippet: ELU, packedOpSnippet: ELU_PACKED });\nexport const eluConfig = {\n    kernelName: Elu,\n    backendName: 'webgl',\n    kernelFunc: elu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, env } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const eluGrad = (args) => {\n    const { inputs, backend } = args;\n    const { dy, y } = inputs;\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n        new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n    return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n};\nexport const eluGradConfig = {\n    kernelName: EluGrad,\n    backendName: 'webgl',\n    kernelFunc: eluGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { equalImplCPU } from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\nconst EQUAL = `return float(a == b);`;\nexport const equal = binaryKernelFunc({\n    opSnippet: EQUAL,\n    packedOpSnippet: PACKED_EQUAL,\n    dtype: 'bool',\n    cpuKernelImpl: equalImplCPU,\n});\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'webgl',\n    kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Erf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\nexport const erf = unaryKernelFunc({ opSnippet: ERF });\nexport const erfConfig = {\n    kernelName: Erf,\n    backendName: 'webgl',\n    kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expImplCPU } from '../kernel_utils/shared';\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const exp = unaryKernelFunc({\n    opSnippet: EXP,\n    packedOpSnippet: EXP_PACKED,\n    cpuKernelImpl: expImplCPU,\n    dtype: 'float32',\n});\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'webgl',\n    kernelFunc: exp\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n    const { inputs, attrs, backend } = args;\n    const { dim } = attrs;\n    const { input } = inputs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nexport const expandDimsConfig = {\n    kernelName: ExpandDims,\n    backendName: 'webgl',\n    kernelFunc: expandDims,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expm1ImplCPU } from '../kernel_utils/shared';\nconst EXPM1 = `return exp(x) - 1.0;`;\nexport const expm1 = unaryKernelFunc({ opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU });\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'webgl',\n    kernelFunc: expm1\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FFTProgram {\n    constructor(component, inputShape, inverse) {\n        this.variableNames = ['real', 'imag'];\n        const innerDim = inputShape[1];\n        this.outputShape = inputShape;\n        const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n        const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n        let opString;\n        if (component === 'real') {\n            opString = 'return real * expR - imag * expI;';\n        }\n        else if (component === 'imag') {\n            opString = 'return real * expI + imag * expR;';\n        }\n        else {\n            throw new Error(`FFT component must be either \"real\" or \"imag\", got ${component}.`);\n        }\n        this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n    const xData = backend.texData.get(x.dataId);\n    const inputSize = util.sizeFromShape(x.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = x.shape[x.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({ inputs: { x }, backend, attrs: { shape: [batch, innerDimensionSize] } });\n    const xShape = input2D.shape;\n    const realProgram = new FFTProgram('real', xShape, inverse);\n    const imagProgram = new FFTProgram('imag', xShape, inverse);\n    const inputs = [\n        {\n            dataId: xData.complexTensorInfos.real.dataId,\n            dtype: xData.complexTensorInfos.real.dtype,\n            shape: xShape\n        },\n        {\n            dataId: xData.complexTensorInfos.imag.dataId,\n            dtype: xData.complexTensorInfos.imag.dtype,\n            shape: xShape\n        }\n    ];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({ inputs: { real: realPart, imag: imagPart }, backend });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    const complexOutputReshaped = reshape({ inputs: { x: complexOutput }, backend, attrs: { shape: x.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(complexOutput);\n    return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function fft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    return fftImpl(input, false /* inverse */, backend);\n}\nexport const fftConfig = {\n    kernelName: FFT,\n    backendName: 'webgl',\n    kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FillProgram {\n    constructor(shape, value) {\n        this.outputShape = [];\n        this.customUniforms = [{ name: 'value', type: 'float' }];\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Fill, util } from '@tensorflow/tfjs-core';\nimport { FillProgram } from '../fill_gpu';\nexport function fill(args) {\n    const { backend, attrs } = args;\n    const { shape, value } = attrs;\n    let { dtype } = attrs;\n    dtype = dtype || util.inferDtype(value);\n    if (dtype === 'string') {\n        // String type should be handled in CPU memory.\n        const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return backend.makeTensorInfo(shape, dtype, values);\n    }\n    else {\n        const program = new FillProgram(shape, value);\n        const customValues = [[value]];\n        return backend.runWebGLProgram(program, [], dtype, customValues);\n    }\n}\nexport const fillConfig = {\n    kernelName: Fill,\n    backendName: 'webgl',\n    kernelFunc: fill\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FlipLeftRightProgram {\n    constructor(imageShape) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight } from '@tensorflow/tfjs-core';\nimport { FlipLeftRightProgram } from '../flip_left_right_gpu';\nexport const flipLeftRightConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, backend }) => {\n        const { image } = inputs;\n        const webglBackend = backend;\n        const program = new FlipLeftRightProgram(image.shape);\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n        return output;\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { floorImplCPU } from '../kernel_utils/shared';\nconst FLOOR = `return floor(x);`;\nexport const floor = unaryKernelFunc({ opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU });\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'webgl',\n    kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\nexport const floorDiv = binaryKernelFunc({ opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32' });\nexport const floorDivConfig = {\n    kernelName: FloorDiv,\n    backendName: 'webgl',\n    kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsPackedProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        const glsl = getGlslDifferences();\n        const [height, width,] = outputShape;\n        this.outputShape = outputShape;\n        this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n    kernelName: FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo) {\n        const newWillReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n        if (fromPixels2DContext == null ||\n            newWillReadFrequently !== willReadFrequently) {\n            willReadFrequently = newWillReadFrequently;\n            fromPixels2DContext =\n                document.createElement('canvas').getContext('2d', { willReadFrequently });\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = env().getBool('WEBGL_PACK') ?\n        new FromPixelsPackedProgram(outShape) :\n        new FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    let out;\n    const intermediates = [];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const prepareInputs = () => {\n        const inputs = [x, filter];\n        // If the input is a 1-D tensor, align it with the channels.\n        //\n        // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n        // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n        // scalar inputs are originally aligned, but the 1-D tensor inputs are\n        // supposed to be aligned with the channels (only bias and PReLU activation\n        // weights could be a 1-D tensor).\n        const alignInputWithDataFormat = (input, dataFormat) => {\n            if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n                input.shape[0] !== 1) {\n                const alignedInput = reshape({\n                    inputs: { x: input },\n                    backend,\n                    attrs: { shape: [input.shape[0], 1, 1] }\n                });\n                intermediates.push(alignedInput);\n                return alignedInput;\n            }\n            return input;\n        };\n        if (hasBias) {\n            inputs.push(alignInputWithDataFormat(bias, dataFormat));\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n        }\n        if (hasLeakyreluAlpha) {\n            const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n            inputs.push($leakyreluAlpha);\n            intermediates.push($leakyreluAlpha);\n        }\n        return inputs;\n    };\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n        out = conv2dByMatMul({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n        && env().getBool('WEBGL_EXP_CONV')) {\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const program = new Conv2DPackedProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const customValues = [\n            [convInfo.padInfo.top, convInfo.padInfo.left],\n            [convInfo.strideHeight, convInfo.strideWidth],\n            [convInfo.dilationHeight, convInfo.dilationWidth],\n            [convInfo.inHeight, convInfo.inWidth]\n        ];\n        const inputs = prepareInputs();\n        out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n    }\n    else if (env().getBool('WEBGL_CONV_IM2COL')) {\n        out = conv2dWithIm2Row({\n            x,\n            filter,\n            convInfo,\n            backend,\n            bias,\n            activation,\n            preluActivationWeights,\n            leakyreluAlpha\n        });\n    }\n    else {\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n        const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n        const inputs = prepareInputs();\n        out = backend.runWebGLProgram(program, inputs, 'float32');\n    }\n    const outReshaped = reshape({ inputs: { x: out }, backend, attrs: { shape: convInfo.outShape } });\n    intermediates.push(out);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outReshaped;\n}\nexport const fusedConv2DConfig = {\n    kernelName: FusedConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedConv2d,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const intermediates = [];\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const programInputs = [x, filter];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    if (hasBias) {\n        programInputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n        programInputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n        const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n        programInputs.push($leakyreluAlpha);\n        intermediates.push($leakyreluAlpha);\n    }\n    let program;\n    if (shouldPackDepthwiseConv) {\n        program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    else {\n        program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    }\n    const customValues = [\n        [convInfo.padInfo.top, convInfo.padInfo.left],\n        [convInfo.strideHeight, convInfo.strideWidth],\n        [convInfo.dilationHeight, convInfo.dilationWidth],\n        [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'webgl',\n    kernelFunc: fusedDepthwiseConv2D,\n};\n","import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n    constructor(sliceDim, strides, shape, paramsShape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.paramsShape = paramsShape;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const dtype = getCoordsDataType(shape.length);\n        let mainLoop = `\n    int index;`;\n        for (let j = 0; j < this.sliceDim; j++) {\n            mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n        }\n        this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const paramsSize = util.sizeFromShape(params.shape);\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numSlices, sliceRank] } });\n    const flattenX = reshape({\n        inputs: { x: params },\n        backend,\n        attrs: { shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize] }\n    });\n    if (backend.shouldExecuteOnCPU([params, indices]) ||\n        params.dtype === 'string') {\n        const indicesData = backend.readSync(indices.dataId);\n        const paramsBuf = backend.bufferSync(params);\n        const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n        return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n    }\n    const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], params.shape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: resultShape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'webgl',\n    kernelFunc: gatherNd\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n    constructor(aShape, outputShape) {\n        this.variableNames = ['A', 'indices'];\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape, 2);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n    }\n}\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape, axis) {\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        if (i === 2) {\n            sourceCoords.push('index');\n        }\n        else {\n            sourceCoords.push(`${currentCoords[i]}`);\n        }\n    }\n    return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util, env } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    if (env().get('DEBUG')) {\n        // In debug mode, throw error when any index is out of bound.\n        // Otherwise, just fill out of bounds with zeroes.\n        const indicesVals = backend.readSync(indices.dataId);\n        const axisDim = x.shape[parsedAxis];\n        for (let i = 0; i < indicesVals.length; ++i) {\n            const index = indicesVals[i];\n            util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n        }\n    }\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const toDispose = [];\n    const flattenX = reshape({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    toDispose.push(flattenX);\n    toDispose.push(flattenIndex);\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n        const indicesBuf = backend.bufferSync(flattenIndex);\n        const xBuf = backend.bufferSync(flattenX);\n        const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n        toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n    }\n    const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n    toDispose.push(res);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: shapeInfo.outputShape } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'webgl',\n    kernelFunc: gatherV2\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterImplCPU } from '../kernel_utils/shared';\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\nexport const greater = binaryKernelFunc({\n    opSnippet: GREATER,\n    packedOpSnippet: GREATER_PACKED,\n    cpuKernelImpl: greaterImplCPU,\n    dtype: 'bool'\n});\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'webgl',\n    kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterEqualImplCPU } from '../kernel_utils/shared';\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\nexport const greaterEqual = binaryKernelFunc({\n    opSnippet: GREATER_EQUAL,\n    packedOpSnippet: GREATER_EQUAL_PACKED,\n    dtype: 'bool',\n    cpuKernelImpl: greaterEqualImplCPU\n});\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'webgl',\n    kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function ifft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    return fftImpl(input, true /* inverse */, backend);\n}\nexport const ifftConfig = {\n    kernelName: IFFT,\n    backendName: 'webgl',\n    kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsFinite } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\nexport const isFinite = unaryKernelFunc({ opSnippet: IS_FINITE, dtype: 'bool' });\nexport const isFiniteConfig = {\n    kernelName: IsFinite,\n    backendName: 'webgl',\n    kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsInf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_INF = `return float(isinf(x));`;\nexport const isInf = unaryKernelFunc({ opSnippet: IS_INF, dtype: 'bool' });\nexport const isInfConfig = {\n    kernelName: IsInf,\n    backendName: 'webgl',\n    kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsNan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_NAN = `return float(isnan(x));`;\nexport const isNaN = unaryKernelFunc({ opSnippet: IS_NAN, dtype: 'bool' });\nexport const isNaNConfig = {\n    kernelName: IsNan,\n    backendName: 'webgl',\n    kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessImplCPU } from '../kernel_utils/shared';\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\nexport const less = binaryKernelFunc({\n    opSnippet: LESS,\n    packedOpSnippet: LESS_PACKED,\n    cpuKernelImpl: lessImplCPU,\n    dtype: 'bool'\n});\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'webgl',\n    kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessEqualImplCPU } from '../kernel_utils/shared';\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\nexport const lessEqual = binaryKernelFunc({\n    opSnippet: LESS_EQUAL,\n    packedOpSnippet: LESS_EQUAL_PACKED,\n    cpuKernelImpl: lessEqualImplCPU,\n    dtype: 'bool'\n});\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'webgl',\n    kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LinSpace } from '@tensorflow/tfjs-core';\nimport { linSpaceImplCPU } from '../kernel_utils/shared';\nexport function linSpace(args) {\n    const { backend, attrs } = args;\n    const { start, stop, num } = attrs;\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    const outVals = linSpaceImplCPU(start, stop, num);\n    return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\nexport const linSpaceConfig = {\n    kernelName: LinSpace,\n    backendName: 'webgl',\n    kernelFunc: linSpace\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { logImplCPU } from '../kernel_utils/shared';\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\nexport const log = unaryKernelFunc({ opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU });\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'webgl',\n    kernelFunc: log\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log1p } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\nexport const log1p = unaryKernelFunc({ opSnippet: LOG1P });\nexport const log1pConfig = {\n    kernelName: Log1p,\n    backendName: 'webgl',\n    kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalAnd } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\nexport const logicalAnd = binaryKernelFunc({\n    opSnippet: LOGICAL_AND,\n    packedOpSnippet: LOGICAL_AND_PACKED,\n    dtype: 'bool'\n});\nexport const logicalAndConfig = {\n    kernelName: LogicalAnd,\n    backendName: 'webgl',\n    kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalNot } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\nexport const logicalNot = unaryKernelFunc({ opSnippet: LOGICAL_NOT });\nexport const logicalNotConfig = {\n    kernelName: LogicalNot,\n    backendName: 'webgl',\n    kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalOr } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\nexport const logicalOr = binaryKernelFunc({ opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool' });\nexport const logicalOrConfig = {\n    kernelName: LogicalOr,\n    backendName: 'webgl',\n    kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNPackedProgram {\n    constructor(xShape, radius, bias, alpha, beta) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rad = radius;\n        const maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        // optimize pow(bias + alpha * sum, -beta)\n        // src: https://github.com/tensorflow/tensorflow/..\n        // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n        // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n        let powOperator;\n        const basis = `float(${bias}) + float(${alpha}) * sum`;\n        if (beta === 0.5) {\n            powOperator = `inversesqrt(${basis})`;\n        }\n        else if (beta === 1.0) {\n            powOperator = `1.0/(${basis})`;\n        }\n        else {\n            powOperator = `exp(log(${basis}) * float(-${beta}));`;\n        }\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LRN } from '@tensorflow/tfjs-core';\nimport { LRNProgram } from '../lrn_gpu';\nimport { LRNPackedProgram } from '../lrn_packed_gpu';\nexport const lrn = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n        new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nexport const LRNConfig = {\n    kernelName: LRN,\n    backendName: 'webgl',\n    kernelFunc: lrn\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNGradProgram {\n    constructor(inputShape, depthRadius, bias, alpha, beta) {\n        this.variableNames = ['inputImage', 'outputImage', 'dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        this.depth = inputShape[3];\n        this.depthRadius = depthRadius;\n        this.bias = bias;\n        this.alpha = alpha;\n        this.beta = beta;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad } from '@tensorflow/tfjs-core';\nimport { LRNGradProgram } from '../lrn_grad_gpu';\nexport const lrnGrad = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x, y, dy } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n    return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig = {\n    kernelName: LRNGrad,\n    backendName: 'webgl',\n    kernelFunc: lrnGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernels/Reshape';\nexport function maxImpl(x, reduceShape, outShape, backend) {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });\n    const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n    const reshapedOutput = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport function max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    let maxInput = x;\n    if (maxInputIsTransposed) {\n        if (shouldExecuteOnCPU) {\n            const xTexData = backend.texData.get(maxInput.dataId);\n            const values = xTexData.values;\n            const newShape = new Array(xRank);\n            for (let i = 0; i < newShape.length; i++) {\n                newShape[i] = x.shape[permutedAxes[i]];\n            }\n            const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n            maxInput = backend.makeTensorInfo(newShape, x.dtype);\n            const maxInputData = backend.texData.get(maxInput.dataId);\n            maxInputData.values = maxInputValues;\n        }\n        else {\n            maxInput = transposeImpl(x, permutedAxes, backend);\n        }\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // rather than reshape at the end, set the target shape here.\n        outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n    let out;\n    if (shouldExecuteOnCPU) {\n        const xTexData = backend.texData.get(maxInput.dataId);\n        const values = xTexData.values;\n        const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n        out = backend.makeTensorInfo(outShape, x.dtype);\n        const outData = backend.texData.get(out.dataId);\n        outData.values = outValues;\n    }\n    else {\n        out = maxImpl(maxInput, reduceShape, outShape, backend);\n    }\n    if (maxInputIsTransposed) {\n        backend.disposeIntermediateTensorInfo(maxInput);\n    }\n    return out;\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'webgl',\n    kernelFunc: max\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { maximumImplCPU } from '../kernel_utils/shared';\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const maximum = binaryKernelFunc({\n    opSnippet: MAXIMUM,\n    packedOpSnippet: MAXIMUM_PACKED,\n    cpuKernelImpl: maximumImplCPU\n});\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'webgl',\n    kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        return identity({ inputs: { x }, backend });\n    }\n    const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'webgl',\n    kernelFunc: maxPool\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3d(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n    return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPool3DConfig = {\n    kernelName: MaxPool3D,\n    backendName: 'webgl',\n    kernelFunc: maxPool3d\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MaxPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class MaxPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = [1, 1, 1];\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n    const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n    const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n    return result;\n}\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPool3DGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    assertNotComplex([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const getPositions = true;\n    const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    backend.disposeIntermediateTensorInfo(maxPoolPositions);\n    return result;\n}\nexport const maxPoolGradConfig = {\n    kernelName: MaxPoolGrad,\n    backendName: 'webgl',\n    kernelFunc: maxPoolGrad\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pool2DProgram } from '../pool_gpu';\nexport function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {\n    let program = new Pool2DProgram(convInfo, 'max', false);\n    const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n    program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n    const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n    return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const webglBackend = backend;\n        util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n        const dilations = [1, 1];\n        util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n        const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n        return [result, indexes];\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernels/Reshape';\nexport function meanImpl(x, reduceShape, outShape, backend) {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(x.shape);\n    const batchSize = xSize / inSize;\n    const reshapedInput = reshape({ inputs: { x }, attrs: { shape: [batchSize, inSize] }, backend });\n    const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n    const reshapedOutput = reshape({ inputs: { x: reduced }, attrs: { shape: outShape }, backend });\n    backend.disposeIntermediateTensorInfo(reshapedInput);\n    backend.disposeIntermediateTensorInfo(reduced);\n    return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { keepDims, axis } = attrs;\n        const webglBackend = backend;\n        const xRank = x.shape.length;\n        const origAxes = util.parseAxisParam(axis, x.shape);\n        let axes = origAxes;\n        const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n        const meanInputIsTransposed = permutedAxes != null;\n        const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n        const intermediates = [];\n        let meanInput = x;\n        if (meanInputIsTransposed) {\n            if (shouldExecuteOnCPU) {\n                const xTexData = webglBackend.texData.get(meanInput.dataId);\n                const values = xTexData.values;\n                const newShape = new Array(xRank);\n                for (let i = 0; i < newShape.length; i++) {\n                    newShape[i] = x.shape[permutedAxes[i]];\n                }\n                const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n                meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n                const meanInputData = webglBackend.texData.get(meanInput.dataId);\n                meanInputData.values = meanInputValues;\n            }\n            else {\n                meanInput = transposeImpl(x, permutedAxes, webglBackend);\n            }\n            intermediates.push(meanInput);\n            axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        }\n        backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n        const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n        let outShape = meanOutShape;\n        if (keepDims) {\n            // rather than reshape at the end, set the target shape here.\n            outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n        }\n        const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n        for (const i of intermediates) {\n            webglBackend.disposeIntermediateTensorInfo(i);\n        }\n        return out;\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function min(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n    let res;\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: newShape } });\n    }\n    else {\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n    }\n    backend.disposeIntermediateTensorInfo(a2D);\n    backend.disposeIntermediateTensorInfo(reduced);\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return res;\n}\nexport const minConfig = {\n    kernelName: Min,\n    backendName: 'webgl',\n    kernelFunc: min\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { minimumImplCPU } from '../kernel_utils/shared';\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const minimum = binaryKernelFunc({\n    opSnippet: MINIMUM,\n    packedOpSnippet: MINIMUM_PACKED,\n    cpuKernelImpl: minimumImplCPU\n});\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'webgl',\n    kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class MirrorPadProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        const offset = mode === 'reflect' ? 0 : 1;\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram {\n    constructor(xShape, paddings, mode) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const offset = mode === 'reflect' ? 0 : 1;\n        let mainLoop = '';\n        if (rank === 1) {\n            const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        else {\n            const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n            mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n        }\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, MirrorPad } from '@tensorflow/tfjs-core';\nimport { MirrorPadProgram } from '../mirror_pad_gpu';\nimport { MirrorPadPackedProgram } from '../mirror_pad_packed_gpu';\nexport const mirrorPadKernelFunc = ({ inputs, backend, attrs }) => {\n    const { x } = inputs;\n    const { paddings, mode } = attrs;\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new MirrorPadPackedProgram(x.shape, paddings, mode) :\n        new MirrorPadProgram(x.shape, paddings, mode);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n};\nexport const mirrorPadConfig = {\n    kernelName: MirrorPad,\n    backendName: 'webgl',\n    kernelFunc: mirrorPadKernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const mod = binaryKernelFunc({\n    opSnippet: MOD,\n    packedOpSnippet: MOD_PACKED,\n});\nexport const modConfig = {\n    kernelName: Mod,\n    backendName: 'webgl',\n    kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MultinomialProgram {\n    constructor(batchSize, numOutcomes, numSamples) {\n        this.variableNames = ['probs'];\n        this.customUniforms = [{ name: 'seed', type: 'float' }];\n        this.outputShape = [batchSize, numSamples];\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\nexport const realDiv = binaryKernelFunc({ opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true });\nexport const realDivConfig = {\n    kernelName: RealDiv,\n    backendName: 'webgl',\n    kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { subImplCPU as cpuSub } from '../kernel_utils/shared';\nconst SUB = 'return a - b;';\nexport const sub = binaryKernelFunc({\n    opSnippet: SUB,\n    packedOpSnippet: SUB,\n    supportsComplex: true,\n    cpuKernelImpl: cpuSub\n});\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'webgl',\n    kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { realDiv } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { dim } = attrs;\n    const axes = util.parseAxisParam([dim], logits.shape);\n    const maxLogit = max({\n        inputs: { x: logits },\n        backend,\n        attrs: { reductionIndices: axes, keepDims: false }\n    });\n    const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const maxLogitsReshaped = reshape({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });\n    const a = sub({ inputs: { a: logits, b: maxLogitsReshaped }, backend });\n    const b = exp({ inputs: { x: a }, backend });\n    const sumExp = sum({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });\n    const sumExpReshaped = reshape({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });\n    const res = realDiv({ inputs: { a: b, b: sumExpReshaped }, backend });\n    backend.disposeIntermediateTensorInfo(maxLogit);\n    backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n    backend.disposeIntermediateTensorInfo(a);\n    backend.disposeIntermediateTensorInfo(b);\n    backend.disposeIntermediateTensorInfo(sumExp);\n    backend.disposeIntermediateTensorInfo(sumExpReshaped);\n    return res;\n}\nexport const softmaxConfig = {\n    kernelName: Softmax,\n    backendName: 'webgl',\n    kernelFunc: softmax\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    const probs = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: logits.shape.length - 1 } });\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customValues = [[seed]];\n    const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probs);\n    }\n    return res;\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'webgl',\n    kernelFunc: multinomial\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (backend.shouldExecuteOnCPU([x])) {\n        const xData = backend.texData.get(x.dataId);\n        const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n        return backend.makeTensorInfo(newShape, x.dtype, outValues);\n    }\n    let program;\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n        program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n    }\n    else {\n        program = new UnaryOpProgram(x.shape, NEG);\n    }\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'webgl',\n    kernelFunc: neg\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nexport function nonMaxSuppressionV3(args) {\n    backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nexport const nonMaxSuppressionV3Config = {\n    kernelName: NonMaxSuppressionV3,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV3\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nexport function nonMaxSuppressionV4(args) {\n    backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n    ];\n}\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV4\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nexport function nonMaxSuppressionV5(args) {\n    backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n    const boxesVals = backend.readSync(boxes.dataId);\n    const scoresVals = backend.readSync(scores.dataId);\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))\n    ];\n}\nexport const nonMaxSuppressionV5Config = {\n    kernelName: NonMaxSuppressionV5,\n    backendName: 'webgl',\n    kernelFunc: nonMaxSuppressionV5\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class OneHotProgram {\n    constructor(numIndices, depth, onValue, offValue) {\n        this.variableNames = ['indices'];\n        this.outputShape = [numIndices, depth];\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { OneHotProgram } from '../onehot_gpu';\nimport { reshape } from './Reshape';\nexport const oneHot = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { dtype, depth, onValue, offValue } = attrs;\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n    const reshaped = reshape({ inputs: { x: indices }, backend, attrs: { shape: [indicesSize] } });\n    const result = backend.runWebGLProgram(program, [reshaped], dtype);\n    backend.disposeIntermediateTensorInfo(reshaped);\n    const outShape = [...indices.shape, depth];\n    const out = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo(result);\n    return out;\n};\nexport const oneHotConfig = {\n    kernelName: OneHot,\n    backendName: 'webgl',\n    kernelFunc: oneHot\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = zerosLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({\n            attrs: {\n                shape: x.shape,\n                dtype: x.dtype,\n                value: x.dtype === 'string' ? '' : 0\n            },\n            backend\n        });\n    }\n}\nexport const zerosLikeConfig = {\n    kernelName: ZerosLike,\n    backendName: 'webgl',\n    kernelFunc: zerosLike\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported under string dtype');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = onesLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        // TODO(cais, smilkov): Add WebGL shader for onesLike:\n        //   https://github.com/tensorflow/tfjs/issues/1293\n        return fill({ attrs: { shape: x.shape, dtype: x.dtype, value: 1 }, backend });\n    }\n}\nexport const onesLikeConfig = {\n    kernelName: OnesLike,\n    backendName: 'webgl',\n    kernelFunc: onesLike\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    if (inputs.length === 1) {\n        return expandDims({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });\n    }\n    const shape = inputs[0].shape;\n    const dtype = inputs[0].dtype;\n    inputs.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const intermediateTensorInfos = [];\n    const expandedTensors = inputs.map(t => {\n        const expandedT = expandDims({ inputs: { input: t }, backend, attrs: { dim: axis } });\n        intermediateTensorInfos.push(expandedT);\n        return expandedT;\n    });\n    const result = concat({ inputs: expandedTensors, backend, attrs: { axis } });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const packConfig = {\n    kernelName: Pack,\n    backendName: 'webgl',\n    kernelFunc: pack\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.customUniforms = [{ name: 'value', type: 'float' }];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const type = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n            return;\n        }\n        this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadPackedProgram {\n    constructor(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [{ name: 'value', type: 'float' }];\n        this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n        const rank = xShape.length;\n        const dtype = getCoordsDataType(rank);\n        const start = paddings.map(p => p[0]).join(',');\n        const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n        const coords = getChannels('rc', rank);\n        const source = getChannels('source', rank);\n        const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n        const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n        const componentSetup = [\n            `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n            rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n            rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n        ];\n        const paddingArea = rank === 1 ?\n            'rc < start || rc >= end' :\n            'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n        let mainLoop = '';\n        for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n            mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n        }\n        mainLoop += (rank === 1 ? `} ` : `}}`);\n        this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n            backend,\n            attrs: { shape: outputShape, value: constantValue, dtype: x.dtype }\n        });\n    }\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    const customValues = [[constantValue]];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'webgl',\n    kernelFunc: padV2\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const pow = binaryKernelFunc({ opSnippet: POW, packedOpSnippet: POW_PACKED });\nexport const powConfig = {\n    kernelName: Pow,\n    backendName: 'webgl',\n    kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let permutedX = x;\n    if (permutedAxes != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        toDispose.push(permutedX);\n    }\n    backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n    let res;\n    if (backend.shouldExecuteOnCPU([permutedX])) {\n        const xVals = backend.texData.get(permutedX.dataId).values;\n        const { outVals, outShape, outDtype } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n    }\n    else {\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n        const outputDType = sumOutType(x.dtype);\n        const reduced = reduce(a2D, outputDType, 'prod', backend);\n        res = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        toDispose.push(a2D);\n        toDispose.push(reduced);\n    }\n    if (keepDims) {\n        toDispose.push(res);\n        const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n        res = reshape({ inputs: { x: res }, backend, attrs: { shape: newShape } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'webgl',\n    kernelFunc: prod\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImplCPU } from '../kernel_utils/shared';\nexport function raggedGather(args) {\n    const { inputs, backend, attrs } = args;\n    const { paramsNestedSplits, paramsDenseValues, indices } = inputs;\n    const { outputRaggedRank } = attrs;\n    const $paramsNestedSplits = paramsNestedSplits.map(t => backend.readSync(t.dataId));\n    const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n    const $paramsDenseValues = backend.readSync(paramsDenseValues.dataId);\n    const $indices = backend.readSync(indices.dataId);\n    const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImplCPU($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n    const outputNestedSplitsTensors = outputNestedSplits.map((splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n    const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n    return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n    kernelName: RaggedGather,\n    backendName: 'webgl',\n    kernelFunc: raggedGather,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedTensorToTensor } from '@tensorflow/tfjs-core';\nimport { raggedTensorToTensorImplCPU } from '../kernel_utils/shared';\nexport function raggedTensorToTensor(args) {\n    const { inputs, backend, attrs } = args;\n    const { shape, values, defaultValue, rowPartitionTensors } = inputs;\n    const { rowPartitionTypes } = attrs;\n    const $shape = backend.readSync(shape.dataId);\n    const $values = backend.readSync(values.dataId);\n    const $defaultValue = backend.readSync(defaultValue.dataId);\n    const $rowPartitionValues = rowPartitionTensors.map(t => backend.readSync(t.dataId));\n    const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n    const [outputShape, output] = raggedTensorToTensorImplCPU($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes);\n    return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\nexport const raggedTensorToTensorConfig = {\n    kernelName: RaggedTensorToTensor,\n    backendName: 'webgl',\n    kernelFunc: raggedTensorToTensor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Range } from '@tensorflow/tfjs-core';\nimport { rangeImplCPU } from '../kernel_utils/shared';\nexport const range = (args) => {\n    const { backend, attrs } = args;\n    const { start, stop, step, dtype } = attrs;\n    const values = rangeImplCPU(start, stop, step, dtype);\n    return backend.makeTensorInfo([values.length], dtype, values);\n};\nexport const rangeConfig = {\n    kernelName: Range,\n    backendName: 'webgl',\n    kernelFunc: range\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reciprocal } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst RECIPROCAL = `return 1.0 / x;`;\nexport const reciprocal = unaryKernelFunc({ opSnippet: RECIPROCAL });\nexport const reciprocalConfig = {\n    kernelName: Reciprocal,\n    backendName: 'webgl',\n    kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const relu = unaryKernelFunc({ opSnippet: RELU, packedOpSnippet: RELU_PACKED });\nexport const reluConfig = {\n    kernelName: Relu,\n    backendName: 'webgl',\n    kernelFunc: relu\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu6 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const relu6 = unaryKernelFunc({ opSnippet: RELU6, packedOpSnippet: RELU6_PACKED });\nexport const relu6Config = {\n    kernelName: Relu6,\n    backendName: 'webgl',\n    kernelFunc: relu6\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    ` - vec2(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n                `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n        }\n        else {\n            sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, ResizeBilinear } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearProgram } from '../resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from '../resize_bilinear_packed_gpu';\nexport function resizeBilinear(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    const [newHeight, newWidth] = size;\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) :\n        new ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n    return backend.runWebGLProgram(program, [images], 'float32');\n}\nexport const resizeBilinearConfig = {\n    kernelName: ResizeBilinear,\n    backendName: 'webgl',\n    kernelFunc: resizeBilinear\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinearGrad } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearBackpropProgram } from '../resize_bilinear_backprop_gpu';\nexport function resizeBilinearGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    const program = new ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);\n    return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nexport const resizeBilinearGradConfig = {\n    kernelName: ResizeBilinearGrad,\n    backendName: 'webgl',\n    kernelFunc: resizeBilinearGrad\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC =\n                `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n                    `, vec2(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborPackedProgram {\n    constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = [];\n        const [batch, oldHeight, oldWidth, depth] = inputShape;\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        const effectiveInSize = [\n            (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n            (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n        ];\n        const effectiveOutSize = [\n            (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n            (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n        ];\n        // When align corners is false, we rounds the value with floor.\n        const roundBase = alignCorners ? '0.5' : '0.0';\n        let sourceFracIndexRC;\n        if (halfPixelCenters) {\n            sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n                `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n        }\n        else {\n            sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n        }\n        this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, ResizeNearestNeighbor } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeighborProgram } from '../resize_nearest_neighbor_gpu';\nimport { ResizeNearestNeighborPackedProgram } from '../resize_nearest_neighbor_packed_gpu';\nexport function resizeNearestNeighbor(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    const [newHeight, newWidth] = size;\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeNearestNeighborPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) :\n        new ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n    return backend.runWebGLProgram(program, [images], images.dtype);\n}\nexport const resizeNearestNeighborConfig = {\n    kernelName: ResizeNearestNeighbor,\n    backendName: 'webgl',\n    kernelFunc: resizeNearestNeighbor\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeigborBackpropProgram {\n    constructor(dyShape, inputShape, alignCorners) {\n        this.variableNames = ['dy'];\n        this.outputShape = [];\n        this.outputShape = inputShape;\n        const [, xHeight, xWidth,] = inputShape;\n        const [, yHeight, yWidth] = dyShape;\n        // In the backwards pass, we want to find the pixels that were generated for\n        // each pixel in the input image the forward pass and add the corresponding\n        // coefficient from dy to the gradient (with some interpolation).\n        const effectiveXSize = [\n            (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n            (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n        ];\n        const effectiveYSize = [\n            (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n            (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n        ];\n        const heightScale = effectiveXSize[0] / effectiveYSize[0];\n        const widthScale = effectiveXSize[1] / effectiveYSize[1];\n        const invHeightScale = 1 / heightScale;\n        const invWidthScale = 1 / widthScale;\n        // This defines the size of the window of values around a particular\n        // index in dy that we want to search for contributions to dx.\n        const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n        const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n        this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeigborBackpropProgram } from '../resize_nearest_neighbor_backprop_gpu';\nexport function resizeNearestNeighborGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    const program = new ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);\n    return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nexport const resizeNearestNeighborGradConfig = {\n    kernelName: ResizeNearestNeighborGrad,\n    backendName: 'webgl',\n    kernelFunc: resizeNearestNeighborGrad\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReverseProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        if (rank === 1) {\n            this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n            return;\n        }\n        const getInCoord = (i) => {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - coords[${i}] - 1`;\n            }\n            return `coords[${i}]`;\n        };\n        const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n        const type = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n    constructor(xShape, axis) {\n        this.variableNames = ['x'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        const rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n        }\n        this.outputShape = xShape;\n        const channels = getChannels('rc', rank);\n        const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n        const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n        const type = getCoordsDataType(rank);\n        if (rank === 1) {\n            this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n        }\n        else {\n            this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n        }\n        function getR(channels) {\n            return getChannel(channels);\n        }\n        function getG(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getB(channels) {\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getA(channels) {\n            channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n            channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n            return getChannel(channels);\n        }\n        function getChannel(channels) {\n            const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n            const inCoords = inCoordsArray.join(',');\n            const innerDims = inCoordsArray.slice(-2).join(',');\n            return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n        }\n        function getInCoord(i, channels1) {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return `${xShape[i]} - ${channels1[i]} - 1`;\n            }\n            else {\n                return `${channels1[i]}`;\n            }\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Reverse, util } from '@tensorflow/tfjs-core';\nimport { ReverseProgram } from '../reverse_gpu';\nimport { ReversePackedProgram } from '../reverse_packed_gpu';\nimport { identity } from './Identity';\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    const xRank = x.shape.length;\n    const $dims = util.parseAxisParam(dims, x.shape);\n    if (xRank === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new ReversePackedProgram(x.shape, $dims) :\n        new ReverseProgram(x.shape, $dims);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'webgl',\n    kernelFunc: reverse\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class RotateProgram {\n    constructor(imageShape, fillValue) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        this.customUniforms = [{ name: 'params', type: 'vec4' }];\n        const imageHeight = imageShape[1];\n        const imageWidth = imageShape[2];\n        this.outputShape = imageShape;\n        let fillSnippet = '';\n        if (typeof fillValue === 'number') {\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n        }\n        else {\n            fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n        }\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { RotateProgram } from '../rotate_gpu';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgl',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const webglBackend = backend;\n        const program = new RotateProgram(image.shape, fillValue);\n        const [centerX, centerY] = backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n        const customValues = [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n        const output = webglBackend.runWebGLProgram(program, [image], image.dtype, customValues);\n        return output;\n    }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\nexport const round = unaryKernelFunc({ opSnippet: ROUND });\nexport const roundConfig = {\n    kernelName: Round,\n    backendName: 'webgl',\n    kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { rsqrtImplCPU } from '../kernel_utils/shared';\nconst RSQRT = `return inversesqrt(x);`;\nexport const rsqrt = unaryKernelFunc({ opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU });\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'webgl',\n    kernelFunc: rsqrt\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n    constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true) {\n        this.variableNames = ['updates', 'indices', 'defaultValue'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        let indicesString = '';\n        if (indicesRank === 1) {\n            indicesString = 'i';\n        }\n        else if (indicesRank === 2) {\n            indicesString = 'i, j';\n        }\n        const indicesSnippet = `getIndices(${indicesString})`;\n        let updatesString = '';\n        if (updatesRank === 1) {\n            updatesString = 'i';\n        }\n        else if (updatesRank === 2) {\n            updatesString = 'i, coords[1]';\n        }\n        const updatesSnippet = `getUpdates(${updatesString})`;\n        const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    if (outputSize === 0) {\n        return backend.makeTensorInfo(shape, indices.dtype);\n    }\n    const flattenIndices = reshape({ inputs: { x: indices }, backend, attrs: { shape: [numUpdates, sliceRank] } });\n    const flattenX = reshape({ inputs: { x: updates }, backend, attrs: { shape: [numUpdates, sliceSize] } });\n    const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n    const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n    const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape } });\n    backend.disposeIntermediateTensorInfo(flattenIndices);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(res);\n    backend.disposeIntermediateTensorInfo(defaultValue);\n    return reshaped;\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'webgl',\n    kernelFunc: scatterNd\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport class SearchSortedProgram {\n    constructor(batchSize, numInputs, numValues, side) {\n        this.variableNames = ['sortedSequence', 'values'];\n        this.customUniforms = [{ name: 'numInputs', type: 'int' }];\n        this.outputShape = [batchSize, numValues];\n        const webGL2LoopHead = 'while (left < right) {';\n        // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n        // iterations.\n        const webGL1LoopHead = `for (int i = 0; i < ${Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n        const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n            webGL1LoopHead;\n        // left corresponds to lower bound and right to upper bound.\n        const boundComparator = side === 'left' ? '<' : '<=';\n        this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n    }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SearchSorted } from '@tensorflow/tfjs-core';\nimport { SearchSortedProgram } from '../search_sorted_gpu';\nexport function searchSorted(args) {\n    const { inputs, backend, attrs } = args;\n    const { sortedSequence, values } = inputs;\n    const { side } = attrs;\n    const program = new SearchSortedProgram(sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n    const customValues = [[sortedSequence.shape[1]]];\n    return backend.runWebGLProgram(program, [sortedSequence, values], 'int32', customValues);\n}\nexport const searchSortedConfig = {\n    kernelName: SearchSorted,\n    backendName: 'webgl',\n    kernelFunc: searchSorted,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n    constructor(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        let cCoords;\n        let abCoords;\n        if (rank > 4) {\n            throw Error(`Where for rank ${rank} is not yet supported`);\n        }\n        if (rank === 1) {\n            abCoords = `resRC`;\n            cCoords = `resRC`;\n        }\n        else {\n            const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            const cCoordVars = [];\n            const abCoordVars = [];\n            for (let i = 0; i < shape.length; i++) {\n                abCoordVars.push(`${currentCoords[i]}`);\n                if (i < cRank) {\n                    cCoordVars.push(`${currentCoords[i]}`);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        const dtype = getCoordsDataType(rank);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType } from '@tensorflow/tfjs-core';\nimport { SelectProgram } from '../select_gpu';\nexport function select(args) {\n    const { inputs, backend } = args;\n    const { condition, t, e } = inputs;\n    const program = new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n    return backend.runWebGLProgram(program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\nexport const selectConfig = {\n    kernelName: Select,\n    backendName: 'webgl',\n    kernelFunc: select\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Selu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\nexport const selu = unaryKernelFunc({ opSnippet: SELU });\nexport const seluConfig = {\n    kernelName: Selu,\n    backendName: 'webgl',\n    kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { sigmoidImplCPU } from '../kernel_utils/shared';\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n    opSnippet: SIGMOID,\n    packedOpSnippet: SIGMOID_PACKED,\n    cpuKernelImpl: sigmoidImplCPU\n});\nexport const sigmoidConfig = {\n    kernelName: Sigmoid,\n    backendName: 'webgl',\n    kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sign } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\nexport const sign = unaryKernelFunc({ opSnippet: SIGN });\nexport const signConfig = {\n    kernelName: Sign,\n    backendName: 'webgl',\n    kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sin } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\nexport const sin = unaryKernelFunc({ opSnippet: SIN });\nexport const sinConfig = {\n    kernelName: Sin,\n    backendName: 'webgl',\n    kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nexport const sinh = unaryKernelFunc({ opSnippet: SINH });\nexport const sinhConfig = {\n    kernelName: Sinh,\n    backendName: 'webgl',\n    kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\nexport const softplus = unaryKernelFunc({ opSnippet: SOFTPLUS });\nexport const softplusConfig = {\n    kernelName: Softplus,\n    backendName: 'webgl',\n    kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2 } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport const spaceToBatchND = (args) => {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n        'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const toDispose = [];\n    const paddedX = padV2({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapedPaddedX = reshape({ inputs: { x: paddedX }, backend, attrs: { shape: reshapedPaddedShape } });\n    const paddedXT = transpose({\n        inputs: { x: reshapedPaddedX },\n        backend,\n        attrs: { perm: permutedReshapedPaddedPermutation }\n    });\n    const result = reshape({ inputs: { x: paddedXT }, backend, attrs: { shape: flattenShape } });\n    toDispose.push(paddedX);\n    toDispose.push(reshapedPaddedX);\n    toDispose.push(paddedXT);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n};\nexport const spaceToBatchNDConfig = {\n    kernelName: SpaceToBatchND,\n    backendName: 'webgl',\n    kernelFunc: spaceToBatchND\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseFillEmptyRows } from '@tensorflow/tfjs-core';\nimport { sparseFillEmptyRowsImplCPU } from '../kernel_utils/shared';\nexport function sparseFillEmptyRows(args) {\n    const { inputs, backend } = args;\n    const { indices, values, denseShape, defaultValue } = inputs;\n    if (denseShape.shape.length !== 1) {\n        throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n    }\n    if (indices.shape.length !== 2) {\n        throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n    }\n    if (values.shape.length !== 1) {\n        throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n    }\n    if (defaultValue.shape.length !== 0) {\n        throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n    }\n    const $indices = backend.readSync(indices.dataId);\n    const $values = backend.readSync(values.dataId);\n    const $denseShape = backend.readSync(denseShape.dataId);\n    const $defaultValue = backend.readSync(defaultValue.dataId)[0];\n    const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImplCPU($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);\n    return [\n        backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n        backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues),\n        backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map((value) => Number(value)))),\n        backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap)),\n    ];\n}\nexport const sparseFillEmptyRowsConfig = {\n    kernelName: SparseFillEmptyRows,\n    backendName: 'webgl',\n    kernelFunc: sparseFillEmptyRows,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImplCPU } from '../kernel_utils/shared';\nexport function sparseReshape(args) {\n    const { inputs, backend } = args;\n    const { inputIndices, inputShape, newShape } = inputs;\n    if (inputIndices.shape.length !== 2) {\n        throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);\n    }\n    if (inputShape.shape.length !== 1) {\n        throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);\n    }\n    if (newShape.shape.length !== 1) {\n        throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n    }\n    const $inputShape = Array.from(backend.readSync(inputShape.dataId));\n    const $inputIndices = backend.readSync(inputIndices.dataId);\n    const targetShape = Array.from(backend.readSync(newShape.dataId));\n    const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n    return [\n        backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n        backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n    ];\n}\nexport const sparseReshapeConfig = {\n    kernelName: SparseReshape,\n    backendName: 'webgl',\n    kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n    const { inputs, backend } = args;\n    const { data, indices, segmentIds } = inputs;\n    if (data.shape.length < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if (indices.shape.length !== 1) {\n        throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n    }\n    if (segmentIds.shape.length !== 1) {\n        throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n    }\n    const $data = backend.readSync(data.dataId);\n    const $indices = backend.readSync(indices.dataId);\n    const $segmentIds = backend.readSync(segmentIds.dataId);\n    const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);\n    return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentMeanConfig = {\n    kernelName: SparseSegmentMean,\n    backendName: 'webgl',\n    kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentSum(args) {\n    const { inputs, backend } = args;\n    const { data, indices, segmentIds } = inputs;\n    if (data.shape.length < 1) {\n        throw new Error(`Data should be at least 1 dimensional but received scalar`);\n    }\n    if (indices.shape.length !== 1) {\n        throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n    }\n    if (segmentIds.shape.length !== 1) {\n        throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n    }\n    const $data = backend.readSync(data.dataId);\n    const $indices = backend.readSync(indices.dataId);\n    const $segmentIds = backend.readSync(segmentIds.dataId);\n    const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds);\n    return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentSumConfig = {\n    kernelName: SparseSegmentSum,\n    backendName: 'webgl',\n    kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    if (sparseValues.dtype === 'string') {\n        const indicesBuf = backend.bufferSync(sparseIndices);\n        const updatesBuf = backend.bufferSync(sparseValues);\n        const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n        const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n        return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n    }\n    const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n    const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n    const reshaped = reshape({ inputs: { x: res }, backend, attrs: { shape: outputShape } });\n    backend.disposeIntermediateTensorInfo(res);\n    return reshaped;\n}\nexport const sparseToDenseConfig = {\n    kernelName: SparseToDense,\n    backendName: 'webgl',\n    kernelFunc: sparseToDense\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { numOrSizeSplits, axis } = attrs;\n    const $axis = util.parseAxisParam(axis, x.shape)[0];\n    const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    const xRank = x.shape.length;\n    const begin = new Array(xRank).fill(0);\n    const size = x.shape.slice();\n    return splitSizes.map(s => {\n        const sliceSize = [...size];\n        sliceSize[$axis] = s;\n        const sliceT = slice({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });\n        begin[$axis] += s;\n        return sliceT;\n    });\n}\nexport const splitVConfig = {\n    kernelName: SplitV,\n    backendName: 'webgl',\n    kernelFunc: splitV\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { sqrtImplCPU } from '../kernel_utils/shared';\nconst SQRT = `return sqrt(x);`;\nexport const sqrt = unaryKernelFunc({ opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU });\nexport const sqrtConfig = {\n    kernelName: Sqrt,\n    backendName: 'webgl',\n    kernelFunc: sqrt\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SQUARE = `return x * x;`;\nexport const square = unaryKernelFunc({ opSnippet: SQUARE });\nexport const squareConfig = {\n    kernelName: Square,\n    backendName: 'webgl',\n    kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport const squaredDifference = binaryKernelFunc({ opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE });\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'webgl',\n    kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nexport function step({ inputs, attrs, backend }) {\n    const { x } = inputs;\n    const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n    const program = new UnaryOpProgram(x.shape, opSnippet);\n    return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const stepConfig = {\n    kernelName: Step,\n    backendName: 'webgl',\n    kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n    constructor(begin, strides, size) {\n        this.variableNames = ['x'];\n        this.outputShape = size;\n        const rank = size.length;\n        const inputDtype = getCoordsDataType(size.length);\n        const dtype = getCoordsDataType(size.length);\n        let newCoords = '';\n        if (rank === 1) {\n            newCoords = 'coords * strides + begin';\n        }\n        else {\n            let outputAxis = 0;\n            newCoords =\n                size.map((_, i) => {\n                    outputAxis++;\n                    return size.length === 1 ?\n                        `coords * strides[${i}] + begin[${i}]` :\n                        `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n                })\n                    .join(',');\n        }\n        this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    let result;\n    if (isIdentity) {\n        // Optimization #1, slice is a no-op plus reshape\n        result = reshape({ inputs: { x }, backend, attrs: { shape: finalShape } });\n    }\n    else if (sliceDim0 || isSimpleSlice) {\n        // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n        util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n        const size = slice_util.computeOutShape($begin, $end, $strides);\n        // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n        const sliced = slice({ inputs: { x }, backend, attrs: { begin: $begin, size } });\n        result =\n            reshape({ inputs: { x: sliced }, backend, attrs: { shape: finalShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else {\n        const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n        if (shouldExecuteOnCPU) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            const values = backend.readSync(x.dataId);\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            const xBuf = buffer(x.shape, x.dtype, values);\n            const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n            result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n        }\n        else {\n            const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);\n            result = backend.runWebGLProgram(program, [x], x.dtype);\n        }\n    }\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: finalShape } });\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'webgl',\n    kernelFunc: stridedSlice\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nexport function stringNGrams(args) {\n    const { inputs, backend, attrs } = args;\n    const { separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences } = attrs;\n    const { data, dataSplits } = inputs;\n    const $data = backend.readSync(data.dataId);\n    const $dataSplits = backend.readSync(dataSplits.dataId);\n    const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n    return [\n        backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n        backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n    ];\n}\nexport const stringNGramsConfig = {\n    kernelName: StringNGrams,\n    backendName: 'webgl',\n    kernelFunc: stringNGrams,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImplCPU } from '../kernel_utils/shared';\nexport function stringSplit(args) {\n    const { inputs, backend, attrs } = args;\n    const { skipEmpty } = attrs;\n    const { input, delimiter } = inputs;\n    if (input.dtype !== 'string') {\n        throw new Error('Input must be of datatype string');\n    }\n    if (input.shape.length !== 1) {\n        throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n    }\n    if (delimiter.shape.length !== 0) {\n        throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n    }\n    const $input = backend.readSync(input.dataId);\n    const $delimiter = backend.readSync(delimiter.dataId)[0];\n    const [indices, values, shape] = stringSplitImplCPU($input, $delimiter, skipEmpty);\n    const outputSize = values.length;\n    return [\n        backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n        backend.makeTensorInfo([outputSize], 'string', values),\n        backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n    ];\n}\nexport const stringSplitConfig = {\n    kernelName: StringSplit,\n    backendName: 'webgl',\n    kernelFunc: stringSplit,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringToHashBucketFast } from '@tensorflow/tfjs-core';\nimport { stringToHashBucketFastImplCPU } from '../kernel_utils/shared';\nexport function stringToHashBucketFast(args) {\n    const { inputs, backend, attrs } = args;\n    const { numBuckets } = attrs;\n    const { input } = inputs;\n    if (input.dtype !== 'string') {\n        throw new Error('Input must be of datatype string');\n    }\n    if (numBuckets <= 0) {\n        throw new Error(`Number of buckets must be at least 1`);\n    }\n    const $input = backend.readSync(input.dataId);\n    const output = stringToHashBucketFastImplCPU($input, numBuckets);\n    return backend.makeTensorInfo(input.shape, 'int32', output);\n}\nexport const stringToHashBucketFastConfig = {\n    kernelName: StringToHashBucketFast,\n    backendName: 'webgl',\n    kernelFunc: stringToHashBucketFast,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst TAN = `return tan(x);`;\nexport const tan = unaryKernelFunc({ opSnippet: TAN });\nexport const tanConfig = {\n    kernelName: Tan,\n    backendName: 'webgl',\n    kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\nexport const tanh = unaryKernelFunc({ opSnippet: TANH });\nexport const tanhConfig = {\n    kernelName: Tanh,\n    backendName: 'webgl',\n    kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n    constructor(aShape, reps) {\n        this.variableNames = ['A'];\n        const outputShape = new Array(aShape.length);\n        for (let i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n    }\n}\nfunction getSourceCoords(aShape) {\n    const rank = aShape.length;\n    if (rank > 5) {\n        throw Error(`Tile for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n        return `imod(resRC, ${aShape[0]})`;\n    }\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n    }\n    return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n    const { inputs, backend, attrs } = params;\n    const { x } = inputs;\n    const { reps } = attrs;\n    // tile gpu program cannot handle rank > 5 case.\n    if (x.dtype === 'string' || x.shape.length > 5) {\n        // Even thought string tensor is always on CPU, just to be consistent on how\n        // to access tensor data.\n        const data = backend.readSync(x.dataId);\n        const value = x.dtype === 'string' ?\n            data.map(d => util.decodeString(d)) :\n            data;\n        const buf = buffer(x.shape, x.dtype, value);\n        const outBuf = tileImplCPU(buf, reps);\n        return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const program = new TileProgram(x.shape, reps);\n    const output = backend.runWebGLProgram(program, [x], x.dtype);\n    return output;\n}\nexport const tileConfig = {\n    kernelName: Tile,\n    backendName: 'webgl',\n    kernelFunc: tile,\n};\n","// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram {\n    /**\n     * @param shape desired output shape (can be larger than input shape, output\n     *                                    will be padded with -Infinity)\n     */\n    constructor(shape) {\n        this.variableNames = ['x', 'indices'];\n        // |n| Size of the original input of TopK.\n        // |firstPass|indicates if this is the first time swap is being used which\n        // means no indices input containing the top K is present yet.\n        // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n        this.customUniforms = [\n            { name: 'n', type: 'int' },\n            { name: 'firstPass', type: 'int' },\n            { name: 'negativeInf', type: 'float' },\n            { name: 'dir', type: 'int' },\n            { name: 'inc', type: 'int' }\n        ];\n        this.outputShape = shape;\n        this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n    }\n}\nexport class MergeProgram {\n    /**\n     * @param shape desired output shape (must be half of the input size)\n     */\n    constructor(shape) {\n        this.variableNames = ['x', 'indices'];\n        // |n| Size of the original input of TopK\n        // |firstPass| indicates if this is the first time swap is being used which\n        // means no indices input containing the top K is present yet.\n        // |k| Top k elements desired\n        this.customUniforms = [\n            { name: 'n', type: 'int' },\n            { name: 'firstPass', type: 'int' },\n            { name: 'k', type: 'int' }\n        ];\n        this.outputShape = shape;\n        this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, TopK, util } from '@tensorflow/tfjs-core';\nimport { topKImplCPU } from '../kernel_utils/shared';\nimport { MergeProgram, SwapProgram } from '../top_k_gpu';\nimport { fill } from './Fill';\nimport { gatherV2 } from './GatherV2';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nfunction disposeIntermediateTensorInfoOrNull(backend, tensorInfo) {\n    if (tensorInfo !== null) {\n        backend.disposeIntermediateTensorInfo(tensorInfo);\n    }\n}\nfunction roundUpToPow2(num) {\n    let pow2 = 1;\n    while (pow2 < num) {\n        pow2 *= 2;\n    }\n    return pow2;\n}\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { k, sorted } = attrs;\n    // Empirically determined constant used to determine last dim threshold for\n    // handing off execution to the CPU.\n    const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n    // Empirically determined constant used to determine k threshold for handing\n    // off execution to the CPU.\n    const TOPK_K_CPU_HANDOFF_THRESHOLD = env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n    const xShape = x.shape;\n    const lastDim = xShape[xShape.length - 1];\n    if (backend.shouldExecuteOnCPU([x]) ||\n        lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n        k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n        const xVals = backend.readSync(x.dataId);\n        const [allTopKVals, allTopKIndices] = topKImplCPU(xVals, xShape, x.dtype, k, sorted);\n        return [\n            backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n            backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n        ];\n    }\n    if (k === 0) {\n        xShape[xShape.length - 1] = 0;\n        return [\n            backend.makeTensorInfo(xShape, x.dtype, []),\n            backend.makeTensorInfo(xShape, 'int32', [])\n        ];\n    }\n    if (lastDim === 1 /* firstPass */) {\n        return [\n            x, fill({ attrs: { shape: xShape, dtype: 'int32', value: 0 }, backend })\n        ];\n    }\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const xSize = util.sizeFromShape(xShape);\n    const batch = xSize / lastDim;\n    const x2D = reshape({ inputs: { x: xUnPacked }, attrs: { shape: [batch, lastDim] }, backend });\n    if (xIsPacked) {\n        disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n    }\n    const kPow2 = roundUpToPow2(k);\n    const lastDimPow2 = roundUpToPow2(lastDim);\n    // Only the indices containing the top K are kept at every step to reduce\n    // number of outputs in the GPU algorithms, so once the final set of indices\n    // is computed then gather is used to grab the corresponding values\n    // from the original input.\n    let indices = null;\n    // GPU algorithm always takes in an indices input but this input is not used\n    // on the first run of a GPU algorithm, therefore if indices is null we simply\n    // pass in x2D instead of it but the value will not actually be used\n    const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n    const runSwap = (dir, inc, shape) => {\n        const inputs = getInputs();\n        const program = new SwapProgram(shape);\n        const fistPass = indices === null ? 1 : 0;\n        const customValues = [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n        const prevIndices = indices;\n        indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n        disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    };\n    // Step 1: local sort\n    for (let len = 1; len < kPow2; len *= 2) {\n        const dir = len * 2;\n        for (let inc = len; inc >= 1; inc /= 2) {\n            runSwap(dir, inc, [batch, lastDimPow2]);\n        }\n    }\n    // Step 2: merge\n    for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n        const inputs = getInputs();\n        const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n        const firstPass = indices === null ? 1 : 0;\n        const customValues = [[lastDim], [firstPass], [kPow2]];\n        const prevIndices = indices;\n        indices =\n            backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n        disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n        // Step 3: rebuild\n        const len = kPow2 / 2;\n        const dir = len * 2;\n        for (let inc = len; inc >= 1; inc /= 2) {\n            runSwap(dir, inc, indices.shape);\n        }\n    }\n    // Keep only the requested top K results instead of kPow2\n    let prevIndices = indices;\n    indices = slice({ inputs: { x: indices }, backend, attrs: { begin: 0, size: [batch, k] } });\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    // Gather values on last dimension\n    let values = gatherV2({ inputs: { x: x2D, indices }, backend, attrs: { axis: 1, batchDims: 1 } });\n    disposeIntermediateTensorInfoOrNull(backend, x2D);\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const newShape = xShape.slice(0, -1);\n    newShape.push(k);\n    prevIndices = indices;\n    indices = reshape({ inputs: { x: indices }, attrs: { shape: newShape }, backend });\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    const prevValues = values;\n    values = reshape({ inputs: { x: values }, attrs: { shape: newShape }, backend });\n    disposeIntermediateTensorInfoOrNull(backend, prevValues);\n    return [values, indices];\n}\nexport const topKConfig = {\n    kernelName: TopK,\n    backendName: 'webgl',\n    kernelFunc: topK\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class TransformProgram {\n    constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {\n        this.variableNames = ['Image', 'Transforms'];\n        this.outputShape = outShape;\n        const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n        let fillModeId;\n        switch (fillMode) {\n            case 'constant':\n                fillModeId = 1;\n                break;\n            case 'reflect':\n                fillModeId = 2;\n                break;\n            case 'wrap':\n                fillModeId = 3;\n                break;\n            case 'nearest':\n                fillModeId = 4;\n                break;\n            default:\n                fillModeId = 1;\n                break;\n        }\n        this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n    }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform } from '@tensorflow/tfjs-core';\nimport { TransformProgram } from '../transform_gpu';\nexport function transform(args) {\n    const { inputs, backend, attrs } = args;\n    const { image, transforms } = inputs;\n    const { interpolation, fillMode, fillValue, outputShape } = attrs;\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n    const outShape = [batch, outHeight, outWidth,\n        numChannels];\n    const program = new TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n    return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\nexport const transformConfig = {\n    kernelName: Transform,\n    backendName: 'webgl',\n    kernelFunc: transform\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { uniqueImplCPU } from '../kernel_utils/shared';\nimport { assertNotComplex } from '../webgl_util';\nexport function unique(args) {\n    const { inputs, attrs, backend } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    assertNotComplex(x, 'unique');\n    // For now, always forward calculation to the CPU backend.\n    console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');\n    const values = backend.readSync(x.dataId);\n    const { outputValues, outputShape, indices } = uniqueImplCPU(values, axis, x.shape, x.dtype);\n    return [\n        backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n        backend.makeTensorInfo([indices.length], 'int32', indices),\n    ];\n}\nexport const uniqueConfig = {\n    kernelName: Unique,\n    backendName: 'webgl',\n    kernelFunc: unique,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n    const { inputs, backend, attrs } = args;\n    const { value } = inputs;\n    let { axis } = attrs;\n    if (axis < 0) {\n        axis += value.shape.length;\n    }\n    const x = value;\n    const xRank = x.shape.length;\n    const num = value.shape[axis];\n    const outShape = new Array(xRank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < xRank; i++) {\n        if (i !== axis) {\n            outShape[outIndex++] = x.shape[i];\n        }\n    }\n    const toDispose = [];\n    const begin = new Array(xRank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n        begin[axis] = i;\n        const sliced = slice({ inputs: { x }, backend, attrs: { begin, size } });\n        const reshaped = reshape({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        res[i] = reshaped;\n        toDispose.push(sliced);\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return res;\n}\nexport const unpackConfig = {\n    kernelName: Unpack,\n    backendName: 'webgl',\n    kernelFunc: unpack\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class SegmentOpProgram {\n    constructor(segOpInfo, segOpType) {\n        this.variableNames = ['x', 'segmentIds'];\n        const windowSize = segOpInfo.windowSize;\n        const batchSize = segOpInfo.batchSize;\n        const inSize = segOpInfo.inSize;\n        const numSegments = segOpInfo.numSegments;\n        const outSize = numSegments * Math.ceil(inSize / windowSize);\n        this.outputShape = [batchSize, outSize];\n        const initializationValue = '0.0';\n        const returnValue = `sumValue`;\n        const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        const windowSizeVec4Remainder = windowSize % 4;\n        const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n        let checkValueOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n        }\n        let checkSegmentIdOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n        }\n        this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n    }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from '../segment_gpu';\nimport { range } from './Range';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, segmentIds } = inputs;\n    const { numSegments } = attrs;\n    const xRank = x.shape.length;\n    const toDispose = [];\n    let axis = 0;\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        toDispose.push(permutedX);\n        axis = backend_util.getInnerMostAxes(1, xRank)[0];\n    }\n    const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = reshape({ inputs: { x: permutedX }, backend, attrs: { shape: [-1, inSize] } });\n    toDispose.push(a2D);\n    const outputDType = sumOutType(x.dtype);\n    const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        const segOpInfo = { windowSize, inSize, batchSize, numSegments };\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        const rangeInfo = range({\n            backend,\n            attrs: { start: 0, stop: numSegments, step: 1, dtype: 'float32' }\n        });\n        const tileInfo = tile({\n            inputs: { x: rangeInfo },\n            backend,\n            attrs: { reps: [inSize / windowSize] }\n        });\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n        const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n    };\n    const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n    const reshaped = reshape({ inputs: { x: segOpResult }, backend, attrs: { shape: outShape } });\n    let result = reshaped;\n    if (permutation != null) {\n        toDispose.push(reshaped);\n        const perm = backend_util.getUndoAxesPermutation(permutation);\n        result = transpose({ inputs: { x: result }, backend, attrs: { perm } });\n    }\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const unsortedSegmentSumConfig = {\n    kernelName: UnsortedSegmentSum,\n    backendName: 'webgl',\n    kernelFunc: unsortedSegmentSum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { _fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { acosConfig } from './kernels/Acos';\nimport { acoshConfig } from './kernels/Acosh';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { allConfig } from './kernels/All';\nimport { anyConfig } from './kernels/Any';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { argMinConfig } from './kernels/ArgMin';\nimport { asinConfig } from './kernels/Asin';\nimport { asinhConfig } from './kernels/Asinh';\nimport { atanConfig } from './kernels/Atan';\nimport { atan2Config } from './kernels/Atan2';\nimport { atanhConfig } from './kernels/Atanh';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { avgPool3DConfig } from './kernels/AvgPool3D';\nimport { avgPool3DGradConfig } from './kernels/AvgPool3DGrad';\nimport { avgPoolGradConfig } from './kernels/AvgPoolGrad';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { batchNormConfig } from './kernels/BatchNorm';\nimport { batchToSpaceNDConfig } from './kernels/BatchToSpaceND';\nimport { bincountConfig } from './kernels/Bincount';\nimport { broadcastArgsConfig } from './kernels/BroadcastArgs';\nimport { castConfig } from './kernels/Cast';\nimport { ceilConfig } from './kernels/Ceil';\nimport { clipByValueConfig } from './kernels/ClipByValue';\nimport { complexConfig } from './kernels/Complex';\nimport { complexAbsConfig } from './kernels/ComplexAbs';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropFilterConfig } from './kernels/Conv2DBackpropFilter';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { conv3DConfig } from './kernels/Conv3D';\nimport { conv3DBackpropFilterV2Config } from './kernels/Conv3DBackpropFilterV2';\nimport { conv3DBackpropInputConfig } from './kernels/Conv3DBackpropInputV2';\nimport { cosConfig } from './kernels/Cos';\nimport { coshConfig } from './kernels/Cosh';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumprodConfig } from './kernels/Cumprod';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { denseBincountConfig } from './kernels/DenseBincount';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { depthwiseConv2dNativeBackpropFilterConfig } from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport { depthwiseConv2dNativeBackpropInputConfig } from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport { diagConfig } from './kernels/Diag';\nimport { dilation2DConfig } from './kernels/Dilation2D';\nimport { einsumConfig } from './kernels/Einsum';\nimport { eluConfig } from './kernels/Elu';\nimport { eluGradConfig } from './kernels/EluGrad';\nimport { equalConfig } from './kernels/Equal';\nimport { erfConfig } from './kernels/Erf';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { expm1Config } from './kernels/Expm1';\nimport { fftConfig } from './kernels/FFT';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fromPixelsConfig } from './kernels/FromPixels';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { ifftConfig } from './kernels/IFFT';\nimport { imagConfig } from './kernels/Imag';\nimport { isFiniteConfig } from './kernels/IsFinite';\nimport { isInfConfig } from './kernels/IsInf';\nimport { isNaNConfig } from './kernels/IsNaN';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { linSpaceConfig } from './kernels/LinSpace';\nimport { logConfig } from './kernels/Log';\nimport { log1pConfig } from './kernels/Log1p';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { logicalNotConfig } from './kernels/LogicalNot';\nimport { logicalOrConfig } from './kernels/LogicalOr';\nimport { LRNConfig } from './kernels/LRN';\nimport { LRNGradConfig } from './kernels/LRNGrad';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { maxPool3DConfig } from './kernels/MaxPool3D';\nimport { maxPool3DGradConfig } from './kernels/MaxPool3DGrad';\nimport { maxPoolGradConfig } from './kernels/MaxPoolGrad';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { mirrorPadConfig } from './kernels/MirrorPad';\nimport { modConfig } from './kernels/Mod';\nimport { multinomialConfig } from './kernels/Multinomial';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { raggedGatherConfig } from './kernels/RaggedGather';\nimport { raggedTensorToTensorConfig } from './kernels/RaggedTensorToTensor';\nimport { rangeConfig } from './kernels/Range';\nimport { realConfig } from './kernels/Real';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reciprocalConfig } from './kernels/Reciprocal';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { resizeBilinearGradConfig } from './kernels/ResizeBilinearGrad';\nimport { resizeNearestNeighborConfig } from './kernels/ResizeNearestNeighbor';\nimport { resizeNearestNeighborGradConfig } from './kernels/ResizeNearestNeighborGrad';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { searchSortedConfig } from './kernels/SearchSorted';\nimport { selectConfig } from './kernels/Select';\nimport { seluConfig } from './kernels/Selu';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { signConfig } from './kernels/Sign';\nimport { sinConfig } from './kernels/Sin';\nimport { sinhConfig } from './kernels/Sinh';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { softplusConfig } from './kernels/Softplus';\nimport { spaceToBatchNDConfig } from './kernels/SpaceToBatchND';\nimport { sparseFillEmptyRowsConfig } from './kernels/SparseFillEmptyRows';\nimport { sparseReshapeConfig } from './kernels/SparseReshape';\nimport { sparseSegmentMeanConfig } from './kernels/SparseSegmentMean';\nimport { sparseSegmentSumConfig } from './kernels/SparseSegmentSum';\nimport { sparseToDenseConfig } from './kernels/SparseToDense';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { stringNGramsConfig } from './kernels/StringNGrams';\nimport { stringSplitConfig } from './kernels/StringSplit';\nimport { stringToHashBucketFastConfig } from './kernels/StringToHashBucketFast';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanConfig } from './kernels/Tan';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transformConfig } from './kernels/Transform';\nimport { transposeConfig } from './kernels/Transpose';\nimport { uniqueConfig } from './kernels/Unique';\nimport { unpackConfig } from './kernels/Unpack';\nimport { unsortedSegmentSumConfig } from './kernels/UnsortedSegmentSum';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [\n    _fusedMatMulConfig,\n    absConfig,\n    acosConfig,\n    acoshConfig,\n    addConfig,\n    addNConfig,\n    allConfig,\n    anyConfig,\n    argMaxConfig,\n    argMinConfig,\n    asinConfig,\n    asinhConfig,\n    atanConfig,\n    atan2Config,\n    atanhConfig,\n    avgPoolConfig,\n    avgPool3DConfig,\n    avgPool3DGradConfig,\n    avgPoolGradConfig,\n    batchMatMulConfig,\n    batchNormConfig,\n    batchToSpaceNDConfig,\n    bincountConfig,\n    broadcastArgsConfig,\n    castConfig,\n    ceilConfig,\n    clipByValueConfig,\n    complexConfig,\n    complexAbsConfig,\n    concatConfig,\n    conv2DConfig,\n    conv2DBackpropFilterConfig,\n    conv2DBackpropInputConfig,\n    conv3DConfig,\n    conv3DBackpropFilterV2Config,\n    conv3DBackpropInputConfig,\n    cosConfig,\n    coshConfig,\n    cropAndResizeConfig,\n    cumprodConfig,\n    cumsumConfig,\n    denseBincountConfig,\n    depthToSpaceConfig,\n    depthwiseConv2dNativeConfig,\n    depthwiseConv2dNativeBackpropFilterConfig,\n    depthwiseConv2dNativeBackpropInputConfig,\n    diagConfig,\n    dilation2DConfig,\n    einsumConfig,\n    eluConfig,\n    eluGradConfig,\n    equalConfig,\n    erfConfig,\n    expConfig,\n    expandDimsConfig,\n    expm1Config,\n    fftConfig,\n    fillConfig,\n    flipLeftRightConfig,\n    floorConfig,\n    floorDivConfig,\n    fromPixelsConfig,\n    fusedConv2DConfig,\n    fusedDepthwiseConv2DConfig,\n    gatherNdConfig,\n    gatherV2Config,\n    greaterConfig,\n    greaterEqualConfig,\n    identityConfig,\n    ifftConfig,\n    imagConfig,\n    isFiniteConfig,\n    isInfConfig,\n    isNaNConfig,\n    leakyReluConfig,\n    lessConfig,\n    lessEqualConfig,\n    linSpaceConfig,\n    logConfig,\n    log1pConfig,\n    logicalAndConfig,\n    logicalNotConfig,\n    logicalOrConfig,\n    LRNConfig,\n    LRNGradConfig,\n    maxConfig,\n    maximumConfig,\n    maxPoolConfig,\n    maxPool3DConfig,\n    maxPool3DGradConfig,\n    maxPoolGradConfig,\n    maxPoolWithArgmaxConfig,\n    meanConfig,\n    minConfig,\n    minimumConfig,\n    mirrorPadConfig,\n    modConfig,\n    multinomialConfig,\n    multiplyConfig,\n    negConfig,\n    nonMaxSuppressionV3Config,\n    nonMaxSuppressionV4Config,\n    nonMaxSuppressionV5Config,\n    notEqualConfig,\n    oneHotConfig,\n    onesLikeConfig,\n    packConfig,\n    padV2Config,\n    powConfig,\n    preluConfig,\n    prodConfig,\n    raggedGatherConfig,\n    raggedTensorToTensorConfig,\n    rangeConfig,\n    realConfig,\n    realDivConfig,\n    reciprocalConfig,\n    reluConfig,\n    relu6Config,\n    reshapeConfig,\n    resizeBilinearConfig,\n    resizeBilinearGradConfig,\n    resizeNearestNeighborConfig,\n    resizeNearestNeighborGradConfig,\n    reverseConfig,\n    rotateWithOffsetConfig,\n    roundConfig,\n    rsqrtConfig,\n    scatterNdConfig,\n    searchSortedConfig,\n    selectConfig,\n    seluConfig,\n    sigmoidConfig,\n    signConfig,\n    sinConfig,\n    sinhConfig,\n    sliceConfig,\n    softmaxConfig,\n    softplusConfig,\n    spaceToBatchNDConfig,\n    sparseFillEmptyRowsConfig,\n    sparseReshapeConfig,\n    sparseSegmentMeanConfig,\n    sparseSegmentSumConfig,\n    sparseToDenseConfig,\n    splitVConfig,\n    sqrtConfig,\n    squareConfig,\n    squaredDifferenceConfig,\n    stepConfig,\n    stridedSliceConfig,\n    stringNGramsConfig,\n    stringSplitConfig,\n    stringToHashBucketFastConfig,\n    subConfig,\n    sumConfig,\n    tanConfig,\n    tanhConfig,\n    tileConfig,\n    topKConfig,\n    transformConfig,\n    transposeConfig,\n    uniqueConfig,\n    unpackConfig,\n    unsortedSegmentSumConfig,\n    zerosLikeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// All exports from this package should be in base.\nexport * from './base';\nimport './register_all_kernels';\n","var A=(h,t)=>()=>(t||h((t={exports:{}}).exports,t),t.exports);var u=(h,t,e)=>new Promise((i,s)=>{var a=r=>{try{o(e.next(r))}catch(l){s(l)}},n=r=>{try{o(e.throw(r))}catch(l){s(l)}},o=r=>r.done?i(r.value):Promise.resolve(r.value).then(a,n);o((e=e.apply(h,t)).next())});var C=A((et,O)=>{O.exports={version:\"1.8.0\",license:\"MIT\",main:\"dist/index.cjs.js\",typings:\"dist/index.d.ts\",files:[\"dist\",\"src/tflite\",\"src/models\"],scripts:{start:'concurrently \"yarn dev\" \"yarn types\"',dev:\"node ../../scripts/dev\",\"build:only\":\"node ../../scripts/build\",build:\"yarn build:only && yarn types:build\",types:\"tsc -w\",\"types:build\":\"tsc -p tsconfig.json\",test:\"jest --maxWorkers=1 --passWithNoTests\",lint:\"eslint -c ../../.eslintrc .\",\"lint:fix\":\"yarn lint --fix\",prepare:\"yarn build\",size:\"size-limit\",analyze:\"size-limit --why\",format:\"prettier --write src/**/*.ts\"},peerDependencies:{\"@100mslive/hms-video\":\"^0.5.2\"},name:\"@100mslive/hms-virtual-background\",author:\"ashish17\",module:\"dist/index.js\",devDependencies:{\"@100mslive/hms-video\":\"0.6.0\"},dependencies:{\"@tensorflow/tfjs-backend-webgl\":\"^3.3.0\",\"@tensorflow/tfjs-core\":\"^3.3.0\",\"@webassemblyjs/helper-wasm-bytecode\":\"1.11.1\",\"@webassemblyjs/wasm-gen\":\"1.11.1\",\"gifuct-js\":\"^2.1.2\",\"wasm-check\":\"^2.0.2\"},eslintIgnore:[\"tflite.js\",\"tflite-simd.js\",\"tflite.wasm\",\"tflite-simd.wasm\",\"defineTFLite.ts\",\"importing.test.ts\"],gitHead:\"d5cc829f7c2177b8db707f04b8fe95246167fdcd\"}});import{decompressFrames as N,parseGIF as $}from\"gifuct-js\";import{HMSPluginUnsupportedTypes as U,HMSVideoPluginType as z}from\"@100mslive/hms-video\";import\"@tensorflow/tfjs-backend-webgl\";var _=C(),F=`https://unpkg.com/${_.name}/src`,M=\"VBProcessor\",R=\"tflite/tflite.js\",j=\"tflite/tflite-simd.js\",G=\"models/selfie_segmentation_landscape.tflite\",S=h=>new Promise(function(t,e){let i=document.createElement(\"script\");i.src=h,i.onload=t,i.onerror=e,document.head.appendChild(i)}),W=()=>u(void 0,null,function*(){let h,t=`${F}/${j}`;yield S(t);try{h=yield createTFLiteSIMDModule()}catch(e){console.warn(\"SIMD not supported. You may experience poor virtual background effect.\"),t=`${F}/${R}`,yield S(t),h=yield createTFLiteModule()}return h}),H=()=>u(void 0,null,function*(){let h=`${F}/${G}`,[t,e]=yield Promise.all([W(),fetch(h)]),i=yield e.arrayBuffer(),s=t._getModelBufferMemoryOffset();return t.HEAPU8.set(new Uint8Array(i),s),t._loadModel(i.byteLength),console.debug(M,\"Input memory offset:\",t._getInputMemoryOffset()),console.debug(M,\"Input height:\",t._getInputHeight()),console.debug(M,\"Input width:\",t._getInputWidth()),console.debug(M,\"Input channels:\",t._getInputChannelCount()),t});var y=\"VBProcessor\",q=33,J=C(),Y=214,Q=855,K=120,X=720,Z=class{constructor(t,e=!1){this.backgroundType=\"none\";this.background=t,this.enableSharpening=e,this.backgroundImage=null,this.backgroundVideo=null,this.personMaskWidth=256,this.personMaskHeight=144,this.isVirtualBackground=!1,this.blurValue=\"10px\",this.loadModelCalled=!1,this.tfLite=null,this.modelName=\"landscape-segmentation\",this.outputCtx=null,this.input=null,this.output=null,this.timerID=0,this.imageAspectRatio=1,this.personMaskPixelCount=this.personMaskWidth*this.personMaskHeight,this.personMask=new ImageData(this.personMaskWidth,this.personMaskHeight),this.personMaskCanvas=document.createElement(\"canvas\"),this.personMaskCanvas.width=this.personMaskWidth,this.personMaskCanvas.height=this.personMaskHeight,this.personMaskCtx=this.personMaskCanvas.getContext(\"2d\"),this.filters={},this.gifFrames=null,this.gifFramesIndex=0,this.gifFrameImageData=null,this.tempGifCanvas=document.createElement(\"canvas\"),this.tempGifContext=this.tempGifCanvas.getContext(\"2d\"),this.giflocalCount=0,this.enableSharpening=e,this.log(y,\"Virtual Background plugin created\"),this.setBackground(this.background)}init(){return u(this,null,function*(){this.loadModelCalled?yield this.tfLitePromise:(this.log(y,\"PREVIOUS LOADED MODEL IS \",this.tfLite),this.loadModelCalled=!0,this.tfLitePromise=H(),this.tfLite=yield this.tfLitePromise),this.enableSharpening&&this.initSharpenFilter()})}isSupported(){return navigator.userAgent.indexOf(\"Chrome\")!==-1||navigator.userAgent.indexOf(\"Firefox\")!==-1||navigator.userAgent.indexOf(\"Edg\")!==-1||navigator.userAgent.indexOf(\"Edge\")!==-1}checkSupport(){let t={};return[\"Chrome\",\"Firefox\",\"Edg\",\"Edge\"].some(e=>navigator.userAgent.indexOf(e)!==-1)?t.isSupported=!0:(t.isSupported=!1,t.errType=U.PLATFORM_NOT_SUPPORTED,t.errMsg=\"browser not supported for plugin, see docs\"),t}getName(){return J.name}getPluginType(){return z.TRANSFORM}setBackground(t){return u(this,null,function*(){if(t!==\"\")if(t===\"none\")this.log(y,\"setting background to :\",t),this.background=\"none\",this.backgroundType=\"none\",this.isVirtualBackground=!1;else if(t===\"blur\")this.log(y,\"setting background to :\",t),this.background=\"blur\",this.backgroundType=\"blur\",this.isVirtualBackground=!1;else if(t instanceof HTMLImageElement){this.log(\"setting background to image\",t);let e=yield this.setImage(t);if(!e||!e.complete||!e.naturalHeight)throw new Error(\"Invalid image. Provide a valid and successfully loaded HTMLImageElement\");this.isVirtualBackground=!0,this.backgroundImage=e,this.backgroundType=\"image\"}else if(t instanceof HTMLVideoElement)this.log(\"setting background to video\",t),this.backgroundVideo=t,this.backgroundVideo.crossOrigin=\"anonymous\",this.backgroundVideo.muted=!0,this.backgroundVideo.loop=!0,this.backgroundVideo.oncanplaythrough=()=>u(this,null,function*(){this.backgroundVideo!=null&&(yield this.backgroundVideo.play(),this.isVirtualBackground=!0,this.backgroundType=\"video\")});else if(console.log(\"setting gif to background\"),this.gifFrames=yield this.setGiF(t),this.gifFrames!=null&&this.gifFrames.length>0)this.backgroundType=\"gif\",this.isVirtualBackground=!0;else throw new Error(\"Invalid background supplied, see the docs to check supported background type\");else throw new Error(\"Invalid background supplied, see the docs to check supported background type\")})}stop(){var t,e;this.isVirtualBackground&&((t=this.backgroundImage)==null||t.removeAttribute(\"src\"),(e=this.backgroundVideo)==null||e.removeAttribute(\"src\"),this.backgroundType===\"video\"&&(this.backgroundVideo.loop=!1,this.backgroundVideo=null)),this.outputCtx&&(this.outputCtx.fillStyle=\"rgb(0, 0, 0)\",this.outputCtx.fillRect(0,0,this.output.width,this.output.height)),this.gifFrameImageData=null,this.gifFrames=null,this.giflocalCount=0,this.gifFramesIndex=0}processVideoFrame(t,e,i){if(!t||!e)throw new Error(\"Plugin invalid input/output\");this.input=t,this.output=e;let s=e.getContext(\"2d\");if(s.canvas.width!==t.width&&(s.canvas.width=t.width),s.canvas.height!==t.height&&(s.canvas.height=t.height),this.backgroundType===\"video\"&&(this.backgroundVideo.width=t.width,this.backgroundVideo.height=t.height),this.outputCtx=s,this.imageAspectRatio=t.width/t.height,this.imageAspectRatio<=0)throw new Error(\"Invalid input width/height\");let a=()=>u(this,null,function*(){yield this.runSegmentation(i)});this.background===\"none\"&&!this.isVirtualBackground?(this.outputCtx.globalCompositeOperation=\"copy\",this.outputCtx.filter=\"none\",this.outputCtx.drawImage(t,0,0,t.width,t.height)):a()}setImage(t){return u(this,null,function*(){return t.crossOrigin=\"anonymous\",new Promise((e,i)=>{t.onload=()=>e(t),t.onerror=i})})}setGiF(t){return fetch(t).then(e=>e.arrayBuffer()).then(e=>$(e)).then(e=>N(e,!0))}log(t,...e){console.info(t,...e)}resizeInputData(){this.personMaskCtx.drawImage(this.input,0,0,this.input.width,this.input.height,0,0,this.personMaskWidth,this.personMaskHeight);let t=this.personMaskCtx.getImageData(0,0,this.personMaskWidth,this.personMaskHeight),e=this.tfLite._getInputMemoryOffset()/4;for(let i=0;i<this.personMaskPixelCount;i++)this.tfLite.HEAPF32[e+i*3]=t.data[i*4]/255,this.tfLite.HEAPF32[e+i*3+1]=t.data[i*4+1]/255,this.tfLite.HEAPF32[e+i*3+2]=t.data[i*4+2]/255}infer(t){t||this.tfLite._runInference();let e=this.tfLite._getOutputMemoryOffset()/4;for(let i=0;i<this.personMaskPixelCount;i++)if(this.modelName===\"meet\"){let s=this.tfLite.HEAPF32[e+i*2],a=this.tfLite.HEAPF32[e+i*2+1],n=Math.max(s,a),o=Math.exp(s-n),r=Math.exp(a-n);this.personMask.data[i*4+3]=255*r/(o+r)}else if(this.modelName===\"landscape-segmentation\"){let s=this.tfLite.HEAPF32[e+i];this.personMask.data[i*4+3]=255*s}this.personMaskCtx.putImageData(this.personMask,0,0)}postProcessing(){this.outputCtx.globalCompositeOperation=\"copy\",this.outputCtx.filter=\"none\",this.isVirtualBackground?this.outputCtx.filter=\"blur(4px)\":this.outputCtx.filter=\"blur(8px)\",this.drawPersonMask(),this.outputCtx.globalCompositeOperation=\"source-in\",this.outputCtx.filter=\"none\",this.outputCtx.drawImage(this.input,0,0),this.enableSharpening&&this.output.width>Y&&this.output.height>K&&this.output.width<Q&&this.output.height<X&&this.sharpenFilter(),this.drawSegmentedBackground()}sharpenFilter(){let t=this.outputCtx.getImageData(0,0,this.output.width,this.output.height),e=this.filters.convolute(t);this.outputCtx.putImageData(e,0,0)}drawPersonMask(){this.outputCtx.drawImage(this.personMaskCanvas,0,0,this.personMaskWidth,this.personMaskHeight,0,0,this.output.width,this.output.height)}drawSegmentedBackground(){this.outputCtx.globalCompositeOperation=\"destination-over\",this.outputCtx.imageSmoothingEnabled=!0,this.outputCtx.imageSmoothingQuality=\"high\",this.isVirtualBackground?this.backgroundType===\"video\"&&this.backgroundVideo!=null&&this.backgroundVideo.readyState>=4?this.fitVideoToBackground():this.backgroundType===\"image\"?this.fitImageToBackground():this.backgroundType===\"gif\"&&(this.giflocalCount>this.gifFrames[this.gifFramesIndex].delay/q?(this.gifFramesIndex++,this.gifFramesIndex>=this.gifFrames.length&&(this.gifFramesIndex=0),this.giflocalCount=0):this.giflocalCount++,this.fitGifToBackground()):this.addBlurToBackground()}runSegmentation(t){return u(this,null,function*(){this.tfLite&&(this.resizeInputData(),yield this.infer(t),this.postProcessing())})}fitVideoToBackground(){this.fitData(this.backgroundVideo,this.backgroundVideo.videoWidth,this.backgroundVideo.videoHeight)}fitImageToBackground(){this.fitData(this.backgroundImage,this.backgroundImage.width,this.backgroundImage.height)}fitGifToBackground(){if(this.gifFrameImageData==null){let t=this.gifFrames[this.gifFramesIndex].dims;this.tempGifCanvas.width=t.width,this.tempGifCanvas.height=t.height,this.gifFrameImageData=this.tempGifContext.createImageData(t.width,t.height)}this.gifFrameImageData.data.set(this.gifFrames[this.gifFramesIndex].patch),this.tempGifContext.putImageData(this.gifFrameImageData,0,0),this.fitData(this.tempGifCanvas,this.gifFrameImageData.width,this.gifFrameImageData.height)}fitData(t,e,i){let s,a,n,o;e/i<this.imageAspectRatio?(s=e,a=e/this.imageAspectRatio,n=0,o=(i-a)/2):(a=i,s=i*this.imageAspectRatio,o=0,n=(e-s)/2),this.outputCtx.drawImage(t,n,o,s,a,0,0,this.output.width,this.output.height)}addBlurToBackground(){return u(this,null,function*(){let t=\"15px\";this.input.width<=160?t=\"5px\":this.input.width<=320?t=\"10px\":this.input.width<=640?t=\"15px\":this.input.width<=960?t=\"20px\":this.input.width<=1280?t=\"25px\":this.input.width<=1920&&(t=\"30px\"),this.outputCtx.filter=`blur(${t})`,this.outputCtx.drawImage(this.input,0,0,this.output.width,this.output.height)})}initSharpenFilter(){this.filters.tmpCanvas=document.createElement(\"canvas\"),this.filters.tmpCtx=this.filters.tmpCanvas.getContext(\"2d\"),this.filters.createImageData=(t,e)=>this.filters.tmpCtx.createImageData(t,e),this.filters.convolute=(t,e=[0,-1,0,-1,5,-1,0,-1,0],i)=>{let s=Math.round(Math.sqrt(e.length)),a=Math.floor(s/2),n=t.data,o=t.width,r=t.height,l=o,x=r,T=this.filters.createImageData(l,x),p=T.data,P=i?1:0;for(let d=0;d<x;d=d+1)for(let g=0;g<l;g=g+1){let c=(d*l+g)*4;if(n[c+3]!==0&&g<l&&d<x){let D=d,B=g,L=0,E=0,V=0,w=0;for(let m=0;m<s;m++)for(let f=0;f<s;f++){let v=D+m-a,I=B+f-a;if(v>=0&&v<r&&I>=0&&I<o){let k=(v*o+I)*4,b=e[m*s+f];L+=n[k]*b,E+=n[k+1]*b,V+=n[k+2]*b,w+=n[k+3]*b}}p[c]=L,p[c+1]=E,p[c+2]=V,p[c+3]=w+P*(255-w)}}return T}}};export{Z as HMSVirtualBackgroundPlugin};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deinterlace = void 0;\n\n/**\r\n * Deinterlace function from https://github.com/shachaf/jsgif\r\n */\nvar deinterlace = function deinterlace(pixels, width) {\n  var newPixels = new Array(pixels.length);\n  var rows = pixels.length / width;\n\n  var cpRow = function cpRow(toRow, fromRow) {\n    var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n    newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\n  }; // See appendix E.\n\n\n  var offsets = [0, 4, 2, 1];\n  var steps = [8, 8, 4, 2];\n  var fromRow = 0;\n\n  for (var pass = 0; pass < 4; pass++) {\n    for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n      cpRow(toRow, fromRow);\n      fromRow++;\n    }\n  }\n\n  return newPixels;\n};\n\nexports.deinterlace = deinterlace;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompressFrames = exports.decompressFrame = exports.parseGIF = void 0;\n\nvar _gif = _interopRequireDefault(require(\"js-binary-schema-parser/lib/schemas/gif\"));\n\nvar _jsBinarySchemaParser = require(\"js-binary-schema-parser\");\n\nvar _uint = require(\"js-binary-schema-parser/lib/parsers/uint8\");\n\nvar _deinterlace = require(\"./deinterlace\");\n\nvar _lzw = require(\"./lzw\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar parseGIF = function parseGIF(arrayBuffer) {\n  var byteData = new Uint8Array(arrayBuffer);\n  return (0, _jsBinarySchemaParser.parse)((0, _uint.buildStream)(byteData), _gif[\"default\"]);\n};\n\nexports.parseGIF = parseGIF;\n\nvar generatePatch = function generatePatch(image) {\n  var totalPixels = image.pixels.length;\n  var patchData = new Uint8ClampedArray(totalPixels * 4);\n\n  for (var i = 0; i < totalPixels; i++) {\n    var pos = i * 4;\n    var colorIndex = image.pixels[i];\n    var color = image.colorTable[colorIndex] || [0, 0, 0];\n    patchData[pos] = color[0];\n    patchData[pos + 1] = color[1];\n    patchData[pos + 2] = color[2];\n    patchData[pos + 3] = colorIndex !== image.transparentIndex ? 255 : 0;\n  }\n\n  return patchData;\n};\n\nvar decompressFrame = function decompressFrame(frame, gct, buildImagePatch) {\n  if (!frame.image) {\n    console.warn('gif frame does not have associated image.');\n    return;\n  }\n\n  var image = frame.image; // get the number of pixels\n\n  var totalPixels = image.descriptor.width * image.descriptor.height; // do lzw decompression\n\n  var pixels = (0, _lzw.lzw)(image.data.minCodeSize, image.data.blocks, totalPixels); // deal with interlacing if necessary\n\n  if (image.descriptor.lct.interlaced) {\n    pixels = (0, _deinterlace.deinterlace)(pixels, image.descriptor.width);\n  }\n\n  var resultImage = {\n    pixels: pixels,\n    dims: {\n      top: frame.image.descriptor.top,\n      left: frame.image.descriptor.left,\n      width: frame.image.descriptor.width,\n      height: frame.image.descriptor.height\n    }\n  }; // color table\n\n  if (image.descriptor.lct && image.descriptor.lct.exists) {\n    resultImage.colorTable = image.lct;\n  } else {\n    resultImage.colorTable = gct;\n  } // add per frame relevant gce information\n\n\n  if (frame.gce) {\n    resultImage.delay = (frame.gce.delay || 10) * 10; // convert to ms\n\n    resultImage.disposalType = frame.gce.extras.disposal; // transparency\n\n    if (frame.gce.extras.transparentColorGiven) {\n      resultImage.transparentIndex = frame.gce.transparentColorIndex;\n    }\n  } // create canvas usable imagedata if desired\n\n\n  if (buildImagePatch) {\n    resultImage.patch = generatePatch(resultImage);\n  }\n\n  return resultImage;\n};\n\nexports.decompressFrame = decompressFrame;\n\nvar decompressFrames = function decompressFrames(parsedGif, buildImagePatches) {\n  return parsedGif.frames.filter(function (f) {\n    return f.image;\n  }).map(function (f) {\n    return decompressFrame(f, parsedGif.gct, buildImagePatches);\n  });\n};\n\nexports.decompressFrames = decompressFrames;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lzw = void 0;\n\n/**\r\n * javascript port of java LZW decompression\r\n * Original java author url: https://gist.github.com/devunwired/4479231\r\n */\nvar lzw = function lzw(minCodeSize, data, pixelCount) {\n  var MAX_STACK_SIZE = 4096;\n  var nullCode = -1;\n  var npix = pixelCount;\n  var available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\n  var dstPixels = new Array(pixelCount);\n  var prefix = new Array(MAX_STACK_SIZE);\n  var suffix = new Array(MAX_STACK_SIZE);\n  var pixelStack = new Array(MAX_STACK_SIZE + 1); // Initialize GIF data stream decoder.\n\n  data_size = minCodeSize;\n  clear = 1 << data_size;\n  end_of_information = clear + 1;\n  available = clear + 2;\n  old_code = nullCode;\n  code_size = data_size + 1;\n  code_mask = (1 << code_size) - 1;\n\n  for (code = 0; code < clear; code++) {\n    prefix[code] = 0;\n    suffix[code] = code;\n  } // Decode GIF pixel stream.\n\n\n  var datum, bits, count, first, top, pi, bi;\n  datum = bits = count = first = top = pi = bi = 0;\n\n  for (i = 0; i < npix;) {\n    if (top === 0) {\n      if (bits < code_size) {\n        // get the next byte\n        datum += data[bi] << bits;\n        bits += 8;\n        bi++;\n        continue;\n      } // Get the next code.\n\n\n      code = datum & code_mask;\n      datum >>= code_size;\n      bits -= code_size; // Interpret the code\n\n      if (code > available || code == end_of_information) {\n        break;\n      }\n\n      if (code == clear) {\n        // Reset decoder.\n        code_size = data_size + 1;\n        code_mask = (1 << code_size) - 1;\n        available = clear + 2;\n        old_code = nullCode;\n        continue;\n      }\n\n      if (old_code == nullCode) {\n        pixelStack[top++] = suffix[code];\n        old_code = code;\n        first = code;\n        continue;\n      }\n\n      in_code = code;\n\n      if (code == available) {\n        pixelStack[top++] = first;\n        code = old_code;\n      }\n\n      while (code > clear) {\n        pixelStack[top++] = suffix[code];\n        code = prefix[code];\n      }\n\n      first = suffix[code] & 0xff;\n      pixelStack[top++] = first; // add a new string to the table, but only if space is available\n      // if not, just continue with current table until a clear code is found\n      // (deferred clear code implementation as per GIF spec)\n\n      if (available < MAX_STACK_SIZE) {\n        prefix[available] = old_code;\n        suffix[available] = first;\n        available++;\n\n        if ((available & code_mask) === 0 && available < MAX_STACK_SIZE) {\n          code_size++;\n          code_mask += available;\n        }\n      }\n\n      old_code = in_code;\n    } // Pop a pixel off the pixel stack.\n\n\n    top--;\n    dstPixels[pi++] = pixelStack[top];\n    i++;\n  }\n\n  for (i = pi; i < npix; i++) {\n    dstPixels[i] = 0; // clear missing pixels\n  }\n\n  return dstPixels;\n};\n\nexports.lzw = lzw;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loop = exports.conditional = exports.parse = void 0;\n\nvar parse = function parse(stream, schema) {\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : result;\n\n  if (Array.isArray(schema)) {\n    schema.forEach(function (partSchema) {\n      return parse(stream, partSchema, result, parent);\n    });\n  } else if (typeof schema === 'function') {\n    schema(stream, result, parent, parse);\n  } else {\n    var key = Object.keys(schema)[0];\n\n    if (Array.isArray(schema[key])) {\n      parent[key] = {};\n      parse(stream, schema[key], result, parent[key]);\n    } else {\n      parent[key] = schema[key](stream, result, parent, parse);\n    }\n  }\n\n  return result;\n};\n\nexports.parse = parse;\n\nvar conditional = function conditional(schema, conditionFunc) {\n  return function (stream, result, parent, parse) {\n    if (conditionFunc(stream, result, parent)) {\n      parse(stream, schema, result, parent);\n    }\n  };\n};\n\nexports.conditional = conditional;\n\nvar loop = function loop(schema, continueFunc) {\n  return function (stream, result, parent, parse) {\n    var arr = [];\n    var lastStreamPos = stream.pos;\n\n    while (continueFunc(stream, result, parent)) {\n      var newParent = {};\n      parse(stream, schema, result, newParent); // cases when whole file is parsed but no termination is there and stream position is not getting updated as well\n      // it falls into infinite recursion, null check to avoid the same\n\n      if (stream.pos === lastStreamPos) {\n        break;\n      }\n\n      lastStreamPos = stream.pos;\n      arr.push(newParent);\n    }\n\n    return arr;\n  };\n};\n\nexports.loop = loop;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readBits = exports.readArray = exports.readUnsigned = exports.readString = exports.peekBytes = exports.readBytes = exports.peekByte = exports.readByte = exports.buildStream = void 0;\n\n// Default stream and parsers for Uint8TypedArray data type\nvar buildStream = function buildStream(uint8Data) {\n  return {\n    data: uint8Data,\n    pos: 0\n  };\n};\n\nexports.buildStream = buildStream;\n\nvar readByte = function readByte() {\n  return function (stream) {\n    return stream.data[stream.pos++];\n  };\n};\n\nexports.readByte = readByte;\n\nvar peekByte = function peekByte() {\n  var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (stream) {\n    return stream.data[stream.pos + offset];\n  };\n};\n\nexports.peekByte = peekByte;\n\nvar readBytes = function readBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos += length);\n  };\n};\n\nexports.readBytes = readBytes;\n\nvar peekBytes = function peekBytes(length) {\n  return function (stream) {\n    return stream.data.subarray(stream.pos, stream.pos + length);\n  };\n};\n\nexports.peekBytes = peekBytes;\n\nvar readString = function readString(length) {\n  return function (stream) {\n    return Array.from(readBytes(length)(stream)).map(function (value) {\n      return String.fromCharCode(value);\n    }).join('');\n  };\n};\n\nexports.readString = readString;\n\nvar readUnsigned = function readUnsigned(littleEndian) {\n  return function (stream) {\n    var bytes = readBytes(2)(stream);\n    return littleEndian ? (bytes[1] << 8) + bytes[0] : (bytes[0] << 8) + bytes[1];\n  };\n};\n\nexports.readUnsigned = readUnsigned;\n\nvar readArray = function readArray(byteSize, totalOrFunc) {\n  return function (stream, result, parent) {\n    var total = typeof totalOrFunc === 'function' ? totalOrFunc(stream, result, parent) : totalOrFunc;\n    var parser = readBytes(byteSize);\n    var arr = new Array(total);\n\n    for (var i = 0; i < total; i++) {\n      arr[i] = parser(stream);\n    }\n\n    return arr;\n  };\n};\n\nexports.readArray = readArray;\n\nvar subBitsTotal = function subBitsTotal(bits, startIndex, length) {\n  var result = 0;\n\n  for (var i = 0; i < length; i++) {\n    result += bits[startIndex + i] && Math.pow(2, length - i - 1);\n  }\n\n  return result;\n};\n\nvar readBits = function readBits(schema) {\n  return function (stream) {\n    var _byte = readByte()(stream); // convert the byte to bit array\n\n\n    var bits = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      bits[7 - i] = !!(_byte & 1 << i);\n    } // convert the bit array to values based on the schema\n\n\n    return Object.keys(schema).reduce(function (res, key) {\n      var def = schema[key];\n\n      if (def.length) {\n        res[key] = subBitsTotal(bits, def.index, def.length);\n      } else {\n        res[key] = bits[def.index];\n      }\n\n      return res;\n    }, {});\n  };\n};\n\nexports.readBits = readBits;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = require(\"../\");\n\nvar _uint = require(\"../parsers/uint8\");\n\n// a set of 0x00 terminated subblocks\nvar subBlocksSchema = {\n  blocks: function blocks(stream) {\n    var terminator = 0x00;\n    var chunks = [];\n    var streamSize = stream.data.length;\n    var total = 0;\n\n    for (var size = (0, _uint.readByte)()(stream); size !== terminator; size = (0, _uint.readByte)()(stream)) {\n      // size becomes undefined for some case when file is corrupted and  terminator is not proper \n      // null check to avoid recursion\n      if (!size) break; // catch corrupted files with no terminator\n\n      if (stream.pos + size >= streamSize) {\n        var availableSize = streamSize - stream.pos;\n        chunks.push((0, _uint.readBytes)(availableSize)(stream));\n        total += availableSize;\n        break;\n      }\n\n      chunks.push((0, _uint.readBytes)(size)(stream));\n      total += size;\n    }\n\n    var result = new Uint8Array(total);\n    var offset = 0;\n\n    for (var i = 0; i < chunks.length; i++) {\n      result.set(chunks[i], offset);\n      offset += chunks[i].length;\n    }\n\n    return result;\n  }\n}; // global control extension\n\nvar gceSchema = (0, _.conditional)({\n  gce: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    byteSize: (0, _uint.readByte)()\n  }, {\n    extras: (0, _uint.readBits)({\n      future: {\n        index: 0,\n        length: 3\n      },\n      disposal: {\n        index: 3,\n        length: 3\n      },\n      userInput: {\n        index: 6\n      },\n      transparentColorGiven: {\n        index: 7\n      }\n    })\n  }, {\n    delay: (0, _uint.readUnsigned)(true)\n  }, {\n    transparentColorIndex: (0, _uint.readByte)()\n  }, {\n    terminator: (0, _uint.readByte)()\n  }]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xf9;\n}); // image pipeline block\n\nvar imageSchema = (0, _.conditional)({\n  image: [{\n    code: (0, _uint.readByte)()\n  }, {\n    descriptor: [{\n      left: (0, _uint.readUnsigned)(true)\n    }, {\n      top: (0, _uint.readUnsigned)(true)\n    }, {\n      width: (0, _uint.readUnsigned)(true)\n    }, {\n      height: (0, _uint.readUnsigned)(true)\n    }, {\n      lct: (0, _uint.readBits)({\n        exists: {\n          index: 0\n        },\n        interlaced: {\n          index: 1\n        },\n        sort: {\n          index: 2\n        },\n        future: {\n          index: 3,\n          length: 2\n        },\n        size: {\n          index: 5,\n          length: 3\n        }\n      })\n    }]\n  }, (0, _.conditional)({\n    lct: (0, _uint.readArray)(3, function (stream, result, parent) {\n      return Math.pow(2, parent.descriptor.lct.size + 1);\n    })\n  }, function (stream, result, parent) {\n    return parent.descriptor.lct.exists;\n  }), {\n    data: [{\n      minCodeSize: (0, _uint.readByte)()\n    }, subBlocksSchema]\n  }]\n}, function (stream) {\n  return (0, _uint.peekByte)()(stream) === 0x2c;\n}); // plain text block\n\nvar textSchema = (0, _.conditional)({\n  text: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    preData: function preData(stream, result, parent) {\n      return (0, _uint.readBytes)(parent.text.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0x01;\n}); // application block\n\nvar applicationSchema = (0, _.conditional)({\n  application: [{\n    codes: (0, _uint.readBytes)(2)\n  }, {\n    blockSize: (0, _uint.readByte)()\n  }, {\n    id: function id(stream, result, parent) {\n      return (0, _uint.readString)(parent.blockSize)(stream);\n    }\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xff;\n}); // comment block\n\nvar commentSchema = (0, _.conditional)({\n  comment: [{\n    codes: (0, _uint.readBytes)(2)\n  }, subBlocksSchema]\n}, function (stream) {\n  var codes = (0, _uint.peekBytes)(2)(stream);\n  return codes[0] === 0x21 && codes[1] === 0xfe;\n});\nvar schema = [{\n  header: [{\n    signature: (0, _uint.readString)(3)\n  }, {\n    version: (0, _uint.readString)(3)\n  }]\n}, {\n  lsd: [{\n    width: (0, _uint.readUnsigned)(true)\n  }, {\n    height: (0, _uint.readUnsigned)(true)\n  }, {\n    gct: (0, _uint.readBits)({\n      exists: {\n        index: 0\n      },\n      resolution: {\n        index: 1,\n        length: 3\n      },\n      sort: {\n        index: 4\n      },\n      size: {\n        index: 5,\n        length: 3\n      }\n    })\n  }, {\n    backgroundColorIndex: (0, _uint.readByte)()\n  }, {\n    pixelAspectRatio: (0, _uint.readByte)()\n  }]\n}, (0, _.conditional)({\n  gct: (0, _uint.readArray)(3, function (stream, result) {\n    return Math.pow(2, result.lsd.gct.size + 1);\n  })\n}, function (stream, result) {\n  return result.lsd.gct.exists;\n}), // content frames\n{\n  frames: (0, _.loop)([gceSchema, applicationSchema, commentSchema, imageSchema, textSchema], function (stream) {\n    var nextCode = (0, _uint.peekByte)()(stream); // rather than check for a terminator, we should check for the existence\n    // of an ext or image block to avoid infinite loops\n    //var terminator = 0x3B;\n    //return nextCode !== terminator;\n\n    return nextCode === 0x21 || nextCode === 0x2c;\n  })\n}];\nvar _default = schema;\nexports[\"default\"] = _default;","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n"],"names":["EPSILON_FLOAT32","EPSILON_FLOAT16","DataStorage","backend","dataMover","dataId","value","KernelBackend","notYetImplemented","f","options","force","values","shape","dtype","refCount","kernelName","shuffle","array","counter","index","swap","shuffleCombo","array2","clamp","min","x","max","nearestLargerEven","val","object","left","right","temp","sum","arr","i","randUniform","a","b","r","distSquared","result","diff","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","flatten","skipTypedArray","isTypedArray","size","isScalarShape","n1","n2","isInt","tanh","e2x","sizeToSquarishShape","width","createShuffledIndices","n","shuffledIndices","rightPad","repeatedTry","checkFn","delayFn","maxCounter","scheduleFn","resolve","reject","tryCount","tryFn","nextBackoff","inferFromImplicitShape","shapeProd","implicitIdx","newShape","parseAxisParam","axis","rank","ax","keptDims","isEmptyArray","axes","j","getTypedArrayFromDType","getArrayFromDType","checkConversionForErrors","vals","num","isValidDtype","hasEncodingLoss","oldType","newType","bytesPerElement","bytesFromStringArray","bytes","isString","isBoolean","isNumber","inferDtype","isFunction","nearestDivisor","start","computeStrides","strides","createNestedArray","offset","isComplex","ret","d","rest","len","acc","c","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","makeZerosNestedTypedArray","prev","curr","assertNonNegativeIntegerDimensions","dimSize","locToIndex","locs","indexToLoc","isPromise","TENSORFLOWJS_FLAGS_PREFIX","Environment","global","getQueryParams","platformName","platform","flagName","evaluationFn","setHook","flagValue","flags","urlParams","keyValue","key","parseValue","queryString","params","s","t","decodeParam","name","ENV","setEnvironmentGlobal","environment","globalNameSpace","getGlobalNamespace","ns","getGlobalMap","getGlobal","init","globalMap","singleton","Abs","Acos","Acosh","Add","AddN","All","Any","ArgMax","ArgMin","Asin","Asinh","Atan","Atanh","Atan2","AvgPool","AvgPoolGrad","AvgPool3D","AvgPool3DGrad","BatchMatMul","BatchToSpaceND","Bincount","BroadcastTo","BroadcastArgs","Cast","Ceil","ClipByValue","Complex","ComplexAbs","Concat","Conv2D","Conv2DBackpropFilter","Conv2DBackpropInput","Conv3D","Conv3DBackpropFilterV2","Conv3DBackpropInputV2","Cos","Cosh","Cumprod","Cumsum","CropAndResize","DenseBincount","DepthToSpace","DepthwiseConv2dNative","DepthwiseConv2dNativeBackpropFilter","DepthwiseConv2dNativeBackpropInput","Diag","Dilation2D","Dilation2DBackpropInput","Dilation2DBackpropFilter","RealDiv","Einsum","Elu","EluGrad","Erf","Equal","Exp","ExpandDims","Expm1","FFT","Fill","FlipLeftRight","Floor","FloorDiv","FusedBatchNorm","GatherV2","GatherNd","Greater","GreaterEqual","Identity","IFFT","Imag","IsFinite","IsInf","IsNan","LeakyRelu","Less","LessEqual","LinSpace","Log","Log1p","LogicalAnd","LogicalNot","LogicalOr","LogicalXor","LogSoftmax","LowerBound","LRN","LRNGrad","Max","Maximum","MaxPool","MaxPoolGrad","MaxPool3D","MaxPool3DGrad","MaxPoolWithArgmax","Mean","Min","Minimum","MirrorPad","Mod","Multinomial","Multiply","Neg","NotEqual","NonMaxSuppressionV3","NonMaxSuppressionV4","NonMaxSuppressionV5","OnesLike","OneHot","Pack","PadV2","Pool","Pow","Prelu","Prod","RaggedGather","RaggedTensorToTensor","Range","Real","Reciprocal","Relu","Reshape","ResizeNearestNeighbor","ResizeNearestNeighborGrad","ResizeBilinear","ResizeBilinearGrad","Relu6","Reverse","Round","Rsqrt","ScatterNd","SearchSorted","Select","Selu","Slice","Sin","Sinh","Sign","Sigmoid","Softplus","Sqrt","Sum","SpaceToBatchND","SplitV","Softmax","SparseFillEmptyRows","SparseReshape","SparseSegmentMean","SparseSegmentSum","SparseToDense","SquaredDifference","Square","StridedSlice","StringNGrams","StringSplit","StringToHashBucketFast","Sub","Tan","Tanh","Tile","TopK","Transform","Transpose","Unique","Unpack","UnsortedSegmentSum","UpperBound","ZerosLike","Step","FromPixels","RotateWithOffset","_FusedMatMul","FusedConv2D","FusedDepthwiseConv2D","warn","kernelRegistry","gradRegistry","getKernel","backendName","makeKey","getGradient","getKernelsForBackend","it","done","config","registerKernel","registerGradient","unregisterKernel","unregisterGradient","copyRegisteredKernels","registeredBackendName","newBackendName","kernelConfig","newKernelConfig","Long","hexToLong","hex","k0","k1","k2","shiftMix","numBytes","fetch64","fetch32","rotate64","shift","hashLen16","u","v","mul","weakHashLen32WithSeeds","w","y","z","weakHashLen32WithSeedsStr","hashLen0to16","hashLen17to32","hashLen33to64","e","g","fingerPrint64","seed","end","last64","createScalarValue","encodeString","toTypedArray","noConversionNeeded","bool","now","path","requestInits","encoding","decodeString","Profiler","backendTimer","logger","Logger","inputs","outputs","holdResultWrapperFn","timer","output","tensorVals","checkComputationForErrors","timing","kernelProfile","timeMs","extraInfo","valueContainer","time","paddedName","inputShapesDescription","input","inputShape","inputRank","getFilteredNodesXToY","tape","xs","tensorsFromX","nodesFromX","node","nodeInputs","inputName","anyInputFromX","tensorsLeadToY","nodesToY","filteredTape","prunedInputs","nodeInput","prunedNode","backpropagateGradients","tensorAccumulatedGradientMap","tidy","add","dys","o","gradTensor","inputGradients","dx","curGradient","FORMAT_LIMIT_NUM_VALS","FORMAT_NUM_FIRST_LAST_VALS","FORMAT_NUM_SIG_DIGITS","tensorToString","verbose","padPerCol","computeMaxSizePerColumn","valsLines","subTensorToString","lines","numCols","valuesOrTuples","createComplexTuples","row","valToString","pad","valStr","boolNumToString","isLast","storagePerElement","complexTuple","firstValsSize","firstVals","lastVals","displayVals","subshape","substrides","stride","sep","newLineSep","complexTuples","TensorBuffer","loc","trackerFn","opHandler","deprecationWarningFn","setTensorTracker","fn","setOpHandler","handler","setDeprecationWarningFn","id","data","trainable","instance","getGlobalTensorClass","initialValue","tensorId","newValue","Rank","UpcastInt32AndMap","UpcastBoolAndMap","UpcastFloat32AndMap","UpcastComplex64AndMap","upcastTypeMap","upcastType","typeA","typeB","sumOutType","type","makeTypesMatch","assertTypesMatch","isTensorInList","tensor","tensorList","getTensorsInContainer","list","walkTensorContainer","container","seen","isIterable","iterable","k","obj","isRegisteredKernelInvocation","kernelInvocation","EngineState","variableName","Engine","sortedBackends","asyncInit","factory","priority","success","kernel","registryFactoryEntry","promiseId","backendInstance","err","info","srcBackend","nameOrFn","res","ex","grad","dy","gradInputs","attrs","saved","numDataIdsBefore","outInfos","numDataIdsAfter","numOutputDataIds","numMoves","dataIdsLeaked","kernelParams","isTapeOn","startingBytecount","startingNumTensors","kernelFunc","out","kernelOrScopeName","outTensors","outInfo","tensorsToSave","forwardFunc","saveFunc","tensors","outs","backwardsFunc","item","gradConfig","inputsToSave","outputsToSave","inputTensorsToSave","outputTensorsToSave","_","backendVals","newBytes","tensorInfo","varName","query","startBytes","startNumTensors","gradientsFunc","tapeNode","scopeInfo","tensorsToTrackInParent","tensorsToTrackInParentSet","oldScope","allowNoGradients","accumulatedGradientMap","ones","grads","inputMap","save","gradRes","gradMap","timingInfo","getOrMakeEngine","_isNavigatorDefined","isMobileMockValue","mockIsMobile","isMobile","nav","navAny","isBrowser","debugValue","NUM_BYTES_STRING_LENGTH","encodeWeights","group","specs","dataPromises","names","spec","utf8bytes","totalNumBytes","p","bytesOfLength","tensorValues","concatenateTypedArrays","buffer","float16Decode","quantization","quantizationSizeFactor","byteBuffer","quantizedArray","getFloat16Decoder","byteLength","dtypeFactor","real","image","realTensor","imageTensor","totalByteLength","normalizedXs","useNodeBuffer","stringByteLength","str","arrayBufferToBase64String","buf","l","base64StringToArrayBuffer","buffers","SEPARATOR","items","getModelJSONForModelArtifacts","artifacts","manifest","getModelArtifactsForJSONSync","modelJSON","weightSpecs","weightData","modelArtifacts","loadWeights","getModelArtifactsInfoForJSON","getWeightSpecs","weightsManifest","entry","computeFloat16MantisaTable","convertMantissa","m","mantisaTable","computeFloat16ExponentTable","exponentTable","computeFloat16OffsetTable","offsetTable","bufferUint32View","float16Bits","float32Bits","saveRouter","loadRouter","url","loadOptions","handlerType","validHandlers","router","registerSaveRouter","loudRouter","registerLoadRouter","getSaveHandlers","getLoadHandlers","DATABASE_NAME","DATABASE_VERSION","MODEL_STORE_NAME","INFO_STORE_NAME","deleteDatabase","idbFactory","getIndexedDBFactory","deleteRequest","error","theWindow","setUpDatabase","openRequest","db","BrowserIndexedDB","modelPath","modelTx","getRequest","modelArtifactsInfo","infoTx","infoStore","putInfoRequest","putModelRequest","deleteInfoRequest","indexedDBRouter","browserIndexedDB","maybeStripScheme","BrowserIndexedDBManager","tx","getAllInfoRequest","getInfoRequest","deleteModelData","deleteModelRequest","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","purgeLocalStorageArtifacts","LS","purgedModelPaths","prefix","modelName","getModelPathFromKey","getModelKeys","removeItems","keys","BrowserLocalStorage","topology","metadata","metadataString","weightDataBase64","localStorageRouter","browserLocalStorage","BrowserLocalStorageManager","suffix","URL_SCHEME_SUFFIX","ModelStoreManagerRegistry","scheme","manager","registry","parseURL","cloneModelInternal","sourceURL","destURL","deleteSource","loadHandlers","loadHandler","saveHandlers","saveHandler","sourceScheme","sourcePath","sameMedium","saveResult","listModels","schemes","schemeOut","removeModel","schemeAndPath","copyModel","moveModel","PlatformBrowser","text","functionRef","delay","event","getNodeFetch","systemFetch","resetSystemFetch","setSystemFetch","fetchFn","getSystemFetch","PlatformNode","inferShape","firstElem","deepAssertShapeConsistency","indices","subShape","assertDtype","expectedDtype","actualDType","argName","functionName","parseAsDtype","inferredDtype","inferredShape","arg","OP_SCOPE_SUFFIX","op","opName","f2","args","cast_","$x","cast","clone_","clone","print","DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","BrowserDownloads","fileNamePrefix","weightsURL","modelJsonURL","jsonAnchor","weightDataAnchor","BrowserFiles","files","jsonReader","modelTopology","modelArtifactsPromise","paths","pathToFile","promises","file","weightFileReader","basenames","fileNames","pathBasename","browserDownloadsRouter","browserDownloads","browserFiles","monitorPromisesProgress","onProgress","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","registerMonitor","promise","fraction","loadWeightsAsArrayBuffer","fetchURLs","fetchFunc","requests","fetchURL","fetchStartFraction","fetchEndFraction","bufferPromises","response","bufferStartFraction","bufferEndFraction","filePathPrefix","weightNames","requestInit","weightsLoaderFactory","fetchUrls","fetchWeightsFunction","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","manifestGroupConfig","groupIndex","groupOffset","weightsEntry","rawDtype","weightsBytes","enqueueWeightsForFetchingFn","weightName","weightIndex","found","weightsNotFound","groupIndicesToFetch","accumulator","shouldFetch","filepath","fetchUrl","weightsTensorMap","bufferIndexOffset","numBuffers","groupBytes","groupBuffer","groupByteBuffer","groupBufferOffset","nameToTensorMap","OCTET_STREAM_MIME_TYPE","JSON_TYPE","HTTPRequest","modelTopologyAndWeightManifest","modelConfigRequest","message","weightPath","parseUrl","pathPrefix","urlPromises","weightsGroup","lastSlash","lastSearchParam","isHTTPScheme","httpRouter","isHTTP","urlItem","http","browserHTTPRequest","PassthroughLoader","PassthroughSaver","PassthroughAsync","fromMemory","trainingConfig","fromMemorySync","withSaveHandler","withSaveHandlerSync","getBroadcastDims","inShape","outShape","inRank","dims","dim","getReductionAxes","inDim","outAxis","outDim","assertAndGetBroadcastShape","errMsg","NEW_AXIS","SHRINK_AXIS","assertParamsValid","begin","maskToAxes","mask","computeOutShape","stridesWithElidedDims","ellipsisInsertionIndex","numElidedAxes","newStrides","unnormalizeAxis","normalizedAxis","getElidedAxes","elidedAxes","getNormalizedAxes","ellipsisAxes","numInterpolatedAxes","beginMask","endMask","ellipsisMask","normalizedBegin","normalizedEnd","normalizedStrides","fullIndex","startIndicesWithElidedDims","stopIndicesWithElidedDims","startForAxis","stopForAxis","stridesForAxis","originalBegin","newIndices","originalAxis","originalValue","originalEnd","axisSize","startIndices","stopIndices","stop","isSliceContinous","firstNonOneAxis","computeFlatOffset","flatOffset","parseSliceParams","begin_","xRank","size_","sliceInfo","xShape","newAxisMask","shrinkAxisMask","stridesNonNull","ellipsisSeen","sparseSpec","denseSpec","buildDenseSpec","isIdentity","sliceDim0","isSimpleSlice","processingShape","finalShape","shrinkI","dimI","masks","validRange","beginAndEndMasked","xFwd","canonical","takeAllInDimension","intervalLength","knownInterval","sizeI","denseDim","gatherIndex","sparse","dense","nextIndex","strideI","reshape_","reshape","broadcastTo_","reps","broadcastTo","makeTensor","providedSize","inferredSize","inferred","flatDimsDontMatch","scalar","complex_","imag","$real","$imag","zeros","concat_","$tensors","attr","concat","imag_","real_","slice_","slice","split_","numOrSizeSplits","split","zerosLike_","zerosLike","fft_","fft","rfft_","fftLength","innerDimensionSize","batch","adjustedInput","zerosShape","zerosInput","complexInput","half","realValues","imagValues","realComplexConjugate","imagComplexConjugate","outputShape","rfft","ifft_","ifft","mul_","$a","$b","reverse_","reverse","irfft_","realInput","imagInput","realConjugate","imagConjugate","irfft","tensor1d","enclosingPowerOfTwo","cosineWindow","windowLength","even","newValues","cosArg","hammingWindow_","hammingWindow","hannWindow_","hannWindow","fill","tensor2d","frame_","signal","frameLength","frameStep","padEnd","padValue","padLen","stft_","windowFn","framedSignal","windowedSignal","stft","cropAndResize_","boxes","boxInd","cropSize","method","extrapolationValue","$image","$boxes","$boxInd","numBoxes","cropAndResize","flipLeftRight_","flipLeftRight","tile_","tile","grayscaleToRGB_","lastDimsIdx","lastDims","grayscaleToRGB","rotateWithOffset_","radians","fillValue","center","rotateWithOffset","nonMaxSuppSanityCheck","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","nonMaxSuppression_","$scores","nonMaxSuppression","binaryInsert","element","comparator","binarySearch","insertionPoint","target","binarySearch_","defaultComparator","middle","compareResult","nonMaxSuppressionV3Impl","nonMaxSuppressionImpl_","nonMaxSuppressionV4Impl","padToMaxOutputSize","nonMaxSuppressionV5Impl","returnScoresTensor","returnValidOutputs","candidates","ascendingComparator","scale","selectedIndices","selectedScores","candidate","originalScore","boxIndex","suppressBeginIndex","ignoreCandidate","iou","intersectionOverUnion","suppressWeight","validOutputs","elemsToPad","iCoord","jCoord","yminI","xminI","ymaxI","xmaxI","yminJ","xminJ","ymaxJ","xmaxJ","areaI","areaJ","intersectionYmin","intersectionXmin","intersectionYmax","intersectionXmax","intersectionArea","weight","c1","c2","nonMaxSuppressionAsync_","boxesAndScores","boxesVals","scoresVals","nonMaxSuppressionAsync","nonMaxSuppressionWithScore_","nonMaxSuppressionWithScore","nonMaxSuppressionWithScoreAsync_","nonMaxSuppressionWithScoreAsync","nonMaxSuppressionPadded_","$maxOutputSize","$iouThreshold","$scoreThreshold","nonMaxSuppressionPadded","nonMaxSuppressionPaddedAsync_","nonMaxSuppressionPaddedAsync","resizeBilinear_","images","alignCorners","halfPixelCenters","$images","batchImages","reshapedTo4D","resizeBilinear","resizeNearestNeighbor_","resizeNearestNeighbor","bincount_","weights","$weights","bincount","lessEqual_","lessEqual","greater_","greater","sum_","keepDims","add_","floorDiv_","floorDiv","div_","div","sub_","sub","round_","round","where_","condition","$condition","broadcastShape","$broadcastedCondition","$broadcastedA","$broadcastedB","where","range","step","threshold_","inverted","threshValue","RED_INTENCITY_COEF","GREEN_INTENCITY_COEF","BLUE_INTENCITY_COEF","totalPixelsInImage","$threshold","grayscale","$r","$g","$histogram","otsu","invCondition","histogram","total","bestThresh","bestInBetVar","cInBetVar","classFirst","classSecond","meanFirst","meanSec","weightForeground","weightBack","meanFirstDivA","meanSecFill","meanSecAdd","meanSecMul","cInBetVarSubA","cInBetVarSubB","cInBetVarMul","threshold","transform_","transforms","interpolation","fillMode","$transforms","transform","greaterEqual_","greaterEqual","logicalAnd_","logicalAnd","stack_","stack","unstack_","unstack","bandPart_","numLower","numUpper","M","N","ij","inBand","zero","mat","bandPart","abs_","abs","axesAreInnerMostDims","combineLocations","outputLoc","reduceLoc","outIdx","reduceIdx","computeOutAndReduceShapes","aShape","reduceShape","expandShapeToKeepDim","reduceSubShape","assertAxesAreInnerMostDims","getAxesPermutation","getUndoAxesPermutation","getInnerMostAxes","numAxes","max_","min_","pow_","base","exp","$base","$exp","pow","sqrt_","sqrt","square_","square","norm_","ord","norm","normImpl","keepDimsShape","squeeze_","squeeze","gramSchmidt_","inputIsTensor2D","ys","xs1d","proj","gramSchmidt","enableProdMode","enableDebugMode","disableDeprecationWarnings","deprecationWarn","disposeVariables","engine","memory","profile","dispose","keep","setBackend","ready","getBackend","removeBackend","findBackend","findBackendFactory","registerBackend","setPlatform","expandDims_","expandDims","eye_","numRows","numColumns","batchShape","buff","eye","matMul_","transposeA","transposeB","matMul","neg_","neg","transpose_","perm","conjugate","transpose","qr_","fullMatrices","qr2d","outerDimsProd","x2ds","q2ds","r2ds","x2d","q2d","r2d","q","one2D","iters","rTemp","wTemp","qTemp","rjEnd1","normX","rjj","u1","wPre","tau","rjEndAll","tauTimesW","wT","rTimesTau","tawTimesWT","qAllJEnd","qTimesTau","qr","Reduction","mean_","mean","notEqual_","notEqual","computeWeightedLoss_","losses","reduction","$losses","weightedLoss","broadcastFactor","broadcastedWeights","numNonZeros","computeWeightedLoss","absoluteDifference_","labels","predictions","$labels","$predictions","absoluteDifference","cosineDistance_","one","cosineDistance","relu_","relu","hingeLoss_","hingeLoss","minimum_","minimum","huberLoss_","delta","deltaScalar","quadratic","linear","huberLoss","log_","logLoss_","epsilon","epsilonScalar","l1","l2","logLoss","squaredDifference_","squaredDifference","meanSquaredError_","meanSquaredError","exp_","log1p_","log1p","sigmoidCrossEntropyWithLogits_","logits","$logits","maxOutput","outputXTarget","sigmoidOutput","sigmoidCrossEntropy_","multiClassLabels","labelSmoothing","$multiClassLabels","labelSmoothingScalar","sigmoidCrossEntropy","$dy","checkGrads","$args","valueAndGrad","valueAndGrads","variableGrads","varList","specifiedVarList","specifiedNonTrainable","variable","originalVarCount","namedGrads","customGrad","logSumExp_","xMax","logSumExp","softmaxCrossEntropyWithLogits_","lse","logResult","costVector","dyShape","softmaxCrossEntropy_","onehotLabels","$onehotLabels","numClasses","softmaxCrossEntropy","sparseFillEmptyRows_","denseShape","defaultValue","$indices","$values","$denseShape","$defaultValue","sparseFillEmptyRows","sparseReshape_","inputIndices","$inputIndices","$inputShape","$newShape","sparseReshape","sparseSegmentMean_","segmentIds","$data","$segmentIds","sparseSegmentMean","sparseSegmentSum_","sparseSegmentSum","stringNGrams_","dataSplits","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","$dataSplits","stringNGrams","stringSplit_","delimiter","skipEmpty","$input","$delimiter","stringSplit","stringToHashBucketFast_","numBuckets","stringToHashBucketFast","spectral","linalg","string","delayCallback","nextFrame","assertParamsConsistent","shapes","firstShape","computeDilation2DInfo","filterShape","dataFormat","dilations","inputChannels","$filterShape","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","computePool2DInfo","filterSize","roundingMode","filterHeight","filterWidth","parseTupleParam","computePool3DInfo","filterDepth","parse3TupleParam","computeConv3DInfo","depthwise","batchSize","inHeight","inWidth","inChannels","filterChannels","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","getEffectiveFilterSize","effectiveFilterWidth","padInfo","outHeight","outWidth","getPadAndOutInfo","outChannels","inDepth","strideDepth","dilationDepth","effectiveFilterDepth","outDepth","get3DPadAndOutInfo","computeOutputShape2D","fieldSize","zeroPad","computeDefaultPad","inputRows","inputCols","outputRows","outputCols","computeOutputShape4D","inputDepth","outputDepths","dilation","effectiveFieldSize","param","padAlongHeight","padAlongWidth","top","bottom","padAlongDepth","front","back","tupleValuesAreOne","dimA","dimB","dimC","eitherStridesOrDilationsAreOne","checkPadOnDimRoundingMode","opDesc","dimRoundingMode","elu_","elu","leakyRelu_","alpha","leakyRelu","prelu_","$alpha","prelu","relu6_","relu6","sigmoid_","sigmoid","step_","getFusedDyActivation","activation","getFusedBiasGradient","bias","dyActivation","reduceAxes","applyActivation","preluActivationWeights","leakyreluAlpha","shouldFuse","gradientDepth","RowPartitionType","combineRaggedTensorToTensorShapes","raggedRank","valueShape","valueDim","outputShapeDimIndex","outputShapeDim","getRowPartitionTypesHelper","rowPartitionTypeStrings","stringToType","typeStr","getRaggedRank","rowPartitionTypes","validateDefaultValueShape","defaultValueShape","defaultNDims","valuesNDims","defaultDim","PARALLELIZE_THRESHOLD","computeOptimalWindowSize","inSize","getImageCenter","imageHeight","imageWidth","centerX","centerY","getReshaped","blockShape","prod","batchToSpace","reshaped","spatialLength","getPermuted","reshapedRank","blockShapeRank","permuted","permutedBeforeBatch","permutedAfterBatch","getReshapedPermuted","reshapedPermuted","getSliceBeginCoords","crops","sliceBeginCoords","getSliceSize","uncroppedShape","sliceSize","prepareAndValidate","tensorRank","indicesRank","indicesShape","sliceRank","nResult","resultShape","validateUpdateShape","updates","sliceDim","batchDim","shapeError","validateInput","calculateShapes","totalNd","safeSliceDim","numUpdates","outputSize","SELU_SCALEALPHA","SELU_SCALE","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","mergeRealAndImagArrays","splitRealAndImagArrays","complex","complexWithEvenIndex","complexWithOddIndex","getComplexWithIndex","assignToTypedArray","exponents","inverse","exponent","ARROW","ARROW_REGEX","COMMA","ELLIPSIS","decodeEinsumEquation","equation","numTensors","numArrows","inputString","outputString","inputTerms","numInputs","allDims","dimName","inputTerm","idDims","numDims","numOutDims","summedDims","getEinsumPermutation","nDims","permutationIndices","checkEinsumDimSizes","dimSizes","getEinsumComputePath","steps","nSteps","computedTermIndices","summedDim","termIndices","findTermsWithDim","termIndex","isIdentityPermutation","prepareSplitSize","splitSizes","numOfNegs","count","negIndex","getSparseFillEmptyRowsIndicesDenseShapeMismatch","indicesLength","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","limit","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","dim1","dim2","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","getSparseReshapeInputOutputMultipleErrorMessage","inputSize","getSparseReshapeInputOutputMismatchErrorMessage","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","segmentId","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","indexValue","segOpComputeOptimalWindowSize","numSegments","collectGatherOpShapeInfo","batchDims","outerSize","fromUint8ToStringArray","fromStringArrayToUint8","strings","whereImpl","condShape","condVals","inBuffer","contexts","WEBGL_ATTRIBUTES","clearWebGLContext","webGLVersion","setWebGLContext","gl","getWebGLContext","customCanvas","newCtx","getWebGLRenderingContext","createCanvas","canvas","ev","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getUnpackedArraySizeFromMatrixSize","matrixSize","channelsPerTexture","getColorMatrixTextureShapeWidthHeight","getDenseTexShape","texelsNeeded","getMatrixSizeFromUnpackedArraySize","unpackedSize","decodeMatrixFromUnpackedColorRGBAArray","unpackedArray","matrix","channels","requiredSize","dst","src","getPackedMatrixTextureShapeWidthHeight","getPackedRGBAArraySizeFromMatrixShape","h","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","callAndCheck","func","returnValue","checkWebGLError","getWebGLErrorMessage","MIN_FLOAT16","MAX_FLOAT16","canBeRepresented","status","getExtensionOrThrow","extensionName","throwIfNull","createVertexShader","vertexShaderSource","vertexShader","createFragmentShader","fragmentShaderSource","fragmentShader","logShaderSourceAndInfoLog","lineNumberRegex","shaderSource","shaderInfoLog","lineNumberRegexResult","lineNumber","shaderLines","linesWithLineNumbers","line","maxLineLength","beforeErrorLines","errorLine","afterErrorLines","createProgram","linkProgram","program","validateProgram","createStaticVertexBuffer","createStaticIndexBuffer","getNumChannels","createTexture","validateTextureSize","height","maxTextureSize","requested","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","bindTextureUnit","texture","textureUnit","validateTextureUnit","unbindTextureUnit","getProgramUniformLocationOrThrow","uniformName","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","bindCanvasToFramebuffer","bindColorTextureToFramebuffer","framebuffer","unbindColorTextureFromFramebuffer","validateFramebuffer","getFramebufferErrorMessage","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","glTextureUnit","textureUnitRange","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","maxSizeForNarrowTex","textureShape","isLongNarrowTex","cols","isEven","isReshapeFree","shape1","shape2","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","resetMaxTextureSize","resetMaxTexturesInShader","getMaxTexturesInShader","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","createHalfFloatTextureAndBindToFramebuffer","texConfig","frameBuffer","isFrameBufferComplete","isWebGLFenceEnabled","assertNotComplex","getGlslDifferences","version","varyingVs","varyingFs","texture2D","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","line1","line2","getOutputLogicalCoordinatesFromFlatIndexByUniform","symbolicallyComputeStrides","indicesArr","numCoords","getLogicalCoordinatesFromFlatIndexByUniform","indicesArray","buildVec","dotify","slices","nearestVec4","nearestVec4Remainder","xSlice","ySlice","getFlatIndexFrom3D","getFlatIndexFrom3DOutput","ENCODE_FLOAT_SNIPPET","makeShader","inputsInfo","prefixSnippets","uniformShape","getUniformInfoFromShape","inputPrefixSnippet","inputSamplingSnippet","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","getSamplerFromInInfo","inInfo","enableShapeUniforms","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","usesPackedTextures","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","texShape","packedTexShape","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","texelsInBatchN","batches","getFlatOffsetUniformName","texName","inputInfo","funcName","texNumR","texNumC","tNumR","tNumC","getUniformSampler","valuesPerRow","squeezedShape","newInputInfo","squeezeInputInfo","getSqueezedParams","stride0","stride1","stride2","stride2Str","stride1Str","stride0Str","stride3","stride4","texFuncSnippet","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","isInputScalar","isOutputScalar","inTexShape","useSqueezePackedShape","squeezeShape","useSqueezeShape","compileProgram","gpgpu","inputInfos","shapeInfo","inShapeInfos","source","webGLProgram","getUniformLocations","uniformLocations","inShapesLocations","inTexShapesLocations","customUniformLocations","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","infLoc","nanLoc","shouldThrow","validateBinaryAndProgram","shapeInfos","texShapeA","texShapeB","runProgram","binary","customUniformValues","outTex","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","outShapeLoc","customLoc","customValue","makeShaderKey","keyInputs","hasOffset","xTexShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","useShapeUniforms","DecodeMatrixProgram","DecodeMatrixPackedProgram","EncodeFloatProgram","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","EncodeMatrixPackedProgram","mainLoop","col","channel","createVertexBuffer","vertexArray","createIndexBuffer","triangleVertexIndices","createAndConfigureTexture","internalFormat","textureFormat","textureType","tex2d","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","uploadDenseMatrixToTexture","dataForUpload","texelDataType","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","bufferSizeBytes","downloadFloat32MatrixFromBuffer","downloadTarget","downloadByteEncodedFloatMatrixFromOutputTexture","numChannels","downloadPackedMatrixFromBuffer","physicalRows","physicalCols","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","COLOR_BUFFER_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","fenceContext","isFencePassed","sync","inputMatrixTexture","uniformLocation","outputMatrixTexture","outputPackedMatrixTexture","startRow","startColumn","ext","available","linearSearchLastTrue","resolveFn","isDoneFn","downloadAndDecode","outputMatrixTextureMaybePacked","simpleAbsImpl","resultValues","absConfig","cpuBackend","createSimpleBinaryKernelImpl","bShape","aVals","bVals","resultRank","resultStrides","resultSize","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","aLoc","aIndex","bLoc","bIndex","realVals","imagVals","complexInfo","complexConfig","identity","identityConfig","realVal","realConfig","castImpl","inputType","resultData","zerosTensorInfo","floatX","realPart","resultType","castConfig","binaryKernelFunc","simpleImpl","complexImpl","decodedAVals","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","addConfig","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","outBuf","createSimpleUnaryImpl","unaryKernelFunc","xSize","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","ceilConfig","concatImpl","simplyConcat","colOffset","decodedData","tIdx","resIdx","equalImpl","equal","equalConfig","expImpl","expConfig","expm1Impl","expm1","expm1Config","floorImpl","floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","paramsShape","paramsSize","flattenIndex","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greaterConfig","greaterEqualImpl","greaterEqualConfig","lessImpl","less","lessConfig","lessEqualImpl","lessEqualConfig","linSpaceImpl","logImpl","logConfig","maxImpl","reduceSize","maximumImpl","aValue","bValue","maximum","maximumConfig","minimumImpl","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","multiplyConfig","negImpl","xDtype","minusOne","negConfig","notEqualImpl","notEqualConfig","transposeImpl","xStrides","newLoc","newIndex","transposeConfig","prodImpl","reductionAxes","outDtype","permutation","permutedX","intermediateTensorInfos","prodConfig","validateIndices","numParams","locString","validateSplits","paramsNestedSplits","numParamsDenseValues","splits","lastSplit","makeSplits","valueSlices","numValues","numSplits","outSplits","nrows","rowLength","outSplitsOutDim","getSplits","splitsOut","computeFlatOuterDims","orig","outDims","writeValueSlices","paramsDenseValues","paramsDenseValuesShape","valueSize","valuesShape","denseM","valuesM","outPos","getValues","paramsDenseValuesDType","valuesOut","numElements","raggedGatherImpl","paramsNestedSplitsShapes","outputRaggedRank","outputNestedSplits","outputDenseValues","RaggedTensorToTensorOp","shapeShape","valuesDType","rowPartitionValues","rowPartitionValuesShapes","dimension","rowPartitionTensor","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tShape","isPartial","makeShape","firstDim","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","parentOutputIndex","rowSplitSize","realLength","parentOutputIndexCurrent","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","partitionType","firstPartitionTensor","firstPartitionType","multiplier","outputTensor","outputIndex","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","defaultValueTensor","srcStart","dstStart","dstEnd","srcI","dstI","nVals","copyArray","raggedTensorToTensorImpl","shapesShape","rangeImpl","sameStartStop","increasingRangeNegativeStep","decreasingRangePositiveStep","rsqrtImpl","rsqrt","rsqrtConfig","scatterImpl","sumDupeIndices","flattenShape","updatesData","sigmoidImpl","sigmoidConfig","sliceImpl","isContinous","length","inBuf","outLoc","inLoc","idx","$begin","$size","sliceConfig","sparseFillEmptyRowsImpl","indicesDType","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","outputIndices","outputValues","rowsAreOrdered","lastIndicesRow","csrOffset","allRowsFull","rowEmpty","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndicesShape","inputDType","targetShape","denseSize","nnz","outputRank","product","unknownIndex","missing","inputStrides","outputStrides","sparseSegmentReductionImpl","isMean","numIndices","inputFlat","numCol","outputLength","uninitializedIndex","outIndex","sqrtImpl","sqrtConfig","squaredDifferenceImpl","squaredDifferenceConfig","stridedSliceImpl","StringNGramsOp","nGramWidth","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","stringNGramsImpl","delimiters","token","tokenStart","stringSplitImpl","tokens","maxNumEntries","prevTokensLength","nEntries","stringToHashBucketFastImpl","subImpl","subComplexImpl","subConfig","tileImpl","comparePair","valueDiff","sd","newLeft","newRight","topKImpl","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","uniqueIndices","is1DTensor","axisValues","uniqueIndex","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","bincountImplCPU","bincountReduceImplCPU","castImplCPU","ceilImplCPU","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImplCPU","gatherV2ImplCPU","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImplCPU","logImplCPU","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImplCPU","notEqualImplCPU","prodImplCPU","raggedGatherImplCPU","raggedTensorToTensorImplCPU","rangeImplCPU","rsqrtImplCPU","scatterImplCPU","sigmoidImplCPU","simpleAbsImplCPU","sliceImplCPU","sparseFillEmptyRowsImplCPU","sparseReshapeImplCPU","sparseSegmentReductionImplCPU","sqrtImplCPU","stridedSliceImplCPU","stringNGramsImplCPU","stringSplitImplCPU","stringToHashBucketFastImplCPU","subImplCPU","tileImplCPU","topKImplCPU","transposeImplCPU","uniqueImplCPU","getVecChannels","getChannels","getSourceCoords","PackProgram","outOfBoundsCondition","setup","coord","cond","innerDims","sourceCoords","ReshapePackedProgram","thisRC","getReshapedInputCoords","TextureManager","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","texBytes","computeBytes","newTexture","logicalTexType","deleteTexThreshold","texList","texIndex","freeRatio","tex","numBytesForInternalFormat","internalFormatForPhysicalTexType","packedWidth","packedHeight","getPhysicalTextureForRendering","shapeRowsCol","UnaryOpProgram","opSnippet","CHECK_NAN_SNIPPET","LINEAR","ABS","STEP","ELU","RELU","RELU6","CLONE","SIGMOID","UnaryOpPackedProgram","UnpackProgram","binaryCaches","getBinaryCache","CPU_HANDOFF_SIZE_THRESHOLD","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","MathBackendWebGL","gpuResource","newGPGPU","texData","complexTensorInfos","shouldTimeProgram","subscribers","tmpDownloadTarget","tmpData","ps","dTypeVals","gpuResouorce","tmpTarget","tensorRef","shouldUsePackedProgram","oldActiveTimers","newActiveTimers","outerMostTime","flattenedActiveTimerQueries","flattenedActiveTimerNames","kernelMs","timerQuery","sizeThreshold","outValues","encodedValues","preventEagerUnpackingOutput","afterShape","input3DShape","input3D","afterShapeAs3D","preventEagerUnpackingOfOutput","customValues","customTexShape","texSize","outputDtype","outData","texelShape","dataToDispose","inputsData","savedInput","outputData","glFlushThreshold","unpacked","getBinary","debugFlag","underflowCheckValue","isByteArray","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","preventEagerUnpacking","encodedOutputTarget","outputTexData","float32Values","float32ToTypedArray","texType","mb","forceHalfFloat","webgl","SQUARED_DIFFERENCE","BinaryOpProgram","CHECK_NAN_SNIPPET_PACKED","ELU_DER","NOT_EQUAL","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","realTensorInfo","imagTensorInfo","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","PRELU","PRELU_PACKED","preluConfig","CHECK_NAN_SNIPPET_UNARY","packedOpSnippet","cpuKernelImpl","webglBackend","xData","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","mapActivationToShaderProgram","packed","MatMulPackedProgram","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","realProgram","imagProgram","imagPart","packedReshape","$shape","$xSize","xTexData","reshapeConfig","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","ReduceProgram","reduceType","initializationValue","compareOp","vecType","getReductionStages","stages","reduce","reductionType","reductionStages","previousResult","TransposeProgram","newDim","switched","getSwitchedCoords","originalOrder","switchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","sumImpl","reductionIndices","origAxes","permutedAxes","sumInputIsTransposed","sumInput","sumOutShape","reshapedInput","outType","reduced","sumConfig","MATMUL_SHARED_DIM_THRESHOLD","batchMatMulImpl","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","containsFusedOps","aVec","bVec","shouldReshapeA","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMul","_fusedMatMulConfig","ACOS","acos","acosConfig","ACOSH","acosh","acoshConfig","ADD","addKernelFunc","AddNProgram","snippets","operation","AddNPackedProgram","addN","midIndex","leftSide","rightSide","d1","d2","addNConfig","a2D","allConfig","any","anyConfig","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","xtexData","xIsPacked","xUnPacked","argMax","argMaxConfig","argMin","argMinConfig","ASIN","asin","asinConfig","ASINH","asinh","asinhConfig","ATAN","atan","atanConfig","ATAN2","ATAN2_PACKED","atan2","atan2Config","ATANH","atanh","atanhConfig","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","padTop","padLeft","isAvgPool","batchFlattenPositionStr","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","padFront","avgPool","avgPoolProgram","avgPoolConfig","avgPool3D","avgPool3DConfig","AvgPool2DBackpropProgram","avgMultiplier","AvgPool3DBackpropProgram","avgPool3DGrad","avgPoolBackpropProgram","avgPool3DGradConfig","avgPoolGrad","avgPoolGradConfig","batchMatMul","batchMatMulConfig","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","variance","finalInputs","SliceProgram","destSize","getCoords","body","coordSum","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","shallowSlice","newTexData","batchToSpaceNDConfig","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","broadcastArgs","s0","s1","s0Vals","s1Vals","broadcastArgsConfig","inputData","TO_INT","zerosTensor","CEIL","ClipProgram","ClipPackedProgram","clipByValue","clipValueMin","clipValueMax","clipByValueConfig","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbs","programInputs","complexAbsConfig","ConcatProgram","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","reals","imags","realConcated","imagConcated","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","maxTexturesInShader","reducedInputs","subArray","computeTensors2D","reshapedResult","$inputs","concatConfig","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Conv2DPackedProgram","hasLeakyReluAlpha","texelsAcross","texelC","colIndex","nextTexelOffset","Im2ColPackedProgram","boundsCheckingSnippet","unrolled","getShapeForBatchMatMul","conv2dByMatMul","filter","sharedMatMulDim","outerShapeX","outerShapeFilter","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2d","conv2DConfig","Conv2DDerFilterProgram","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilter","conv2DBackpropFilterConfig","conv2DBackpropInput","conv2DBackpropInputConfig","conv3D","conv3DConfig","conv3DBackpropFilterV2","conv3DBackpropFilterV2Config","conv3DBackpropInput","conv3DBackpropInputConfig","COS","cos","cosConfig","cosh","coshConfig","CropAndResizeProgram","imageShape","boxShape","depth","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CumOpType","CumProgram","exclusive","initVal","idxString","getFinalCoord","cumImpl","permutedAxis","prevResult","reversePermutation","reverseTransposedResult","cumprod","cumprodConfig","cumsum","cumsumConfig","denseBincount","denseBincountConfig","DepthToSpaceProgram","blockSize","depthToSpace","inputHeight","inputWidth","outputHeight","outputWidth","outputDepth","depthToSpaceConfig","DepthwiseConv2DProgram","channelMul","DepthwiseConvPacked2DProgram","depthwiseConv2dNative","$dilations","depthwiseConv2dNativeConfig","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropFilterConfig","depthwiseConv2dNativeBackpropInput","depthwiseConv2dNativeBackpropInputConfig","DiagProgram","diag","flat","diagConfig","Dilation2DProgram","dilation2D","dilation2DConfig","einsum","numDimsRemaining","tensorsToDispose","idTerm","dimsToExpand","einsumConfig","eluConfig","ELU_DER_PACKED","eluGradConfig","ERF","erf","erfConfig","EXP","$dim","expandDimsConfig","EXPM1","FFTProgram","component","innerDim","exponentMultiplierSnippet","resultDenominator","opString","fftImpl","input2D","complexOutputReshaped","fftConfig","FillProgram","fillConfig","FlipLeftRightProgram","flipLeftRightConfig","FLOOR","floorDivConfig","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","fromPixels","fromPixels2DContext","willReadFrequently","isVideo","isImage","newWillReadFrequently","tempPixelHandle","fusedConv2d","prepareInputs","alignInputWithDataFormat","alignedInput","fusedConv2DConfig","fusedDepthwiseConv2D","shouldPackDepthwiseConv","fusedDepthwiseConv2DConfig","GatherNDProgram","gatherNd","flattenIndices","flattenX","outValue","gatherNdConfig","GatherProgram","currentCoords","gatherV2","parsedAxis","indicesVals","axisDim","indicesSize","gatherV2Config","ifftConfig","isFiniteConfig","isInf","isInfConfig","isNaNConfig","linSpace","linSpaceConfig","LOG","LOG1P","log1pConfig","logicalAndConfig","logicalNot","logicalNotConfig","logicalOr","logicalOrConfig","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","depthRadius","LRNGradProgram","LRNGradConfig","reshapedOutput","maxInputIsTransposed","shouldExecuteOnCPU","maxInput","maxInputValues","maxInputData","maxOutShape","maxConfig","MAXIMUM","MAXIMUM_PACKED","maxPool","maxPoolProgram","maxPoolConfig","maxPool3d","maxPool3DConfig","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPool3DGradConfig","maxPoolGrad","getPositions","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolGradConfig","maxPoolWithArgmaxImpl","poolOutput","indexOutput","maxPoolWithArgmaxConfig","indexes","meanImpl","meanConfig","meanInputIsTransposed","meanInput","meanInputValues","meanInputData","meanOutShape","minConfig","MINIMUM","MINIMUM_PACKED","MirrorPadProgram","paddings","mode","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MOD","MOD_PACKED","mod","modConfig","MultinomialProgram","numOutcomes","numSamples","realDiv","realDivConfig","SUB","softmax","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","multinomial","normalized","probs","multinomialConfig","NEG","NEG_PACKED","nonMaxSuppressionV3","nonMaxSuppressionV3Config","nonMaxSuppressionV4","nonMaxSuppressionV4Config","nonMaxSuppressionV5","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","nonMaxSuppressionV5Config","OneHotProgram","onValue","offValue","oneHotConfig","zerosLikeConfig","onesLike","onesLikeConfig","pack","expandedTensors","expandedT","packConfig","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","POW","POW_PACKED","powConfig","outputDType","raggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedGatherConfig","raggedTensorToTensor","rowPartitionTensors","$rowPartitionValues","raggedTensorToTensorConfig","rangeConfig","reciprocal","reciprocalConfig","reluConfig","relu6Config","ResizeBilinearProgram","newHeight","newWidth","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinearBackpropProgram","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGrad","resizeBilinearGradConfig","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGrad","resizeNearestNeighborGradConfig","ReverseProgram","getInCoord","inCoords","ReversePackedProgram","nextRow","getR","getG","getB","getA","inCoordsArray","channels1","$dims","reverseConfig","RotateProgram","fillSnippet","rotateWithOffsetConfig","roundConfig","ScatterProgram","updateSize","updatesRank","summingDupeIndex","stridesType","indicesString","indicesSnippet","updatesString","updatesSnippet","strideString","scatterNd","scatterNdConfig","SearchSortedProgram","side","webGL2LoopHead","webGL1LoopHead","loopHead","boundComparator","searchSorted","sortedSequence","searchSortedConfig","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","SELU","selu","seluConfig","sign","signConfig","SIN","sin","sinConfig","sinh","sinhConfig","softplus","softplusConfig","spaceToBatchNDConfig","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","outputIndicesShape","sparseFillEmptyRowsConfig","sparseReshapeConfig","outputDataShape","sparseSegmentMeanConfig","sparseSegmentSumConfig","sparseToDense","sparseIndices","sparseValues","updatesBuf","sparseToDenseConfig","splitV","sliceT","splitVConfig","SQRT","squareConfig","stepConfig","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSlice","finalShapeSparse","$end","$strides","resultReshaped","stridedSliceConfig","stringNGramsConfig","stringSplitConfig","stringToHashBucketFastConfig","tan","tanConfig","tanhConfig","TileProgram","tileConfig","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","prevIndices","mergeProgram","prevValues","topKConfig","TransformProgram","interpolationModeId","fillModeId","transformConfig","unique","uniqueConfig","unpack","unpackConfig","SegmentOpProgram","segOpInfo","segOpType","checkValueOutOfBounds","checkSegmentIdOutOfBounds","unsortedSegmentSum","segOpCompute","rangeInfo","tileInfo","segOpResult","unsortedSegmentSumConfig","kernelConfigs","A","C","et","O","F","R","G","S","W","H","J","Y","Q","K","X","Z","T","P","D","B","L","E","V","I","exports","deinterlace","newPixels","cpRow","toRow","fromRow","pass","_gif","_interopRequireDefault","_jsBinarySchemaParser","_uint","_deinterlace","_lzw","parseGIF","arrayBuffer","byteData","generatePatch","totalPixels","patchData","pos","colorIndex","color","decompressFrame","frame","gct","buildImagePatch","resultImage","decompressFrames","parsedGif","buildImagePatches","lzw","minCodeSize","pixelCount","MAX_STACK_SIZE","nullCode","npix","clear","code_mask","code_size","end_of_information","in_code","old_code","bits","code","datum","data_size","first","bi","pi","dstPixels","pixelStack","parse","stream","schema","parent","partSchema","conditional","conditionFunc","loop","continueFunc","lastStreamPos","newParent","buildStream","uint8Data","readByte","peekByte","readBytes","peekBytes","readString","readUnsigned","littleEndian","readArray","byteSize","totalOrFunc","parser","subBitsTotal","startIndex","readBits","_byte","def","subBlocksSchema","terminator","chunks","streamSize","availableSize","gceSchema","codes","imageSchema","textSchema","applicationSchema","commentSchema","nextCode","_default","module","wasm","low","high","unsigned","isLong","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","radixLong","rem1","rem","remDiv","intval","digits","bit","other","thisNeg","otherNeg","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtrahend","approx","halfThis","log2","approxRes","approxRem","numBits","le","hi","lo"],"sourceRoot":""}