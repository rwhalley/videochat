{"version":3,"file":"static/js/973.94cd36d0.js","mappings":"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","sources":["components/HlsStatsOverlay.jsx","controllers/hls/HLSController.js","layouts/HLSView.jsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport { CloseIcon, LinkIcon } from \"@100mslive/react-icons\";\nimport { Flex, IconButton, Text } from \"@100mslive/react-ui\";\n\nexport function HlsStatsOverlay({ hlsStatsState, onClose }) {\n  return (\n    <Flex\n      css={{\n        position: \"absolute\",\n        minWidth: \"60%\",\n        margin: \"$8 0  0 $20\",\n        \"@md\": {\n          minWidth: \"60%\",\n          margin: \"$8 0  0 $8\",\n        },\n        \"@sm\": {\n          minWidth: \"100%\",\n          margin: \"$0\",\n        },\n        padding: \"$2 $4 $2 $4\",\n        zIndex: 100,\n        backgroundColor: \"rgba(55,59,66, 0.84)\",\n\n        borderRadius: \"$1\",\n      }}\n      direction=\"column\"\n    >\n      <Flex justify=\"end\">\n        <IconButton onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      </Flex>\n      <HlsStatsRow label=\"URL\">\n        <Flex align=\"center\">\n          <LinkIcon />\n          <a\n            style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\n            href={hlsStatsState?.url}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Stream url\n          </a>\n        </Flex>\n      </HlsStatsRow>\n      <HlsStatsRow label=\"Video size\">\n        {` ${hlsStatsState?.videoSize?.width}x${hlsStatsState?.videoSize?.height}`}\n      </HlsStatsRow>\n      <HlsStatsRow label=\"Buffer duration\">\n        {hlsStatsState?.bufferedDuration?.toFixed(2)}{\" \"}\n      </HlsStatsRow>\n      <HlsStatsRow label=\"Connection speed\">\n        {`${(hlsStatsState?.bandwidthEstimate / (1000 * 1000)).toFixed(2)}Mbps`}\n      </HlsStatsRow>\n      <HlsStatsRow label=\"Bitrate\">\n        {`${(hlsStatsState?.bitrate / (1000 * 1000)).toFixed(2)}Mbps`}\n      </HlsStatsRow>\n      <HlsStatsRow label=\"distance from live\">\n        {getDurationFromSeconds(hlsStatsState.distanceFromLive / 1000)}\n      </HlsStatsRow>\n      <HlsStatsRow label=\"Total frames dropped\">\n        {`${hlsStatsState?.droppedFrames}`}\n      </HlsStatsRow>\n    </Flex>\n  );\n}\n\n/**\n * Extracted from HLS new Player PR.\n * TODO: remove this and use HMSVideoUtils.js\n * when that code is merged\n */\nexport function getDurationFromSeconds(timeInSeconds) {\n  let time = Math.floor(timeInSeconds);\n  const hours = Math.floor(time / 3600);\n  time = time - hours * 3600;\n  const minutes = Math.floor(time / 60);\n  const seconds = Math.floor(time - minutes * 60);\n\n  const prefixedMinutes = `${minutes < 10 ? \"0\" + minutes : minutes}`;\n  const prefixedSeconds = `${seconds < 10 ? \"0\" + seconds : seconds}`;\n\n  let videoTimeStr = `${prefixedMinutes}:${prefixedSeconds}`;\n  if (hours) {\n    const prefixedHours = `${hours < 10 ? \"0\" + hours : hours}`;\n    videoTimeStr = `${prefixedHours}:${prefixedMinutes}:${prefixedSeconds}`;\n  }\n  return videoTimeStr;\n}\n\nconst HlsStatsRow = memo(({ label, children }) => {\n  return (\n    <Flex gap={4} justify=\"between\" css={{ width: \"100%\" }}>\n      <Text\n        css={{\n          width: \"30%\",\n          \"@md\": { fontSize: \"$md\" },\n          \"@sm\": { fontSize: \"$sm\" },\n        }}\n      >\n        {label}\n      </Text>\n      <Text\n        css={{\n          \"@md\": { fontSize: \"$md\" },\n          \"@sm\": { fontSize: \"$sm\" },\n          maxWidth: \"70%\",\n          minWidth: \"50%\",\n          overflowWrap: \"break-word\",\n        }}\n      >\n        {children}\n      </Text>\n    </Flex>\n  );\n});\n","import { EventEmitter2 as EventEmitter } from \"eventemitter2\";\nimport Hls from \"hls.js\";\nimport { FeatureFlags } from \"../../services/FeatureFlags\";\n\nexport const HLS_TIMED_METADATA_LOADED = \"hls-timed-metadata\";\nexport const HLS_STREAM_NO_LONGER_LIVE = \"hls-stream-no-longer-live\";\nexport const HLS_DEFAULT_ALLOWED_MAX_LATENCY_DELAY = 10; // seconds\n\nexport class HLSController {\n  hls;\n  videoRef;\n  eventEmitter = new EventEmitter();\n  isLive = true;\n  constructor(hlsUrl, videoRef) {\n    this.hls = new Hls(this.getHLSConfig());\n    this.videoRef = videoRef;\n    this.hls.loadSource(hlsUrl);\n    this.hls.attachMedia(videoRef.current);\n    this.handleHLSTimedMetadataParsing();\n    this.ControllerEvents = [\n      HLS_TIMED_METADATA_LOADED,\n      HLS_STREAM_NO_LONGER_LIVE,\n    ];\n  }\n\n  reset() {\n    if (this.hls && this.hls.media) {\n      this.hls.detachMedia();\n      this.hls = null;\n    }\n    this.eventEmitter = null;\n  }\n\n  /**\n   *\n   * @returns returns a Number which represents current\n   * quality level. -1 if currentlevel is set to \"Auto\"\n   */\n  getCurrentLevel() {\n    return this.hls.currentLevel;\n  }\n\n  /**\n   *\n   * @param { Number } currentLevel - currentLevel we want to\n   * set the stream to. -1 for Auto\n   */\n  setCurrentLevel(currentLevel) {\n    const newLevel = this.hls.levels.findIndex(\n      level => level.height === currentLevel.height\n    );\n    this.hls.currentLevel = newLevel;\n  }\n\n  getHlsJsInstance() {\n    return this.hls;\n  }\n\n  jumpToLive() {\n    const videoEl = this.videoRef.current;\n    videoEl.currentTime = this.hls.liveSyncPosition;\n    if (videoEl.paused) {\n      try {\n        videoEl.play();\n      } catch (err) {\n        console.error(\"Attempt to jump to live position Failed.\", err);\n      }\n    }\n  }\n\n  /**\n   * Event listener. Also takes HLS JS events. If its\n   * not a Controller's event, it just forwards the\n   * request to hlsjs\n   * @param {string | Hls.Events} eventName\n   * @param {Function} eventCallback\n   */\n  on(eventName, eventCallback) {\n    /**\n     * slight optimization. If the user is not\n     * interested in HLS_STREAM_NO_LONGER_LIVE,\n     * we don't have to register time_update event\n     * as it is a bit costly.\n     */\n    if (eventName === HLS_STREAM_NO_LONGER_LIVE) {\n      this.enableTimeUpdateListener();\n    }\n    if (this.ControllerEvents.indexOf(eventName) === -1) {\n      this.hls.on(eventName, eventCallback);\n    } else {\n      this.eventEmitter.addListener(eventName, eventCallback);\n    }\n  }\n\n  // listen for pause, play as well to show not live if paused\n  enableTimeUpdateListener() {\n    this.videoRef.current.addEventListener(\"timeupdate\", _ => {\n      if (this.hls) {\n        const videoEl = this.videoRef.current;\n        const allowedDelay =\n          this.getHLSConfig().liveMaxLatencyDuration ||\n          HLS_DEFAULT_ALLOWED_MAX_LATENCY_DELAY;\n        this.isLive =\n          this.hls.liveSyncPosition - videoEl.currentTime <= allowedDelay;\n        if (!this.isLive) {\n          this.eventEmitter.emit(HLS_STREAM_NO_LONGER_LIVE);\n        }\n      }\n    });\n  }\n  handleHLSTimedMetadataParsing() {\n    /**\n     * Metadata are automatically parsed and added to the video element's\n     * textTrack cue by hlsjs as they come through the stream.\n     * in FRAG_CHANGED, we read the cues and emit HLS_METADATA_LOADED\n     * when the current fragment has a metadata to play.\n     */\n    this.hls.on(Hls.Events.FRAG_CHANGED, (_, { frag }) => {\n      try {\n        if (this.videoRef.current.textTracks.length === 0) {\n          return;\n        }\n\n        const fragStartTime = frag.start;\n        /**\n         * this destructuring is needed because the cues array not a pure\n         * JS array and prevents us from\n         * performing array operations like map(),filter() etc.\n         */\n        const metadata = [...this.videoRef.current.textTracks[0].cues];\n        /**\n         * filter out only the metadata that have startTime set to future.\n         * (i.e) more than the current fragment's startime.\n         */\n        const metadataAfterFragStart = metadata.filter(mt => {\n          return mt.startTime >= fragStartTime;\n        });\n\n        metadataAfterFragStart.forEach(mt => {\n          const timeDifference = mt.startTime - fragStartTime;\n          const fragmentDuration = frag.end - frag.start;\n\n          if (timeDifference < fragmentDuration) {\n            const payload = mt.value.data;\n            /**\n             * we start a timeout for difference seconds.\n             * NOTE: Due to how setTimeout works, the time is only the minimum gauranteed\n             * time JS will wait before calling emit(). It's not guaranteed even\n             * for timeDifference = 0.\n             */\n            setTimeout(() => {\n              /** Even though duration comes as an attribute in the stream,\n               * HlsJs doesn't give us a property duration directly. So\n               * we calculate it ouselves. This is same as reading\n               * EXT-INF tag.\n               */\n              const duration = mt.endTime - mt.startTime;\n\n              /**\n               * finally emit event letting the user know its time to\n               * do whatever they want with the payload\n               */\n              this.eventEmitter.emit(HLS_TIMED_METADATA_LOADED, {\n                payload,\n                duration,\n                metadata: mt,\n              });\n            }, timeDifference * 1000);\n          }\n        });\n      } catch (e) {\n        console.error(\"FRAG_CHANGED event error\", e);\n      }\n    });\n  }\n\n  getHLSConfig() {\n    if (FeatureFlags.optimiseHLSLatency()) {\n      // should reduce the latency by around 2-3 more seconds. Won't work well without good internet.\n      return {\n        enableWorker: true,\n        liveSyncDuration: 1,\n        liveMaxLatencyDuration: 5,\n        liveDurationInfinity: true,\n        highBufferWatchdogPeriod: 1,\n      };\n    }\n    return {\n      enableWorker: true,\n      maxBufferLength: 20,\n      backBufferLength: 10,\n    };\n  }\n}\n","import React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { HlsStats } from \"@100mslive/hls-stats\";\nimport Hls from \"hls.js\";\nimport {\n  selectAppData,\n  selectHLSState,\n  useHMSActions,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport {\n  ChevronDownIcon,\n  ChevronUpIcon,\n  RecordIcon,\n  SettingsIcon,\n} from \"@100mslive/react-icons\";\nimport {\n  Box,\n  Button,\n  Dropdown,\n  Flex,\n  styled,\n  Text,\n  Tooltip,\n} from \"@100mslive/react-ui\";\nimport { HlsStatsOverlay } from \"../components/HlsStatsOverlay\";\nimport { ToastManager } from \"../components/Toast/ToastManager\";\nimport {\n  HLS_STREAM_NO_LONGER_LIVE,\n  HLS_TIMED_METADATA_LOADED,\n  HLSController,\n} from \"../controllers/hls/HLSController\";\nimport { APP_DATA } from \"../common/constants\";\n\nconst HLSVideo = styled(\"video\", {\n  margin: \"0 auto\",\n  flex: \"1 1 0\",\n  minHeight: 0,\n  h: \"100%\",\n});\n\nlet hlsController;\nlet hlsStats;\n\nconst HLSView = () => {\n  const videoRef = useRef(null);\n  const hlsState = useHMSStore(selectHLSState);\n  const enablHlsStats = useHMSStore(selectAppData(APP_DATA.hlsStats));\n  const hmsActions = useHMSActions();\n  let [hlsStatsState, setHlsStatsState] = useState(null);\n  const hlsUrl = hlsState.variants[0]?.url;\n  const [availableLevels, setAvailableLevels] = useState([]);\n  const [isVideoLive, setIsVideoLive] = useState(true);\n\n  const [currentSelectedQualityText, setCurrentSelectedQualityText] =\n    useState(\"\");\n  const [qualityDropDownOpen, setQualityDropDownOpen] = useState(false);\n  useEffect(() => {\n    let videoEl = videoRef.current;\n    if (videoEl && hlsUrl) {\n      if (Hls.isSupported()) {\n        hlsController = new HLSController(hlsUrl, videoRef);\n        hlsStats = new HlsStats(hlsController.getHlsJsInstance(), videoEl);\n        hlsController.on(HLS_STREAM_NO_LONGER_LIVE, () => {\n          setIsVideoLive(false);\n        });\n        hlsController.on(HLS_TIMED_METADATA_LOADED, ({ payload, ...rest }) => {\n          console.log(\n            `%c Payload: ${payload}`,\n            \"color:#2b2d42; background:#d80032\"\n          );\n          console.log(rest);\n          ToastManager.addToast({\n            title: `Payload from timed Metadata ${payload}`,\n          });\n        });\n\n        hlsController.on(Hls.Events.MANIFEST_LOADED, (_, { levels }) => {\n          const onlyVideoLevels = removeAudioLevels(levels);\n          setAvailableLevels(onlyVideoLevels);\n          setCurrentSelectedQualityText(\"Auto\");\n        });\n      } else if (videoEl.canPlayType(\"application/vnd.apple.mpegurl\")) {\n        videoEl.src = hlsUrl;\n      }\n    }\n    return () => {\n      hlsStats = null;\n    };\n  }, [hlsUrl]);\n\n  useEffect(() => {\n    if (!hlsStats) {\n      return;\n    }\n    let unsubscribe;\n    if (enablHlsStats) {\n      unsubscribe = hlsStats.subscribe(state => {\n        setHlsStatsState(state);\n      });\n    } else {\n      unsubscribe?.();\n    }\n    return () => {\n      unsubscribe?.();\n    };\n  }, [enablHlsStats]);\n\n  useEffect(() => {\n    if (hlsController) {\n      return () => hlsController.reset();\n    }\n  }, []);\n\n  const qualitySelectorHandler = useCallback(\n    qualityLevel => {\n      if (hlsController) {\n        hlsController.setCurrentLevel(qualityLevel);\n        const levelText =\n          qualityLevel.height === \"auto\" ? \"Auto\" : `${qualityLevel.height}p`;\n        setCurrentSelectedQualityText(levelText);\n      }\n    },\n    [availableLevels] //eslint-disable-line\n  );\n\n  const sfnOverlayClose = () => {\n    hmsActions.setAppData(APP_DATA.hlsStats, !enablHlsStats);\n  };\n\n  return (\n    <Fragment>\n      {hlsStatsState?.url && enablHlsStats ? (\n        <HlsStatsOverlay\n          hlsStatsState={hlsStatsState}\n          onClose={sfnOverlayClose}\n        />\n      ) : null}\n      {hlsUrl ? (\n        <Flex css={{ flexDirection: \"column\", size: \"100%\", px: \"$10\" }}>\n          <HLSVideo ref={videoRef} autoPlay controls playsInline />\n          <Flex align=\"center\" justify=\"end\">\n            {hlsController ? (\n              <Button\n                variant=\"standard\"\n                css={{ marginRight: \"0.3rem\" }}\n                onClick={() => {\n                  hlsController.jumpToLive();\n                  setIsVideoLive(true);\n                }}\n                key=\"LeaveRoom\"\n                data-testid=\"leave_room_btn\"\n              >\n                <Tooltip title=\"Jump to Live\">\n                  <Flex css={{ gap: \"$2\" }}>\n                    <RecordIcon\n                      color={isVideoLive ? \"#CC525F\" : \"FAFAFA\"}\n                      key=\"jumpToLive\"\n                    />\n                    Live\n                  </Flex>\n                </Tooltip>\n              </Button>\n            ) : null}\n            <Dropdown.Root\n              open={qualityDropDownOpen}\n              onOpenChange={value => setQualityDropDownOpen(value)}\n            >\n              <Dropdown.Trigger asChild data-testid=\"quality_selector\">\n                <Flex\n                  css={{\n                    color: \"$textPrimary\",\n                    borderRadius: \"$1\",\n                    cursor: \"pointer\",\n                    zIndex: 4,\n                    border: \"$space$px solid $textDisabled\",\n                    padding: \"$4\",\n                  }}\n                >\n                  <Tooltip title=\"Select Quality\">\n                    <Flex>\n                      <SettingsIcon />\n                      <Text variant=\"md\">{currentSelectedQualityText}</Text>\n                    </Flex>\n                  </Tooltip>\n\n                  <Box\n                    css={{\n                      \"@lg\": { display: \"none\" },\n                      color: \"$textDisabled\",\n                    }}\n                  >\n                    {qualityDropDownOpen ? (\n                      <ChevronDownIcon />\n                    ) : (\n                      <ChevronUpIcon />\n                    )}\n                  </Box>\n                </Flex>\n              </Dropdown.Trigger>\n              {availableLevels.length > 0 && (\n                <Dropdown.Content\n                  sideOffset={5}\n                  align=\"end\"\n                  css={{ height: \"auto\", maxHeight: \"$96\" }}\n                >\n                  <Dropdown.Item\n                    onClick={event =>\n                      qualitySelectorHandler({ height: \"auto\" })\n                    }\n                    css={{\n                      h: \"auto\",\n                      flexDirection: \"column\",\n                      flexWrap: \"wrap\",\n                      cursor: \"pointer\",\n                      alignItems: \"flex-start\",\n                    }}\n                    key=\"auto\"\n                  >\n                    <Text>Automatic</Text>\n                  </Dropdown.Item>\n                  {availableLevels.map(level => {\n                    return (\n                      <Dropdown.Item\n                        onClick={() => qualitySelectorHandler(level)}\n                        css={{\n                          h: \"auto\",\n                          flexDirection: \"column\",\n                          flexWrap: \"wrap\",\n                          cursor: \"pointer\",\n                          alignItems: \"flex-start\",\n                        }}\n                        key={level.url}\n                      >\n                        <Text>{`${level.height}p (${(\n                          Number(level.bitrate / 1024) / 1024\n                        ).toFixed(2)} Mbps)`}</Text>\n                      </Dropdown.Item>\n                    );\n                  })}\n                </Dropdown.Content>\n              )}\n            </Dropdown.Root>\n          </Flex>\n        </Flex>\n      ) : (\n        <Flex align=\"center\" justify=\"center\" css={{ size: \"100%\", px: \"$10\" }}>\n          <Text variant=\"md\" css={{ textAlign: \"center\" }}>\n            Waiting for the stream to start...\n          </Text>\n        </Flex>\n      )}\n    </Fragment>\n  );\n};\n\n/**\n *\n * This function is needed because HLSJS currently doesn't\n * support switching to audio rendition from a video rendition.\n * more on this here\n * https://github.com/video-dev/hls.js/issues/4881\n * https://github.com/video-dev/hls.js/issues/3480#issuecomment-778799541\n * https://github.com/video-dev/hls.js/issues/163#issuecomment-169773788\n *\n * @param {Array} levels array from hlsJS\n * @returns a new array with only video levels.\n */\nfunction removeAudioLevels(levels) {\n  return levels.filter(\n    ({ videoCodec, width, height }) => !!videoCodec || !!(width && height)\n  );\n}\n\nexport default HLSView;\n"],"names":["HlsStatsOverlay","hlsStatsState","onClose","Flex","IconButton","CloseIcon","HlsStatsRow","LinkIcon","getDurationFromSeconds","timeInSeconds","time","hours","minutes","seconds","prefixedMinutes","prefixedSeconds","videoTimeStr","label","children","Text","HLS_TIMED_METADATA_LOADED","HLS_STREAM_NO_LONGER_LIVE","HLS_DEFAULT_ALLOWED_MAX_LATENCY_DELAY","HLSController","hlsUrl","videoRef","currentLevel","newLevel","level","videoEl","err","eventName","eventCallback","_","allowedDelay","frag","fragStartTime","mt","timeDifference","fragmentDuration","payload","duration","e","FeatureFlags","HLSVideo","hlsController","hlsStats","HLSView","hlsState","enablHlsStats","hmsActions","setHlsStatsState","availableLevels","setAvailableLevels","isVideoLive","setIsVideoLive","currentSelectedQualityText","setCurrentSelectedQualityText","qualityDropDownOpen","setQualityDropDownOpen","_a","rest","ToastManager","levels","onlyVideoLevels","removeAudioLevels","unsubscribe","state","qualitySelectorHandler","qualityLevel","levelText","sfnOverlayClose","Button","Tooltip","RecordIcon","Dropdown","value","SettingsIcon","Box","ChevronDownIcon","ChevronUpIcon","event","videoCodec","width","height"],"sourceRoot":""}