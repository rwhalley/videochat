{"version":3,"file":"static/js/922.28a5c30f.js","mappings":"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","sources":["plugins/transcription/TranscriptionButton.jsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport Pusher from \"pusher-js\";\nimport RecordRTC, { StereoAudioRecorder } from \"recordrtc\";\nimport {\n  HMSNotificationTypes,\n  selectIsAllowedToPublish,\n  selectRoomID,\n  useHMSNotifications,\n  useHMSStore,\n} from \"@100mslive/react-sdk\";\nimport { ClosedCaptionIcon } from \"@100mslive/react-icons\";\nimport { Box, IconButton, Text, Tooltip } from \"@100mslive/react-ui\";\nimport { FeatureFlags } from \"../../services/FeatureFlags\";\n\nconst pusher =\n  FeatureFlags.enableTranscription &&\n  new Pusher(process.env.REACT_APP_TRANSCRIPTION_PUSHER_APP_KEY, {\n    cluster: \"ap2\",\n    authEndpoint: process.env.REACT_APP_TRANSCRIPTION_PUSHER_AUTHENDPOINT,\n  });\nlet channel = null;\n\nexport function TranscriptionButton() {\n  const [isTranscriptionEnabled, setIsTranscriptionEnabled] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const [speakingPeer, setSpeakingPeer] = useState(\"\");\n  const transcriber = useRef(null);\n  const roomId = useHMSStore(selectRoomID);\n  const isAllowedToPublish = useHMSStore(selectIsAllowedToPublish);\n  const notification = useHMSNotifications();\n\n  const enableTranscription = useCallback(\n    (enabled = null) => {\n      if (!transcriber.current) {\n        transcriber.current = new Transcriber(setTranscript, setSpeakingPeer);\n        transcriber.current.enabled = false;\n      }\n      if (enabled !== false) {\n        enabled = !isTranscriptionEnabled;\n      }\n      transcriber.current.enableTranscription(enabled);\n      setIsTranscriptionEnabled(enabled);\n    },\n    [isTranscriptionEnabled]\n  );\n\n  useEffect(() => {\n    channel = pusher.subscribe(`private-${roomId}`);\n    channel.bind(`client-transcription`, ({ text }) => {\n      if (text) {\n        let remoteTranscription = JSON.parse(text);\n        if (remoteTranscription && remoteTranscription.transcriptionConfig) {\n          // Remote Peer is enabled/disabled the transcription feature\n          enableTranscription(\n            (isTranscriptionEnabled ? false : true) &&\n              remoteTranscription.transcriptionConfig.isEnabled\n          );\n        } else if (\n          remoteTranscription &&\n          remoteTranscription.peername &&\n          remoteTranscription.transcript !== \"\"\n        ) {\n          /**\n           *  Remote Peername and his Transcripts should be there on results. If those are missing, something goes wrong in the broadcast flow.\n           *  If any failure happens, we won't display any subtitle texts on the UI.\n           **/\n          setTranscript(remoteTranscription.transcript);\n          setSpeakingPeer(\"[\" + remoteTranscription.peername + \"]\");\n          if (remoteTranscription.isEnabled && !isTranscriptionEnabled) {\n            enableTranscription();\n          }\n          setTimeout(() => {\n            setTranscript(\"\");\n            setSpeakingPeer(\"\");\n          }, 5000);\n        }\n      }\n    });\n  }, [roomId, isTranscriptionEnabled, enableTranscription]);\n\n  useEffect(() => {\n    if (!notification) {\n      return;\n    }\n    if (\n      transcriber.current &&\n      isTranscriptionEnabled &&\n      notification.type === HMSNotificationTypes.PEER_JOINED\n    ) {\n      transcriber.current.broadcast(\n        JSON.stringify({ transcriptionConfig: { isEnabled: true } })\n      );\n    }\n  }, [notification, isTranscriptionEnabled]);\n\n  return (\n    <>\n      <Box\n        css={{\n          textAlign: \"left\",\n          fontWeight: \"$medium\",\n          bottom: \"120px\",\n          position: \"fixed\",\n          width: \"100%\",\n          fontSize: \"$20px\",\n          zIndex: \"1000000\",\n          color: \"white\",\n          textShadow: \"0px 0px 6px #000\",\n          whiteSpace: \"pre-line\",\n          paddingLeft: \"40px\",\n        }}\n      />\n      <Box\n        css={{\n          textAlign: \"center\",\n          fontWeight: \"$medium\",\n          bottom: \"90px\",\n          position: \"fixed\",\n          width: \"100%\",\n          fontSize: \"$20px\",\n          zIndex: \"1000000\",\n          color: \"white\",\n          textShadow: \"0px 0px 6px #000\",\n          whiteSpace: \"pre-line\",\n        }}\n      >\n        <Text\n          css={{\n            color: \"white\",\n            textShadow: \"0px 0px 6px #000\",\n          }}\n        >\n          {transcript}\n        </Text>\n        <Text\n          css={{\n            color: \"#c0bbbb\",\n            textShadow: \"0px 0px 6px #000\",\n            textTransform: \"capitalize\",\n          }}\n        >\n          {speakingPeer}\n        </Text>\n      </Box>\n      {isAllowedToPublish.audio && (\n        <Tooltip\n          title={`Turn ${!isTranscriptionEnabled ? \"on\" : \"off\"} transcription`}\n        >\n          <IconButton\n            active={!isTranscriptionEnabled}\n            onClick={enableTranscription}\n            data-testid=\"transcription_btn\"\n          >\n            <ClosedCaptionIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </>\n  );\n}\nclass Transcriber {\n  constructor(setTranscript, setSpeakingPeer) {\n    this.enabled = false;\n    this.socket = null;\n    this.totalTimeDiff = 0;\n    this.totalCount = 0;\n    this.streams = {};\n    this.setTranscript = setTranscript;\n    this.setSpeakingPeer = setSpeakingPeer;\n    this.initialized = false;\n    this.lastMessage = {};\n    this.localPeerId = null;\n    this.sttTuningConfig = {\n      timeSlice: 250,\n      desiredSampRate: 8000,\n      numberOfAudioChannels: 1,\n      bufferSize: 256,\n    };\n  }\n\n  broadcast = (text, eventName = \"transcription\") => {\n    channel.trigger(`client-${eventName}`, { text, eventName });\n  };\n\n  async listen() {\n    try {\n      const localPeer = window.__hms.sdk.getLocalPeer();\n      this.localPeerId = localPeer.peerId;\n      this.streams[localPeer.peerId] = {\n        stream: new MediaStream([localPeer.audioTrack.nativeTrack]),\n        name: localPeer.name,\n      };\n\n      let url = process.env.REACT_APP_DYNAMIC_STT_TOKEN_GENERATION_ENDPOINT;\n      let res = await fetch(url);\n      let body = await res.json();\n      if (body && body.token) {\n        const token = body.token;\n        this.socket = await new WebSocket(\n          `wss://api.assemblyai.com/v2/realtime/ws?sample_rate=${this.sttTuningConfig.desiredSampRate}&token=${token}`\n        );\n        this.setTranscript(\"\");\n        this.socket.onmessage = message => {\n          try {\n            const res = JSON.parse(message.data);\n            if (res.text && this.enabled) {\n              let peername = this.streams[this.localPeerId][\"name\"];\n              //Limiting the transcript size based on it's charecter length.\n              let messageText =\n                res.text.length >= 80\n                  ? res.text\n                      .split(\" \")\n                      .slice(Math.max(res.text.split(\" \").length - 10, 1))\n                      .join(\" \")\n                  : res.text;\n              this.setTranscript(messageText);\n              this.setSpeakingPeer(\"[You]\");\n              setTimeout(() => {\n                this.setTranscript(\"\");\n                this.setSpeakingPeer(\"\");\n              }, 5000);\n              this.broadcast(\n                JSON.stringify({\n                  peername: peername,\n                  transcript: messageText,\n                  isEnabled: this.enabled,\n                })\n              );\n            }\n          } catch (err) {\n            console.error(\"transcription\", err);\n          }\n        };\n\n        this.socket.onerror = event => {\n          console.error(\"transcription\", event);\n          this.socket.close();\n        };\n\n        this.socket.onclose = event => {\n          try {\n            console.log(event);\n            this.socket = null;\n            if (this.enabled) {\n              this.listen();\n            }\n          } catch (err) {\n            console.error(\"transcription\", err);\n          }\n        };\n\n        this.socket.onopen = () => {\n          try {\n            for (let i in this.streams) {\n              this.observeStream(this.streams[i][\"stream\"]);\n            }\n          } catch (err) {\n            console.error(\"transcription\", err);\n          }\n        };\n      } else {\n        console.log(\"Unable to fetch dynamic token!!\");\n      }\n    } catch (err) {\n      console.error(\"transcription\", err);\n    }\n  }\n\n  async observeStream(stream) {\n    let recorder = new RecordRTC(stream, {\n      ...this.sttTuningConfig,\n      type: \"audio\",\n      mimeType: \"audio/webm;codecs=pcm\",\n      recorderType: StereoAudioRecorder,\n      ondataavailable: blob => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const base64data = reader.result;\n          if (\n            this.socket &&\n            this.enabled &&\n            this.socket.readyState &&\n            this.socket.readyState === 1\n          ) {\n            try {\n              this.socket.send(\n                JSON.stringify({ audio_data: base64data.split(\"base64,\")[1] })\n              );\n            } catch (err) {\n              console.error(\"transcription\", err);\n            }\n          }\n        };\n        reader.readAsDataURL(blob);\n      },\n    });\n    recorder.startRecording();\n  }\n\n  enableTranscription(enable) {\n    if (enable && !this.enabled) {\n      this.enabled = true;\n      this.listen();\n      this.broadcast(\n        JSON.stringify({ transcriptionConfig: { isEnabled: true } })\n      );\n    } else if (!enable && this.enabled) {\n      this.broadcast(\n        JSON.stringify({ transcriptionConfig: { isEnabled: false } })\n      );\n      this.enabled = false;\n      this.socket.close();\n      this.socket = null;\n      setTimeout(() => {\n        this.setTranscript(\"\");\n      }, 200);\n    }\n  }\n}\n"],"names":["FeatureFlags","channel","TranscriptionButton","isTranscriptionEnabled","setIsTranscriptionEnabled","transcript","setTranscript","speakingPeer","setSpeakingPeer","transcriber","roomId","isAllowedToPublish","notification","enableTranscription","enabled","Transcriber","text","remoteTranscription","Box","Text","Tooltip","IconButton","ClosedCaptionIcon","eventName","localPeer","url","body","token","message","res","peername","messageText","err","event","i","stream","blob","reader","base64data","enable"],"sourceRoot":""}